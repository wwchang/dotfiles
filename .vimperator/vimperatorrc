"3.3 (created: 2011/11/13 17:32:12)

source! /home/chris/.vimperatorrc.local

" [ options ] {{{

    " runtimepath
    set runtimepath=~/.vimperator

    " [ style ] {{{
        " for useing customize stylesheet.
        set usermode=true
        set gui=nomenu,navigation,tabs,bookmarks,addons
        set smallicons
            " show current mode in the command line.
        set showmode
        set focuscontent
        set verbose=9
        let mapleader='\'
        set animations

        " encoding
        set encoding="UTF-8"
        set fileencoding="UTF-8"

        " scroll
        set noscrollbars
        set scroll=0

        " online / offline
        set online

        set focuscontent
            " Focus the content after a page has loaded. This is useful if you
            " always want to stay in Normal mode when browsing between web sites.
            " When on, it blurs any textbox which often is automatically focused
            " on page load.  If you usually like 'focuscontent' but sometimes
            " you'd like to focus the first input field, you can use gi to jump to
            " it.

        " statusline
        set status=input,location,bookmark,history,tabcount,position
        set showstatuslinks=2

        " fullscreen
        set nofullscreen

        " Next Page and Previous Page
        " set nextpattern=\s*下一页|下一张|下一篇|下页|后页\s*,^\bnext\b,\\bnext\\b,^>$,^(>>|»)$,^(>|»),(>|»)$,\\bmore\\b
        " set previouspattern=\s*上一页|上一张|上一篇|上页|前页\s*,^\bprev|previous\b,\\bprev|previous\\b,^<$,^(<<|«)$,^(<|«),(<|«)$
    " }}}

    " [ completion ] {{{
        set autocomplete
            " S search engine suggest
        set complete=sblf
        set wildmode=list:full

        " case
        set smartcase
        set ignorecase

        " path
        set cdpath=,,
    " }}}

    " [ search engines ] {{{
        set defsearch=duckduckgoSSL
        set suggestengines=duckduckgo
            " highlight previous search pattern matches.
        set hlsearch
            " show where the search pattern matches as it is typed.
        set incsearch

        " Search Engines {{{
        " }}}
    " }}}

    " [ hints ] {{{
        set followhints=0
        set hintchars=0123456789
        set hintinputs=label,value
        set hintmatching=contains
        " set hinttags
        set hinttimeout=0
    " }}}

    " [ insert ] {{{
            " use insert mode as the default for text areas.
            " this is useful if you want to use the known firefox interface for
            " editing text areas. Input fields default to this behaviour
            " irrespective of this option's setting.
            " Textarea mode can be entered with <C-t> from Insert mode.
        set insertmode
    " }}}

    " [ tab / popup ] {{{
        set newtab=all
        set notabnumbers

        set popups=tab
    " }}}

    " [ history ] {{{
        set history=500
    " }}}

    " [ private ] {{{
        set noprivate
    " }}}

    " [ for about:config ] {{{
    set! ui.key.generalAccesskey=0
    " }}}

    " [ plugins ] {{{
            " load plugins when starting up.
        set loadplugins
    " }}}

    " [ message ] {{{
        set messagetimeout=5000
    " }}}

    " [ shell ] {{{
        set shell=_$SHELL_
        set shellcmdflag=-c
    " }}}

    " [ editor ] {{{
        set editor=gvim -f
    " }}}
" }}}

" [ maps ] {{{
map     <leader>s       :runtime _vimperatorrc<CR>
nnoremap <Leader>a  :addons<cr>
nnoremap <Leader>d  :downloads<cr>
nnoremap <C-j>      :downloads<cr>
nnoremap <Leader>eu :set encoding=UTF-8<cr>
nnoremap <Leader>eg :set encoding=GB2312<cr>

" FIXME
" press <C-Tab> to insert literal Tab in insert mode.
" inoremap <C-Tab> \t

" localhost
command! localhost -nargs=? tabopen http://localhost:<args>
" map z :localhost 

" Map for plugins or scripts
map <silent> <F2> :js toggle_bar()<CR>
map <silent> <F3> :js toggle_autoproxy()<CR>
map <silent> <F1> :js openProfileDirectory()<CR>

" maps for Autoproxy
noremap <silent> <leader>ap :js toggle_autoproxy()<CR>
noremap <silent> <leader>a :set! extensions.autoproxy.proxyMode=auto<CR>:echo ':)'<CR>
noremap <silent> <leader>g :set! extensions.autoproxy.proxyMode=global<CR>:echo ':D'<CR>
noremap <silent> <leader>d :set!  extensions.autoproxy.proxyMode=disabled<CR>:echo ':('<CR>')'
" }}}

" [ Theme & Style ] {{{
    " ~/.vimperator/color/*.vimp

    "highlight! StatusLine color: black; background:transparent; font-weight:bold;
    "highlight! CmdLine color:#d8d8d8; background:#2b2b2b;
    "highlight! ModeMsg  color:darkgreen; background: white;font-weight:bold;
    "highlight! ErrorMsg font-weight:normal; color:red; background:white;
    "hi! Hint font-family: monospace; font-size: 9px; text-transform: uppercase; color: white; background-color: #1E90FF; padding:1px;
    "hi! HintElem clear
" }}}

" disable Vimperator keys on URL {{{
" Google Gmail, Reader,
autocmd LocationChange .* js modes.passAllKeys = /.*(mail\.google\.com|www\.google\.com\/reader).*/.test(buffer.URL)
" Web QQ
autocmd LocationChange .* js modes.passAllKeys = /.*(web\.qq\.com).*/.test(buffer.URL)
" Stack Overflow
" autocmd LocationChange .* js modes.passAllKeys = /.*(stackoverflow|superuser\.com).*/.test(buffer.URL)

" Set the filetype to mail when editing email at gmail:
"autocmd LocationChange .* :set editor=gvim -f
"autocmd LocationChange mail\\.google\\.com :set editor=gvim -f -c 'set ft=mail'
" }}}

" [ Commands ] {{{
    " set Firebug internals with 'set!' (NOTE: must has ! )
    " command! useragent set! general.useragent.extra.firefox?
    " Firebug extension
    " Web developer extension
    command! webdev js webdeveloper_toggleToolbar();
    " Pin current tab as App Tab.
    command! app set apptab!

    " [ dictionary lookup/translate ]
    " command dict -nargs=* tabopen http://dict.cn/<args>
    " map w :dict
    " command gtranslate -nargs=* tabopen http://translate.google.cn/?hl=en#ja/zh-CN/<args>
    command youdao -nargs=* tabopen http://dict.youdao.com/search?q=<args>&keyfrom=dict.index
    map w :youdao 
" }}}

" [ JavaScript ] {{{
js << EOF

// Toggle menubar and toolbar {{{
liberator.globalVariables['tt_gopt'] = 'T';
toggle_bar = function() {
    toggle_status = liberator.globalVariables['tt_gopt'];
    liberator.globalVariables['tt_gopt'] = (toggle_status==''?'T':'');
    liberator.execute('set guioptions='+toggle_status);
}
// }}}

// Toggle autoproxy {{{
liberator.globalVariables['tt_autoproxy'] = false;
toggle_autoproxy = function() {
    toggle_status = liberator.globalVariables['tt_autoproxy'];
    liberator.globalVariables['tt_autoproxy'] = toggle_status = !toggle_status;

    if (toggle_status) {
        liberator.execute('set! extensions.autoproxy.proxyMode='+'auto');
        liberator.execute('echo "Autoproxy Enabled"');
    } else {
        liberator.execute('set! extensions.autoproxy.proxyMode='+'disabled');
        liberator.execute('echo "Autoproxy Disabled"');
    }
}
// Enable by default
// }}}

// openProfileDirectory function {{{
function openProfileDirectory() {
    // Get the profile directory.
    var file = Components.classes["@mozilla.org/file/directory_service;1"].
        getService(Components.interfaces.nsIProperties).
        get("ProfD", Components.interfaces.nsIFile);
    let profileDir = file.path;

    // Show the profile directory.
    let nsLocalFile = Components.Constructor("@mozilla.org/file/local;1","nsILocalFile", "initWithPath");
    new nsLocalFile(profileDir).reveal();
}
// }}}

EOF
" }}}

" vim: ft=vimperator foldmarker={{{,}}} foldmethod=marker
