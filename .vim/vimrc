" Author: stardiviner ( numbchild at gmail dot com )

" TODO
" :e ftplugin/example.template
" :help ftplugin
" write some language specified filetype settings into ftplugin/

" [[ vimrc structure ]] {{{
" .vimrc -- global settings
" .vim/
"   after/  -- files that are loaded after sourced system plugins. override
"               system settings.
"       ftplugin/
"       plugin/
"       syntax/
"       ...
"   autoload/ -- automatically loaded scripts.
"   colors/   -- custom color schemes.
"   doc/      -- plugin documentation.
"   ftdetect/ -- filetype detection scripts.
"   ftplugin/ -- filetype plugins (load before system files, override by system)
"   indent/   -- indent scripts.
"   plugin/   -- plugins.
"   syntax/   -- syntax scripts.
"
" }}}

" [[ vim Settings ]] {{{
    " vimrc set options howto
    " :help options.txt, :options/:browse set, to show all setted options.

    set nocompatible " not vim compatible. must be first one, will affect other options

    " [ updating vimrc file on the fly ] {{{
    if has("autocmd")
        augroup SourceVimrc
            au!
            autocmd bufwritepost .vimrc source $MYVIMRC
        augroup END
    endif
    nnoremap <Leader>ev :split $MYVIMRC<CR>
    nnoremap <Leader>tv :tabedit $MYVIMRC<CR>
    nnoremap <Leader>sv :source $MYVIMRC<CR>
    " }}}

    " [ tty ] {{{
    " set ttytype " default from $TERM
    set ttybuiltin " on: the builtin termcaps are searched before external ones.
    set ttyscroll=100 " small number to speed up displaying.
    set ttyfast " for tmux, screen. when TERM=screen, rxvt etc.
    " }}}

    " [ system detection ] {{{
    "if system('uname -v') =~ 'Ubuntu'
    "endif
    " }}}

    " [ mouse ] {{{ " :help 'mouse'
    if has('mouse')
        " set mouse=""           " disable mouse
        set mouse=v " a: all modes, v: visual,
        " right mouse button
        set mousemodel=popup_setpos " extends a selection. like in an xterm.
        " set mouseshape=
    endif
    " }}}

    " [ help ] {{{ vim internal HELP
    " ":options | resize"
    " nnoremap K <ESC>:exec "help".expand("<cWORD>")<CR>
    " nnoremap K <ESC>:exec "help" expand("<cword>")<CR>
    " autocmd FileType tex nnoremap <buffer> K :exec "help" expand("<cword>")<CR>
    "augroup KHelp
        "au!
        "au FileType sh setlocal keywordprg="man-s"
        "au FileType vim,help let &keywordprg=":help"
    "augroup END
        " }}}

    " [ history ] {{{
    set history=50 " history lines
    " undo
    set undolevels=1000
    " }}}

    " [ command line ] {{{ :help cmdline-completion
    set wildmenu wildmode=longest:full,full " show matches above cmdline <C-N/P>.
    set wildchar=<Tab>               " <Tab> to complete in cmdline.
    set wildignorecase               " ignore case when completing file names and directories.
    set wildmode=list:full           " or use list,longest
    " }}}

    " [ encode ] {{{
    set encoding=utf-8
    set fileencoding=utf-8
    set fileencodings=utf-8,ucs-bom,enc-cn,cp936,gbk,latin1
    set ambiwidth="double" " ambiguous character width.
        " ambiwidth: only effect when 'encoding' is 'utf-8'
    " "set isfname+=32 " let vim support filename with white spaces when  using "gf".
    " }}}

    " [ register ] {{{
    " you can use ["+p and "+y] to paste and yank
    set clipboard+=unnamed   " "* is the clipboard register,
    " }}}

    " [ diff, paste & select mode ] {{{
    " diff mode
    set diffopt=vertical,filler,context:10,foldcolumn:1
    " set scrollbind
    " paste mode
    " set paste " set nopaste
    nnoremap <F2> :set invpaste paste?<CR>
    set pastetoggle=<F2>
    " select mode -> visual mode, with gh or <Ctrl-G>
    " set selectmode=mouse
    " }}}

    " [ modeline ] {{{
    set modeline     " =/* vim: set ai ft=config: */
    set modelines=5  " the number of lines that is checked for set commands.
    set columns=80
    set colorcolumn=+1 " 80 columns: highlight column after 'textwidth', a red line.
    " set cc=+1,+2,+3  " highlight three columns after 'textwidth'
    " set colorcolumn=4,+1
        " add bellowing to colorscheme file.
        "hi ColorColumn     ctermfg=None ctermbg=233
    " }}}

    " [ buffer ] {{{
    " set autowrite                    " auto write when changed
    " set autowriteall
    set autochdir
    set autoread                     " auto read changed files
    set updatetime=4000              " Bundle showmarks need lower updatetime to refresh marks.
    set confirm                      " confirm current buffer.
    if has("vms")
        set nobackup " do not keep a backup file, use version instead
    else
        set backup		" keep a backup file
    endif
    set backupdir=$HOME/.backup-vim/  " backup dir
    set backupcopy=auto             " auto, breakhardlink(for hardlink, to create separate swap)
    set dir=.,~/.tmp,/var/tmp,/tmp  " swap file dir
    " }}}

    set backspace=2        " more powerful backspace

    " [ tags ] {{{
    " C-], [count]C-T, {Visual}g], {Visual}g C-], <C-w><C-]>,
    " :tag, :tags, :[count]tnext/tprevious,
    set tags=./tags,tags " filename for tag command
    set taglength=0 " number(N): up to this number of characters.
    set tagrelative
    " }}}

    " [ cscope ] {{{
    " C-], [count]C-T, {Visual}g], {Visual}g C-],
    " :cscope, :cs, :scscope(split) :lcscope, :cstag,
    " ------------
    " $ cscope -b       > build up cscope database for source code.
    " :cscope add cscope.out > add database to vim. establishes a connection.
    if has("cscope")
        set cscopeprg=cscope " cscope program.
        " find {querytype}: + append, - clear, 0/absence -> don't use quickfix.
        set nocscopetag " always search cscope database instead of tags file.
        set cscopetagorder=0 " 0: cscope -> tags file, 1: tags file -> cscope
        " set cscoperelative
        set cscopequickfix=s-,c-,d-,i-,t-,e- " use quickfix to show result
        set cscopepathcomp=3 " how many components of a file's path to display

        set nocscopeverbose " work with bellowing verbose setting.
        " add any database in current directory
        if filereadable("cscope.out")
            cscope add cscope.out
            " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
            cscope add $CSCOPE_DB
        endif
        set cscopeverbose " print message indicate success or failure.

        " keep regular tag behavior and have a different shortcut access :cstag
        map <C-_> :cstag <C-R>=expand("<cword>")<CR><CR>
        " following scheme.
        " s: Find this C symbol
        " g: Find this definition
        " d: Find functions called by this function
        " c: Find functions calling this function
        " t: Find this text string
        " e: Find this egrep pattern
        " f: Find this file
        " i: Find files #including this file
        nnoremap <C-_>s :cscope find s <C-R>=expand("<cword>")<CR><CR>
        nnoremap <C-_>g :cscope find g <C-R>=expand("<cword>")<CR><CR>
        nnoremap <C-_>c :cscope find c <C-R>=expand("<cword>")<CR><CR>
        nnoremap <C-_>t :cscope find t <C-R>=expand("<cword>")<CR><CR>
        nnoremap <C-_>e :cscope find e <C-R>=expand("<cword>")<CR><CR>
        nnoremap <C-_>f :cscope find f <C-R>=expand("<cfile>")<CR><CR>
        nnoremap <C-_>i :cscope find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nnoremap <C-_>d :cscope find d <C-R>=expand("<cword>")<CR><CR>
    endif
    " }}}

    " [ search ] {{{
        " [ regex ]
        " magic/nomagic: changes special chars that can be used in search patterns
        set magic
            " use \v and \V to switch char special meaning on or off.
            " \v: this will make every following character except a-zA-Z0-9 and
            " '_' have special meaning
            " \V: preceded by \ to activate their special meaning.
            " \m, \M

        " [ search ]
        set hlsearch incsearch " highlight all searching, incremental searching
        set wrapscan " wrapscan used for ]s and [s spelling mistake.
        " smartcase will override ignorecase when type with upper case characters
        set ignorecase smartcase

        " [ grep ]
        " internal(vimgrep) : use Vim search patterns, slower(read into memory)
        " external(grep) : used when the vim grep does not do what you want.
        set grepprg="grep -n $* /dev/null" " 'grep -n', 'grep -n $* /dev/null'

        " [ match ]
        set showmatch
        set matchpairs+=<:>
    " }}}

    " [ spell check ] {{{ C-X,C-N,C-P ]s [s zg zw zuw zug z= :help spell.txt
    set nospell
    set dictionary=/usr/share/dict/words " dictionary for spell.
    augroup ToggleSpell
        au!
        au FileType mail,tex,markdown,vimwiki,org,tpp setlocal spell
    augroup END
    set spelllang=en " en: all, en_gb: Great Britain.
    set spellsuggest=best " default and fast list.
    set spellfile=~/.vim/spell/en.utf-8.add " 'zg': add, 'zw': remove.
        " :mkspell command to generate a vim spell file from word lists.
    nnoremap <silent> <Leader>sc :set spell!<CR>
    " }}}

    " [ completion : omni ] {{{ AutoPop Tab Ctrl-Y Ctrl-E
    set mousemodel=extend
    set cmdheight=1                  " command line height
    "set complete=".,w,b,t,i,u,k"     " completion buffers
    "             | | | | | | |
    "             | | | | | | `-dict
    "             | | | | | `-unloaded buffers
    "             | | | | `-include files
    "             | | | `-tags
    "             | | `-other loaded buffers
    "             | `-windows buffers
    "             `-the current buffer
    set completeopt=menuone " menu,menuone,longest,preview

    " preview window
    set previewheight=15
    "set previewwindow " this popup menu is up towards.
        " NOTE this solved python neocomplcache popup menu disappear problem.

    " set file path completion.
    set path+=.,/usr/local/include,/usr/include,,
    set showcmd     " show (partial) command in the last line of screen.
    " ignore those files when completion.
    set wildignore+=*.swp,*~,*.o,*.obj,*.pyc,*.pyo
    " set wildignore+=*/.git/*,*/.hg/*,*/.svn/*  " Linux/MacOSX
    " set wildignore+=.git\*,.hg\*,.svn\*        " Windows
    set report=0 " always report changed lines
    " new-omni-completion ( internal ) Ctrl-X,Ctrl-*
    set pumheight=20 " set popup menu max items available. 0=long
    " set completefunc " actually find the matches.

        " [ omni ] {{{ complete things with "<C-X><C-O>"
        set omnifunc=syntaxcomplete#Complete " for other languages
        inoremap <C-space> <C-x><C-o>

            " SuperCleverTab() for omni-completion or insert <Tab> {{{
            function! SuperCleverTab()
                if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
                    return "\"
                else
                    if &omnifunc != ''
                        return "\\"
                    elseif &dictionary != ''
                        return "\"
                    else
                        return "\"
                    endif
                endif
            endfunction

            " inoremap <Tab> <C-R>=SuperCleverTab()<cr>
            " }}}
        " }}}
    " }}}

    " [ session ] {{{
    " set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize " for :mksession
    "au BufReadPost *
                "\if line("'\"") > 1 && line("'\"") <= line("$")
                "\| exe "normal! g`\""
                "\| endif
    "set viminfo='10,\"100,:20,%,n~/.viminfo " help :viminfo , notice permission is wrong on viminfo
    " }}}

    " [ bell ] {{{
    set errorbells         " error bells
    set visualbell         " visual bells
    " }}}

    " [ filetype ] {{{
    " ~/.vim/ftplugin/ " source first, then load system files.
    " ~/.vim/after/ftplugin/ " source later, after load system files.
    filetype plugin indent on " combine three into one.
    " }}}

    " [ encrypt ] {{{
    " :X to encrypt.
    " :set key=  to reset the 'key' option to an empty value.
    set cryptmethod=blowfish " zip, blowfish.
    " }}}

    " [ maps ] {{{
    set timeout
    set timeoutlen=2500 " 2.5 seconds
    set ttimeout
    set ttimeoutlen=-1
    " }}}

    " [ match pairs ] {{{
    set matchpairs=(:),{:},[:]
    set matchtime=5
    " }}}
" }}}

" [[ Gvim ]] {{{
" :help gui.txt :help gui_x11.txt
    " $MYGVIMRC
if has('gui') && has('gui_running')
    " [ looks ] {{{
    set guioptions+=a " autoselect for pasting
    set guioptions+=c " use vim's console dialogs.
    set guioptions+=i " use a Vim icon.
    set guioptions+=m " m - Display a menu bar.
    set guioptions+=g " maek menu items not active grey.
    set guioptions+=T " T - Display a toolbar.
    set guioptions-=r " r - Always display the right-hand scrollbar.
    set guioptions-=R " R - Display the right-hand scrollbar if the window is split vertically.
    set guioptions-=l " l - Always display left-hand scrollbar.
    set guioptions-=L " L - Display the left-hand scrollbar if the window is split vertically.
    set guioptions-=b " b - Display the horizontal scrollbar.
    set guioptions+=F " F - Footer
    set toolbar=icons,tooltips
    set toolbariconsize=small
        " use command :set guifont=*  to select font, then use :set guifont?
    set guifont=Monaco:h9:cANSI
    set lines=100 columns=165
    set antialias

    set t_Co=256
    colorscheme molokai

    "winsize 110 40 " width & height

    " set guicursor=
    " }}}

    "function! GVimEnter()
        "set guifont=Monaco\ 9
        "set lines=90 columns=160
    "endfunction
    "augroup GUI_Enter
        "autocmd GUIEnter * call GVimEnter()
    "augroup end

endif
" }}}

" [[ looks ]] {{{

    " [ basic looks ] {{{
    set linespace=1 " 1 for Win32 GUI, space for underline.
    set lazyredraw
    " }}}

    " [ scroll ] {{{
    set sidescroll=1
    set scrolloff=999  " N: lines up and down of cursor, 999: cursor always in middle.
        " let cursor line in middle will make popup menu have enough space to display.
    " }}}

    " [ listchars ] {{{
        " use `:digraphs` command in vim to display.
        " vert: \|, \┆, \│, \ ,
        " fold: ┄, -,
        " diff: -, ×,
        " stl: \ ,
        " stlnc: \ ,
        " tab: \┆\ , >-, \␣, \⋮\ ,
        " tail: \·,
        " extends: \«, ◂,
        " precedes: \», ▸,
        " nbsp: \✖,
        " conceal: ≠,
        " eol: ↵, ¶
        " showbreak: "↪ ", "> ", "+++ ",
        " ------------------------------------------
    set fillchars=vert:│,fold:┄,diff:×
    set list
    set listchars=tab:\ \ , " use whitespace to hide tab.
                \trail:\·, " trailing line whitespaces
                \extends:\◂,
                \precedes:\▸,
                \nbsp:\✖, " non-breakable space.
                \conceal:≠ " conceal symbol.
    nnoremap <silent> <Leader>lc :set nolist!<CR>
    set showbreak="↪ " " string at start of lines that have been wrapped.

    " use listchars tab to show tab vertical line.
    " TODO use this for other language except Python.
    fun! TabIndentLineToggle(toggle_vertline)
        if (a:toggle_vertline == 1)
            let g:TabIndentLine = 1
            hi SpecialKey      ctermfg=237 ctermbg=NONE cterm=none
            set noexpandtab
            set listchars=tab:\┆\ ,eol:¶
            :IndentGuidesDisable
        " elseif (a:toggle_vertline == 0)
        else
            let g:TabIndentLine = 0
            set expandtab
            set listchars=tab:\ \ ,
            :IndentGuidesEnable
        endif
    endf

    " autocmd FileType *      call TabIndentLineToggle(1)
    " autocmd FileType python call TabIndentLineToggle(0)
        " chars to fill the statusline and vertical separators.
    " }}}

    " [ linenumber ] {{{
    set number         " show number
    " set relativenumber " show relative number
    set numberwidth=2 " minimal number of columns for line number.
    " }}}

    " [ colorscheme ] {{{
    " if $COLORTERM == 'gnome-terminal'
    if $TERM ==? "rxvt-unicode-256color"
        set t_Co=256
        colorscheme molokai
        " colorscheme molokai_transparent " for transparent urxvt.
    elseif $TERM ==? "xterm-256color"
        set t_Co=256
        colorscheme molokai
    elseif $TERM ==? "screen-256color"
        set t_Co=256
        colorscheme molokai
    else
        colorscheme wombat256mod
    endif
    " }}}

    " [ cursor ] {{{ :help terminal-options
    " color from /etc/x11/rgb.txt
    " [ cursor color ]
    " if &term =~ "rxvt-unicode-256color\\|rxvt-unicode"
    "     "if &term == 'rxvt-256color'
    "     "" urxvt
    "     "let &t_SI = ']12;#89b6e2'
    "     "let &t_EI = ']12;#dd4010'
    "     set ttyfast
    "     let &t_EI = "\<Esc>]12;RoyalBlue1\x9c"
    "     let &t_SI = "\<Esc>]12;IndianRed1\x9c"
    "     silent !echo -e "\e]12;orange\x9c"
    " "elseif $TMUX != ''
    "     "" tmux
    "     "let &t_SI = 'Ptmux;]12;#89b6e2\'
    "     "let &t_EI = 'Ptmux;]12;#dd4010\'
    " elseif &term =~ "screen-256color"
    "     " screen
    "     :silent !echo -ne "\eP\e]12;IndianRed2\007\e\\"
    "     let &t_SI = "\eP\e]12;RoyalBlue1\007\e\\"
    "     let &t_EI = "\eP\e]12;IndianRed2\007\e\\"
    "     autocmd VimLeave * :!echo -ne "\eP\e]12;green\007\e\\"
    " elseif &term =~ "xterm"
    "     " xterm
    "     :silent !echo -ne "\e]12;IndianRed2\007"
    "     let &t_SI = "\e]12;RoyalBlue1\007"
    "     let &t_EI = "\e]12;IndianRed2\007"
    "     autocmd VimLeave * :!echo -ne "\e]12;green\007"
    " elseif &term =~ "xterm\\|rxvt"
    "     let &t_SI = "\<Esc>]12;orange\x7"
    "     let &t_EI = "\<Esc>]12;red\x7"
    "     silent !echo -ne "\033]12;red\007"
    "     " reset cursor when vim exits
    "     autocmd VimLeave * silent !echo -ne "\033]112\007"
    "     " use \003]12;gray\007 for gnome-terminal
    " endif

    " [ cursor shape ]
    " = '\<Esc>[1 q'
    " 1/0: blinking block, 2: solid block, 3: blinking underscore, 4: solid underscore
    " if &term =~ 'rxvt-unicode-256color\\|rxvt-unicode'
    "     let &t_SI = "\<Esc>[1 q"
    "     let &t_EI = "\<Esc>[3 q"
    " elseif &term =~ '^xterm'
    "     let &t_SI .= "\<Esc>[4 q"
    "     let &t_EI .= "\<Esc>[2 q"
    "     " =~ "^xterm"
    "     " let &t_SI = "\<Esc>]12;purple\x7"
    "     " let &t_EI = "\<Esc>]12;blue\x7"
    " else
    "     let &t_SI = "\<Esc>]50;CursorShape=2\x7"
    "     let &t_EI = "\<Esc>]50;CursorShape=4\x7"
    " endif
    " }}}

    " [ current line ] {{{
    set cursorline
    " plugin: ~/.vim/plugin/CursorLineCurrentWindow.vim
    " }}}

    " [ syntax & highlight ] {{{
    syntax enable   " enable syntax highlighting
    syntax on       " follows colorscheme to highlight.
    " }}}

    " [ indent ] {{{
    " help indent.txt
    set smartindent  " autoindent, smartindent, cindent, indentexpr.
  " set whichwrap=b,s,h,l,<,>,~,[,] " everything wraps
    "             | | | | | | | | |
    "             | | | | | | | | +-- "]" Insert and Replace
    "             | | | | | | | +-- "[" Insert and Replace
    "             | | | | | | +-- "~" Normal
    "             | | | | | +-- <Right> Normal and Visual
    "             | | | | +-- <Left> Normal and Visual
    "             | | | +-- "l" Normal and Visual (not recommended)
    "             | | +-- "h" Normal and Visual (not recommended)
    "             | +-- <Space> Normal and Visual
    "             +-- <BS> Normal and Visual
    " }}}

    " [ tab ] {{{
    set expandtab " expandtab: use spaces to insert a <Tab>.
    set smarttab " <Tab> insert shiftwidth at beginning of a line.
    set shiftwidth=4 " number of spaces to use for each step of (auto)indent.
    set tabstop=4 " number of spaces that a <Tab> counts for.
    set softtabstop=4 " number of spaces that a <Tab> counts for
    " }}}

    " [ format ] {{{
    set formatprg=par " external program used to format with gq operator

    " formatoptions: how automatic formatting is to be done.
    set formatoptions+=t " auto-wrap text using textwidth
    set formatoptions+=c " auto-wrap comments using textwidth
    set formatoptions+=r " auto insert current comment leader after <Enter> in Insert
    set formatoptions+=o " auto insert current comment leader after <o/O> in Normal
    set formatoptions+=q " allow formatting of comments with "gq"
    set formatoptions-=w " trail white space indicates paragraph continues next line
    set formatoptions-=a " auto reformat of paragraphs when inserted or deleted
    set formatoptions+=n " when formatting, recognize numbered lists
    set formatoptions+=m " also break at a multi-byte character above 255
    set formatoptions+=2 " when formatting, use second line's indent
    " }}}

    " [ comment ] {{{
    " set comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
    set commentstring=#%s " #%s, /*%s*/
    " }}}

    " [ wrap ] {{{
    set wrap        " wrap long length text
    set textwidth=80 " =0:unlimited, =80.
    " }}}

    " [ conceal ] {{{
    if has('conceal')
        set conceallevel=2 " 0:, 1:, 2:completely hidden, 3
        set concealcursor=nc " n: normal v: visual i: insert c: command line editing
    endif
    " }}}

    " [ balloon ] {{{
    if has('balloon_eval')
        set ballooneval
        set balloondelay=600

        function! MyBalloonExpr()
            return 'Cursor is at line ' . v:beval_lnum .
                        \', column ' . v:beval_col .
                        \ ' of file ' .  bufname(v:beval_bufnr) .
                        \ ' on word "' . v:beval_text . '"'
        endfunction
        set bexpr=MyBalloonExpr()
    endif
    " }}}

    " [ title ] {{{
    " set title                       " dynamic title
    if $TERM == "screen-256color"
        set notitle " for tmux session can set window name.
    else
        set title
    endif
    set titleold="Shape ideas into code with Vim"
    set titlestring="Shape ideas into code with Vim"
    " set titlelen=95
    " }}}

    " [ statusline ] {{{
    set laststatus=2 " Always show the statusline
        " %-0{minwid}.{maxwid}{item}
        " %!expression to evaluate the expression.
        " %{} items will be evaluated too.
        " Require: fugitive, current-func-info, syntastic,
        " - fugitive
        "   - %{fugitive#statusline()}
        "   - %{fugitive#head(7)}
        " - current-func-info
        "   - %{cfi#get_func_name()}
        " - syntastic
        "   - %{SyntasticStatuslineFlag()}
    function! SetStatusline()
        set statusline=
        set statusline+=\%#StatusSeparator#\|\%#StatusBufferNumber#\b
                    \\:%n\%#StatusSeparator#\|
        set statusline+=\%#StatusReadOnly#\ \%r\ \%#StatusList#\%q
        set statusline+=\ \%#StatusFugitive#\%{fugitive#statusline()}
        set statusline+=\ \%#StatusChar#\»
        set statusline+=\ \%#StatusModFlag#\%{&modified?'✖':''}
                    \\%#StatusModFlag2#\%{&modified?'':'✔'}
        set statusline+=\ \%#StatusProgramInfo#\%{SyntasticStatuslineFlag()}
        set statusline+=\ \%#StatusProgramInfo#\%{cfi#get_func_name()}
        " set statusline+=\ \%#StatusProgramInfo#\%{tagbar#currenttag("%s", '')}
        " set statusline+=\ \%#StatusProgramInfo#\%{tagbar#currenttag("%s", "", "f")}
        set statusline+=\ \%#StatusHELP#\%H
        set statusline+=\ %=\%#StatusSeparator#\|\%#StatusStop#
        set statusline+=\ \%#StatusFilePath#\%<%t
        set statusline+=\ \%#StatusSeparator#\|\%#StatusStop#
        set statusline+=\ \%#StatusFileType#\%{neocomplcache#get_context_filetype()}
        " set statusline+=\ \%#StatusFileType#\%y
        set statusline+=\ %<%(\%#StatusNormal#\%{&ff}\%#StatusChar#\•
                    \\%#StatusNormal#\%{&fenc}%)
        set statusline+=\ \%#StatusSeparator#\|\%#StatusStop#
        set statusline+=\ \%#StatusLineNumber#\%-(L:%l/%L\ C:%c%V%)
                    \\ \%#StatusPercent#\%P
        set statusline+=\ \%{virtualenv#statusline()}
    endfunction

    " if Powerline is not available, use my custom statusline settings.
    if !exists('g:Powerline_loaded')
        call SetStatusline()
    endif

    " a good tip for different format statusline for non-current.
    " let g:Active_statusline=&g:statusline
    " let g:NCstatusline=substitute(
    "             \                substitute(g:Active_statusline,
    "             \                'User1', 'User3', 'g'),
    "             \                'User2', 'User4', 'g')
    " au WinEnter * let&l:statusline = g:Active_statusline
    " au WinLeave * let&l:statusline = g:NCstatusline

    " function! StatusLineSet()
    "     if &l:modified
    "         setlocal statusline=✖
    "     else
    "         setlocal statusline=✔
    "     endif
    " endfunction
    " set statusline=%!StatusLineSet()

    set shortmess="lnrxtToO"  " short on status line message : default is "filnxtToO"
    set cmdheight=1        " cmd line height
    set ruler              " show the cursor position all the time in status line.
    set showmode           " show insert, visual, replace mode on last line.
    " }}}

    " [ digraph ] {{{
    " entering of graphs
    "   - :digraphs -> show up currently defined digraphs.
    "   - in command line mode with {char1} <BS> {char2}
    "       (without space, those press are continuously)
    "   - in command line mode with CTRL-K {char1} {char2} -- when digraph option is set.
    "   - in command line mode, :digraphs {char1}{char2} {number}...
    " set digraph
    " }}}

    " [ folding ] {{{3
    set foldenable          " enable fold
    set foldmethod=manual   " indent, syntax, manual, expr, diff, marker
    set foldnestmax=3       " maximum nesting of fold
    set foldlevel=2         " fold start from which level
    set foldlevelstart=0    " which level start fold. 0: all folds closed.
    set foldmarker={{{,}}}      " fold marker
    set foldminlines=3      " fold minlines
    set foldcolumn=0        " colums ahead of line number.
    set foldopen=block,hor,mark,percent,quickfix,search,tag,undo " open fold when ?

        "set foldtext=VimrcFoldText() " {{{
        "function! VimrcFoldText()
            "let line = foldtext()
            "let foldSize = 1 + v:foldend - v:foldstart
            "let lineCount = line("$")
            "let foldPercentage = printf("%4.1f", (foldSize*1.0)/lineCount*100)
            "" Show fold Percentage along with # of lines
            "return substitute(line, '^\([-+]\+\)\(\s\+\)\(\d\+\) lines', '\1 '.foldPercentage.'%\2(\3 lines)', 'g')
        "endfunction " }}}

        function! VimFoldText() " {{{4
            " get first non-blank line
            let fs = v:foldstart
            while getline(fs) =~ '^\s*$'
                let fs = nextnonblank(fs + 1)
            endwhile
            if fs > v:foldend
                let line = getline(v:foldstart)
            else
                let line = getline(fs)
            endif
            let line = substitute(line, '/\*\|\*/\|{'.'{{\d\=', '', 'g')." "
            let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
            let foldSize = 1 + v:foldend - v:foldstart
            let foldSizeStr = " " . foldSize . " lines "
            let foldLevelStr = repeat("+--", v:foldlevel)
            let lineCount = line("$")
            let foldPercentage = "[" . printf("%4.1f", (foldSize*1.0)/lineCount*100) . "%] "
            let expansionString = repeat("┄", w - strlen(foldSizeStr) - strlen(line) - strlen(foldLevelStr) - strlen(foldPercentage))
                " repeat"┄", repeat" ",
            return line . expansionString . foldSizeStr . foldLevelStr . foldPercentage
        endfunction
        set foldtext=VimFoldText()
        " }}}
    " }}}
    " }}}
" }}}

" [[ mappings ]] {{{

    " F1~12 {{{
    fun ShowFuncKeys(bang)
        for i in range(1,12)
            redir! => map
            exe "silent ".(a:bang == "!" ? 'verbose' : '') . " map<F".i.">"
            redir end
            if map !~ 'No mapping found'
                echomsg map
            endif
        endfor
    endf
    com! -bang ShowFuncKeys :call ShowFuncKeys(<q-bang>)
    ":ShowFuncKeys
    " }}}

    " windows navigation
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l
    " resize window continuously [ <C-w>(-,+,<,>), Mouse ]
     nmap         <C-W>+     <C-W>+<SID>winsize
     nmap         <C-W>-     <C-W>-<SID>winsize
     nmap         <C-W><     <C-W><<SID>winsize
     nmap         <C-W>>     <C-W>><SID>winsize
     nnoremap <script>  <SID>winsize+   <C-W>+<SID>winsize
     nnoremap <script>  <SID>winsize-   <C-W>-<SID>winsize
     nnoremap <script>  <SID>winsize<   <C-W><<SID>winsize
     nnoremap <script>  <SID>winsize>   <C-W>><SID>winsize
     nmap         <SID>winsize      <Nop>

    " toggle fold
    nnoremap <SPACE> za
    " nnoremap <silent> <space> :exe 'silent! normal! '.((foldclosed('.')>0)? 'zMzx' : 'zc')<cr>

    " quickfix/location list, window manipulate
    nnoremap <Leader>qo :cindow<CR>
    nnoremap <Leader>qc :cclose<CR>
    nnoremap <Leader>lo :lwindow<CR>
    nnoremap <Leader>lc :lclose<CR>

        " NOTICE use nonrecursive mapping.
        " Each of the *map commands has a *noremap counterpart that ignores other mappings
        " nnoremap, vnoremap, and inoremap. onoremap(operator).
        " mapping a sequence of multiple keys. like: nnoremap jk dd
        " buffer-local options and mapping. like: inoremap <buffer> <Leader>d dd
        " Operator-Pending mapping, like dw (d: Operator, w: movement),
    " [ key prefix -> Leader ] {{{
    let mapleader = '\'
    "let g:mapleader=","
    " <LocalLeader> is to be used for mappings which are local to a buffer. (filetypes)
    let maplocalleader = '\'
    " }}}
        " speed up pressing
        " inoremap jk <esc>
        " inoremap <esc> <nop> " (no operation)

    " [ ins-completion ] {{{ CTRL-E: stop, CTRL-Y: accept.
    " i_CTRL-X_CTRL-L               -- whole lines
    " i_CTRL-X_CTRL-N               -- keywords in current file
    " i_CTRL-X_CTRL-K               -- keywords in dictionary
    " i_CTRL-X_CTRL-T               -- keywords in thesaurus, thesaurus-style
    " i_CTRL-X_CTRL-I               -- keywords in the current and included files
    " i_CTRL-X_CTRL-]               -- tags
    " i_CTRL-X_CTRL-F               -- file names
    " i_CTRL-X_CTRL-D               -- definitions or macros
    " i_CTRL-X_CTRL-V               -- vim command-line
    " i_CTRL-X_CTRL-U               -- user defined completion
    " i_CTRL-X_CTRL-O               -- omni completion
    " i_CTRL-X_s                    -- spelling suggestions
    " i_CTRL-N                      -- keyword in 'complete'
    " }}}
" }}}

" [[ functions ]] {{{
" Vimscript functions must start with a capital letter if they are unscoped!
" you can call function with ":source file.vim" then ":call"

    " [ execute mode ] {{{
    "function! ScriptExecute()
        ":!chmod u+x %
        ":w
    "endfunction
    "autocmd BufWritePost *.sh :call ScriptExecute()
    "autocmd BufWritePost *.pl :call ScriptExecute()
    " }}}

    " [ skeleton/template ] {{{
    "autocmd BufNewFile *.sh 0r ~/.vim/skeletons/skeleton.sh
    "autocmd BufNewFile *.py 0r ~/.vim/skeletons/skeleton.py
    " }}}

    " {{{ Visual OR :10,50TOhtml :TOhtml
    " FIXME do not support script: indent-guides.vim
    " convert code to HTML used for website or paste
    " let g:html_no_progress = 1 " disable progress.
    let g:html_number_lines = 1 " 1: enable linenumber, 0: no linenumber. (default: unlet g:html_number_lines)
    let g:html_use_css = 1 " generate CSS file.
    let g:html_ignore_folding = 0 " does not ignore fold.
    let g:html_dynamic_folds = 1 " mouse over will expand fold on html
    let g:html_no_foldcolumn = 0 " show foldcolumn too for dynamic_folds.
    let g:html_hover_unfold = 1 " unfold when mouse hover.
    " let g:html_no_pre = 1 " do not use <pre>
    let g:html_expand_tabs = 1
    " let g:html_diff_one_file = 1 " disable diff when in diff mode.
    " let g:html_whole_filler = 1
    let g:html_use_encoding = "UTF-8"
    " let g:html_use_xhtml = 1 " use XHTML instead of HTML.
    " script
    " for f in *.[ch]; do gvim -f +"syn on" +"run! syntax/2html.vim" +"wq" +"q" $f; done

    " command :MyToHtml
    " Now you can select a range of lines, type :MyToHtml and use the result to post your code
    " to an HTML-enabled web forum.
    function! MyToHtml(line1, line2)
      " make sure to generate in the correct format
      let old_css = 1
      if exists('g:html_use_css')
        let old_css = g:html_use_css
      endif
      let g:html_use_css = 0
      " generate and delete unneeded lines
      exec a:line1.','.a:line2.'TOhtml'
      %g/<body/normal k$dgg
      " convert body to a table
      %s/<body\s*\(bgcolor="[^"]*"\)\s*text=\("[^"]*"\)\s*>/<table \1 cellPadding=0><tr><td><font color=\2>/
      %s#</body>\(.\|\n\)*</html>#\='</font></td></tr></table>'#i
      " restore old setting
      let g:html_use_css = old_css
    endfunction
    command! -range=% MyToHtml :call MyToHtml(<line1>,<line2>)
    " }}}

    " [ matchit ] {{{
        " '%' to match more than just single characters.
        " %, g%, [%, ]%, a%,
        runtime macros/matchit.vim " load system matchit.vim plugin
    " }}}

    " [ convert file into unix & utf-8 ] {{{
    fun ConvertFile2UnixUTF8()
        if &fileformat != 'unix' || &fileencoding != 'utf-8'
            echoerr 'your file format and encoding is not unix and utf-8'
            echohl WarningMsg
            let g:ConvertFileFormatEncodePrompt = input("convert to unix ? (y or n) ")
            set fileformat=unix
            set fileencoding=utf-8
        endif
    endf
    " }}}

" }}}

" [[ Misc ]] {{{

    " [ abbreviations ] {{{
    " Abbreviations are used in Insert, Replace and Command-line mode.
    " three types of abbreviations: full-id, end-id, non-id.
    " show current buffer all abbreviates with command: ':verbose abbreviate'.
    source ~/.vim/misc/abbreviations.vim
    " }}}

    " [ large file ]

    " for Awesome Mod4-d sdcv ( OR replace viw with "vaw" )

    " for binary files (such as exe, bin, etc)
        " vim -b : edit binary using xxd-format!
        "augroup Binary
          "au!
          "au BufReadPre  *.bin let &bin=1
          "au BufReadPost *.bin if &bin | %!xxd
          "au BufReadPost *.bin set ft=xxd | endif
          "au BufWritePre *.bin if &bin | %!xxd -r
          "au BufWritePre *.bin endif
          "au BufWritePost *.bin if &bin | %!xxd
          "au BufWritePost *.bin set nomod | endif
        "augroup END


" }}}

" ----------------------------------------------------------------

" [[ addons manager: VAM, vundle, pathogen ]] {{{
    " [ pathogen ] {{{ .vim/bundle/
        "" .vim/autoload/pathogen.vim || .vim/bundle/* || :Helptags ||
        "call pathogen#infect()
        "syntax on
        "filetype plugin indent on
    " }}}

    " [ vundle ] {{{ .vim/bundle/
        " Usage:
        " after update, press 'u' to see git repo changlog, (commits)

        " simple way
        " set runtimepath+=~/.vim/bundle/vundle/
        " call vundle#rc()
        " " let Vundle manage Vundle
        " Bundle 'gmarik/vundle'

        " [ advanced way ]
        " filetype off " required !
        " let root = '~/.vim/bundle'
        " let src = 'http://github.com/gmarik/vundle.git'
        " if !isdirectory(expand(root).'/vundle')
        "     exec '!git clone '.src.' '.root.'/vundle'
        " endif
        " exec 'set rtp+='.root.'/vundle'
        " call vundle#rc()

        " let vundle manage vundle
        " Bundle 'gmarik/vundle'

        " [ bundle list ] {{{
            " Bundle 'fugitive.vim'
        " }}}
    " }}}

    " [ VAM : vim addon manager ] {{{ .vim/addons/
        " [ minimal setup ]
            " set runtimepath+=PATH/TO/VAM
            " call vam#ActivateAddons([list of plugins], {'auto_install' : 0})

        " [ complex setup ] {{{
        function! EnsureVamIsOnDisk(vam_install_path) " {{{
            let is_installed_c = "isdirectory(a:vam_install_path.'/vim-addon-manager/autoload')"
            if eval(is_installed_c)
                return 1
            elseif confirm("Clone VAM into ".a:vam_install_path."?","&Y\n&N") == 1
                call mkdir(a:vam_install_path, 'p')
                execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(a:vam_install_path, 1).'/vim-addon-manager'
                exec 'helptags '.fnameescape(a:vam_install_path.'/vim-addon-manager/doc')
                return eval(is_installed_c)
            endif
        endfunction " }}}

        function! SetupVAM() " {{{ options, custom. addons.
            " [ options ] {{{
            let g:vim_addon_manager = {
                        \ 'shell_commands_run_method': 'system',
                        \ 'known_repos_activation_policy': 'autoload',
                        \ 'auto_install': 1,
                        \ 'do_diff': 1,
                        \ 'log_to_buf': 0,
                        \ 'log_buffer_name': '/tmp/vam_install.log',
                        \ 'debug_activation': 0,
                        \ 'addon_completion_lhs': 0,
                        \ }
            " }}}

            " [ custom ] {{{
            " let g:vim_addon_manager.post_install_hook_functions
            let g:vim_addon_manager.pre_update_hook_functions = [
                        \ "vam#install#CreatePatch",
                        \ ]
            let g:vim_addon_manager.post_update_hook_functions = [
                        \ "vam#install#ApplyPatch",
                        \ "VAMShowUpdates",
                        \ ]
            let g:vim_addon_manager.post_scms_update_hook_functions = [
                        \ "vam#install#ShowShortLog",
                        \ ]
            " vam#install#ShowShortLog -> show Git commit updates.
            " }}}

            " VAM install location {{{
            let vam_install_path = expand('$HOME') . '/.vim/addons'
            if !EnsureVamIsOnDisk(vam_install_path)
                echohl ErrorMsg ; echomsg "No VAM found!" ; echohl NONE
                return
            endif
            exec 'set runtimepath+=' . vam_install_path . '/vim-addon-manager'
            " }}}

            " Addon List: {{{ <C-X><C-P> to complete plugin names/identifiers
            " call vam#ActivateAddons({addons}[, {opts}])
                " vim plugin manager
            "call vam#ActivateAddons(['tplugin'])
                " VimL libraries
            call vam#ActivateAddons(['L9'])
            call vam#ActivateAddons(['tlib'])
            call vam#ActivateAddons(['self'])
            call vam#ActivateAddons(['WebAPI'])
                " VimLint: a correctness and sanity checker of Vim configuration
            call vam#ActivateAddons(['VimLint'])
                " statusline
            call vam#ActivateAddons(['Powerline'])
            call vam#ActivateAddons(['current-func-info'])
                " CVS
            call vam#ActivateAddons(['fugitive'])
            call vam#ActivateAddons(['gitv'])
            " call vam#ActivateAddons(['extradite'])
            call vam#ActivateAddons(['quickfixsigns'])
            call vam#ActivateAddons(['Splice'])
            call vam#ActivateAddons(['ConflictMotions'])
            call vam#ActivateAddons(['ConflictDetection'])
                " Github
            call vam#ActivateAddons(['vim-github'])
            call vam#ActivateAddons(['github:tpope/vim-rhubarb'])
                " CSV & CVS
            " call vam#ActivateAddons(['csv'])
            " call vam#ActivateAddons(['cvsmenu'])
                " diff
            call vam#ActivateAddons(['gf-diff'])
            call vam#ActivateAddons(['gf-user'])
            call vam#ActivateAddons(['patchreview'])
                " quickfix/location list.
            call vam#ActivateAddons(['unimpaired'])
            call vam#ActivateAddons(['quickfixstatus'])
            " call vam#ActivateAddons(['sharefix'])
            " call vam#ActivateAddons(['unite-quickfix'])
            call vam#ActivateAddons(['github:osyo-manga/unite-quickfix'])
                " Completion <Tab>
            call vam#ActivateAddons(['neocomplcache', 'vimproc'])
            call vam#ActivateAddons(['neco-look'])
            " call vam#ActivateAddons(['AutoComplPop'])
            " call vam#ActivateAddons(['github:ervandew/supertab'])
            " call vam#ActivateAddons(['github:mbbill/code_complete'])
                " snippet
            call vam#ActivateAddons(['UltiSnips'])
            " call vam#ActivateAddons(['neocomplcache-snippets_complete'])
            "call vam#ActivateAddons(['snipmate'])
            "call vam#ActivateAddons(['SnippetComplete'])
                " skeleton / template
            " call vam#ActivateAddons(['SonicTemplate'])
                " Tags : taglist-plus,
            call vam#ActivateAddons(['Tagbar'])
            call vam#ActivateAddons(['tagbar-phpctags'])
            "call vam#ActivateAddons(['taglist'])
            call vam#ActivateAddons(['TagHighlight'])
            if has('gui') && has('gui_running')
                call vam#ActivateAddons(['Tag_Signature_Balloons'])
            endif
            call vam#ActivateAddons(['AutoTag'])
            " call vam#ActivateAddons(['taggatron'])
                " cscope
            " call vam#ActivateAddons(['cscope'])
            " call vam#ActivateAddons(['CCTree'])
                " call vam#ActivateAddons(['github:brookhong/cscope.vim'])
                " buffers
            " call vam#ActivateAddons(['Tagma_Buffer_Manager'])
            " call vam#ActivateAddons(['minibufexplorer'])
            "call vam#ActivateAddons(['github:fholgado/minibufexpl.vim'])
            "call vam#ActivateAddons(['LustyJuggler'])
                " tab manager
            "call vam#ActivateAddons(['github:kien/tabman.vim.git'])
                " file/buffer/project manager|explorer
            call vam#ActivateAddons(['The_NERD_tree'])
            " call vam#ActivateAddons(['github:t9md/vim-nerdtree_plugin_collections'])
            call vam#ActivateAddons(['vimfiler'])
                " compile
            call vam#ActivateAddons(['SingleCompile'])
                " syntax checker
            call vam#ActivateAddons(['Syntastic'])
            " call vam#ActivateAddons(['checksyntax'])
            " call vam#ActivateAddons(['flymake'])
                " Debugger
            " call vam#ActivateAddons(['GdbFromVim'])
            " call vam#ActivateAddons(['gdbmgr'])
            " call vam#ActivateAddons(['Vdebug'])
            " call vam#ActivateAddons(['VimDebug'])
                " task list
            call vam#ActivateAddons(['TagmaTasks'])
            " call vam#ActivateAddons(['TaskList'])
                " search & find
            call vam#ActivateAddons(['unite'])
            " call vam#ActivateAddons(['unite-ssh'])
            call vam#ActivateAddons(['ctrlp'])
            "call vam#ActivateAddons(['Command-T'])
            "call vam#ActivateAddons(['FuzzyFinder'])
            call vam#ActivateAddons(['unite-ack'])
            call vam#ActivateAddons(['EasyGrep'])
            call vam#ActivateAddons(['ack'])
            call vam#ActivateAddons(['buffers_search_and_replace'])
            " call vam#ActivateAddons(['SearchParty'])
            call vam#ActivateAddons(['Area_search'])
                " comment
            call vam#ActivateAddons(['commentary'])
            "call vam#ActivateAddons(['tComment'])
            "call vam#ActivateAddons(['The_NERD_Commenter'])
                " doc & help "K"
            call vam#ActivateAddons(['viewdoc'])
            "call vam#ActivateAddons(['Manuals'])
                " indent guides & indent & align & splijoin
            call vam#ActivateAddons(['Indent_Guides'])
            "call vam#ActivateAddons(['matchindent'])
            "call vam#ActivateAddons(['splitjoin'])
            " call vam#ActivateAddons(['Align%294'])
                " REPL
            call vam#ActivateAddons(['vim-pipe'])
                " session & undo & history
            call vam#ActivateAddons(['restore_view'])
            call vam#ActivateAddons(['recover'])
            " call vam#ActivateAddons(['github:tungd/unite-session'])
            call vam#ActivateAddons(['Gundo'])
                " other small functions
            " call vam#ActivateAddons(['TagmaLast'])
            call vam#ActivateAddons(['endwise'])
            " call vam#ActivateAddons(['SwapIt'])
            call vam#ActivateAddons(['switch'])
            call vam#ActivateAddons(['Rainbow_Parentheses_Improved'])
                " Author info & License
            "call vam#ActivateAddons(['AuthorInfo'])
            "call vam#ActivateAddons(['license_loader'])
                " Vim script
            " call vam#ActivateAddons(['Vim-Support'])
            " call vam#ActivateAddons(['vesting'])
            call vam#ActivateAddons(['runVimTests'])
                " Python
            " call vam#ActivateAddons(['Python-mode-klen'])
            " call vam#ActivateAddons(['SimpylFold'])
            " call vam#ActivateAddons(['github:jbking/vim-pep8'])
            " call vam#ActivateAddons(['flake8'])
            " call vam#ActivateAddons(['github:kevinw/pyflakes-vim'])
            call vam#ActivateAddons(['virtualenv'])
            " call vam#ActivateAddons(['vim-python-virtualenv'])
            call vam#ActivateAddons(['python_match'])
            " call vam#ActivateAddons(['python_open_module'])
            "call vam#ActivateAddons(['PyREPL'])
            call vam#ActivateAddons(['selfdot'])
                " Django
            " call vam#ActivateAddons(['vim-htmldjango_omnicomplete'])
            " call vam#ActivateAddons(['vim-django-support'])
            " call vam#ActivateAddons(['vim-django'])
                " Shell: Bash, Zsh
            "call vam#ActivateAddons(['bash-support'])
                " Web: HTML/CSS/XML etc
            call vam#ActivateAddons(['ZenCoding'])
            " call vam#ActivateAddons(['sparkup'])
            call vam#ActivateAddons(['MatchTag'])
            call vam#ActivateAddons(['HTML_AutoCloseTag'])
            call vam#ActivateAddons(['html5'])
            call vam#ActivateAddons(['HTML5_Syntax_File'])
            call vam#ActivateAddons(['Better_CSS_Syntax_for_Vim'])
            " call vam#ActivateAddons(['css3_mod'])
            " call vam#ActivateAddons(['vim_less'])
            " call vam#ActivateAddons(['vim-less'])
                " JavaScript
            call vam#ActivateAddons(['github:teramako/jscomplete-vim'])
            " call vam#ActivateAddons(['jsflakes%4057'])
            " call vam#ActivateAddons(['jsruntime'])
            " call vam#ActivateAddons(['jsoncodecs'])
            "call vam#ActivateAddons(['jsbeautify'])
            "call vam#ActivateAddons(['sourcebeautify'])
            "call vam#ActivateAddons(['javaScriptLint'])
            "call vam#ActivateAddons(['jshint'])
            "call vam#ActivateAddons(['jslint'])
            "call vam#ActivateAddons(['jQuery'])
                " Dart
            call vam#ActivateAddons(['Dart'])
                " DBMS & SQL & NoSQL
            " call vam#ActivateAddons(['dbext'])
            " call vam#ActivateAddons(['VDBI'])
            " call vam#ActivateAddons(['SQLUtilities'])
                " Web App
            " call vam#ActivateAddons(['vim-brunch'])
                " PHP
            " call vam#ActivateAddons(['DBGPavim'])
            " call vam#ActivateAddons(['Xdebug'])
            " call vam#ActivateAddons(['vim-addon-xdebug'])
            " call vam#ActivateAddons(['phpqa'])
            " call vam#ActivateAddons(['PHPUnit_QF'])
            call vam#ActivateAddons(['PIV'])
            call vam#ActivateAddons(['phpcomplete'])
            " call vam#ActivateAddons(['pdv-standalone'])
            " call vam#ActivateAddons(['Drupal'])
            " call vam#ActivateAddons(['cakephp'])
            " call vam#ActivateAddons(['cake'])
            " call vam#ActivateAddons(['behat.zip'])
                " Ruby & Rails
            call vam#ActivateAddons(['vim-ruby'])
            " call vam#ActivateAddons(['neco-rubymf'])
            call vam#ActivateAddons(['neco-rake'])
            " call vam#ActivateAddons(['rails'])
            " call vam#ActivateAddons(['vroom'])
            " call vam#ActivateAddons(['RbREPL'])
                " Lisp
            call vam#ActivateAddons(['slimv'])
            call vam#ActivateAddons(['Lisper'])
            call vam#ActivateAddons(['paredit'])
                " Scheme
                " C C++
            call vam#ActivateAddons(['clang_complete'])
            call vam#ActivateAddons(['github:Shougo/neocomplcache-clang'])
                " Lua
            " call vam#ActivateAddons(['lua'])
            " call vam#ActivateAddons(['lua_omni'])
            " call vam#ActivateAddons(['luainspect'])
                " Haskell using ghc-mod
            " call vam#ActivateAddons(['neco-ghc'])
                " R
            "call vam#ActivateAddons(['Vim-R-plugin'])
                " Perl
            "call vam#ActivateAddons(['perlomni'])
                " simulate : Tmux & Screen
            " call vam#ActivateAddons(['vimshell'])
            "call vam#ActivateAddons(['Clam'])
                " special editing
            call vam#ActivateAddons(['Screen_vim__gnu_screentmux'])
            call vam#ActivateAddons(['vimux'])
            call vam#ActivateAddons(['inline_edit', 'NrrwRgn', 'partedit'])
                " vimwiki & note
            call vam#ActivateAddons(['vimwiki'])
            call vam#ActivateAddons(['github:mattn/calendar-vim'])
            " call vam#ActivateAddons(['VikiDeplate'])
            " call vam#ActivateAddons(['vikitasks'])
            " call vam#ActivateAddons(['vktheming'])
            call vam#ActivateAddons(['viske'])
            " call vam#ActivateAddons(['notes'])
            " call vam#ActivateAddons(['vim-pad'])
                " GTD
            " call vam#ActivateAddons(['VimOrganizer'])
            call vam#ActivateAddons(['speeddating'])
            call vam#ActivateAddons(['github:gregsexton/Vomodoro'])
                " outliner
            " call vam#ActivateAddons(['HyperList'])
            " call vam#ActivateAddons(['VOoM'])
                " TeX & LaTeX
            " call vam#ActivateAddons(['auctex'])
            " call vam#ActivateAddons(['TeX_9'])
            " call vam#ActivateAddons(['AutomaticLaTeXPlugin'])
            " call vam#ActivateAddons(['TeX-PDF'])
                " markup & markdown
            call vam#ActivateAddons(['preview%3344'])
                " encrypt
            "call vam#ActivateAddons(['tGpg'])
            "call vam#ActivateAddons(['openssl'])
                    " vim-gnupg
                " call vam#ActivateAddons(['gnupg%3645'])
                " call vam#ActivateAddons(['github:jamessan/vim-gnupg'])
                " post/paste/www micro-blog/twitter/code/text/www
            call vam#ActivateAddons(['PasteBin'])
            call vam#ActivateAddons(['Gist'])
            " call vam#ActivateAddons(['wwwsearch'])
            " call vam#ActivateAddons(['Tumble'])
            "call vam#ActivateAddons(['TwitVim'])
                " color/syntax
            call vam#ActivateAddons(['colorv'])
            "call vam#ActivateAddons(['Colorizer'])
            "call vam#ActivateAddons(['CSSMinister'])
            "call vam#ActivateAddons(['ScrollColors'])
            "call vam#ActivateAddons(['ColorSchemeEditor'])
            "call vam#ActivateAddons(['EasyColour'])
            "call vam#ActivateAddons(['VIM_Color_Picker'])
            "call vam#ActivateAddons(['nosyntaxwords'])
                " colorschemes
            " call vam#ActivateAddons(['galaxy'])
                " mark & position & session
                    " mark several words in different colors simultaneously.
            " call vam#ActivateAddons(['DynamicSigns'])
            "call vam#ActivateAddons(['vmark.vim_Visual_Bookmarking'])
            "call vam#ActivateAddons(['Mark%2666'])
                " format
            call vam#ActivateAddons(['Txtfmt_The_Vim_Highlighter'])
            call vam#ActivateAddons(['Tabular'])
            call vam#ActivateAddons(['surround'])
            call vam#ActivateAddons(['Auto_Pairs'])
            " call vam#ActivateAddons(['delimitMate'])
            call vam#ActivateAddons(['utl'])
            " call vam#ActivateAddons(['open-browser'])
            call vam#ActivateAddons(['bad-whitespace'])
            " call vam#ActivateAddons(['trailing-whitespace'])
                " write & spell checker & speak
            " call vam#ActivateAddons(['Engspchk'])
            "call vam#ActivateAddons(['SpellCheck'])
            "call vam#ActivateAddons(['LanguageTool'])
            "call vam#ActivateAddons(['VimSpeak'])
                " convert/format/export
                    " 2HTML
            "call vam#ActivateAddons(['formatvim'])
                " TUI : Text User Interface
            " call vam#ActivateAddons(['forms'])
                " Vim related
            " call vam#ActivateAddons(['tips'])
                " Vimrc manager
            "call vam#ActivateAddons(['Sauce'])
                " Vim Extension
            call vam#ActivateAddons(['repeat', 'visualrepeat', 'abolish'])
            " call vam#ActivateAddons(['LineJuggler'])
            call vam#ActivateAddons(['visualstar'])
            "call vam#ActivateAddons(['StarRange'])
            "call vam#ActivateAddons(['exjumplist'])
            call vam#ActivateAddons(['AsyncCommand'])
                " marks
            call vam#ActivateAddons(['vim-signature'])
            "call vam#ActivateAddons(['unicode'])
            "call vam#ActivateAddons(['mathematic'])
            call vam#ActivateAddons(['SudoEdit'])
            " call vam#ActivateAddons(['sudo'])
            call vam#ActivateAddons(['SpitVspit'])
            " call vam#ActivateAddons(['dwm'])
            call vam#ActivateAddons(['ZoomWin'])
            "call vam#ActivateAddons(['CompleteHelper'])
            call vam#ActivateAddons(['AmbiCompletion'])
            call vam#ActivateAddons(['LargeFile'])
                " Motions
            call vam#ActivateAddons(['EasyMotion'])
                " ASCII draw
            "call vam#ActivateAddons(['DrawIt'])
            " call vam#ActivateAddons(['ditaa'])
                " small tools
            " call vam#ActivateAddons(['fcitx'])
            "call vam#ActivateAddons(['bestfriend'])
            " }}}

        endfunction " }}}

        call SetupVAM()

        " }}}

        " [ experimental ] {{{ load plugins lazily depending on filetype
        " }}}
    " }}}

filetype plugin indent on " required !
syntax on
" }}}

" [ plugins manager ] {{{
    " tplugin  {{{
    " }}}

    " Sauce  {{{ Dynamic vimrc manager for load different settings.
        " a manager for multiple vimrc files, which can be used to
        " load different settings for different environments.
        " ---------------------
        " Usage:
        "   - :Sauce <name> -- Load a sauce
        "   - :SauceNew <name> -- create a new sauce.
        "   - :SauceEdit <name> -- Edit an existing sauce.
        "   - :SauceCopy <name>
        "   - :sauceDelete <name>
        " This can be used as a simple project organiser tool.
        " e.g. Load the MyProject sauce: :Sauce MyProject
        let g:sauce_path = "~/.vimsauce"
    " }}}

    " VimLint {{{ a correctness and sanity checker of Vim configuration
        " Usage: :VimLint
    " }}}
" }}}

" [ Program ] {{{

    " [ syntax ] {{{
        " TagHighlight {{{ highlight names of class, variable, types in code.
            " Usage: :UpdateTypesFile
            if !exists('g:TagHighlightSettings')
                let g:TagHighlightSettings = {}
            endif
            let g:TagHighlightSettings['TagFileName'] = 'tags'
            let g:TagHighlightSettings['CtagsExecutable'] = 'ctags'
            let g:TagHighlightSettings['CtagsVariant'] = 'exuberant'
            let g:TagHighlightSettings['CtagsArguments'] = []
            let g:TagHighlightSettings['CtagsExtraArguments'] = []
            let g:TagHighlightSettings['ForcePythonVariant'] = 'if_pyth3'
            let g:TagHighlightSettings['PythonVariantPriority'] = [
                        \ "if_pyth3", "if_pyth", "python", "compiled",
                        \ ]

            " Integration other plugins.
            let g:TagHighlightSettings['LanguageDetectionMethods'] =
                        \ ['FileType', 'Extension']
            " Tagbar Integration
            " let g:TagHighlightSettings['FileTypeLanguageOverrides'] =
            "             \ {'tagbar': 'c'}
            " Git Integration
            " let g:TagHighlightSettings['FileTypeLanguageOverrides'] =
            "             \ {'gitcommit': 'python'}

            " Standard Library
            " TODO Android, JDK, PySide, Qt4, wxpython, wxWidgets, etc.
        " }}}
    " }}}

    " [ indent & align ] {{{
        " Indent_Guide {{{ <Leader>ig, :IndentGuidesToggle
            let g:indent_guides_enable_on_vim_startup = 1
            let g:indent_guides_start_level = 2
            let g:indent_guides_indent_levels = 7
            let g:indent_guides_color_change_percent = 100 " 0~100
            let g:indent_guides_guide_size = 1 " indent vertical lines width.
            let g:indent_guides_space_guides = 1 " consider spaces as indention.
                let g:indent_guides_auto_colors = 0
                "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=red ctermbg=3
                "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=red ctermbg=4
                " alternately
                "hi IndentGuidesOdd  guibg=red   ctermbg=3
                "hi IndentGuidesEven guibg=green ctermbg=4
            if &background == "dark"
                hi IndentGuidesEven ctermbg=darkgrey    guibg=#6F7500
                hi IndentGuidesOdd  ctermbg=black       guibg=#6F7500
            elseif &background == "light"
                "molokai's background = light, guibg for peachpuff
                hi IndentGuidesEven ctermbg=233 guibg=LightRed
                hi IndentGuidesOdd  ctermbg=233 guibg=LightRed
            endif
        " }}}

        " matchindent {{{ match others's indent style: tab, 4 spaces, 2 spaces.
            " scans through a file when it's opened and attempts to guess which
            " style of indentation is being used. It then overrides your
            " preferences so that you match the style of the file.
        " }}}

        " Indent_Highlight

        " Splitjoin: || https://github.com/AndrewRadev/splitjoin.vim.git
            " {{{ switching between a single-line statement and a multi-line one.
            nmap <Leader>sj :SplitjoinJoin<cr>
            nmap <Leader>ss :SplitjoinSplit<cr>
            "let b:splitjoin_join_callbacks
            "let b:splitjoin_split_callbacks
            let g:splitjoin_normalize_whitespace = 0
            let g:splitjoin_align = 0
        " }}}

        " Align%294
    " }}}

    " [ completion: omni ] {{{
        " neocomplcache {{{ Ultimate auto Completion system for Vim.
            " {{{ auto popup menu, <Tab>, <C-j/k/n/p>, <C-y>, <C-g>, <C-e>
            " Conflict: need to comment 'set complete='
            " Require: vimproc.vim $ make -f make_unix.mak (make proc.so)
            " with vimproc, neocomplcache creates the cache asynchronously.
            " Usage:
            " - Add other language completion:
            "   :NeoComplCacheSetFileType [filetype]
            "   neocomplcache#get_context_filetype()
            "   this [filetype] only used inside of neocomplcache.
            "   -- to use local compound filetype for neocomplcache
            " - :set ft=html.python
            "   -- to use global compound filetype.
            "   so you can complete HTML and Python as same time.
            "   -- but this will affect other plugins which use 'filetype' too.
            let g:acp_enableAtStartup = 0 " Disable AutoComplPop
            let g:neocomplcache_enable_at_startup = 1 " enable at startup time.
            let g:neocomplcache_disable_auto_complete = 0
            let g:neocomplcache_max_list = 100 " number display in pop-up menu.
            let g:neocomplcache_max_keyword_width = 50
            let g:neocomplcache_max_menu_width = 15
            let g:neocomplcache_auto_completion_start_length = 2
            let g:neocomplcache_manual_completion_start_length = 0
            let g:neocomplcache_min_keyword_length = 3
            let g:neocomplcache_min_syntax_length = 3
            let g:neocomplcache_enable_ignore_case = 1 " ignorecase
            let g:neocomplcache_enable_smart_case = 1 " smartcase
            let g:neocomplcache_enable_wildcard = 1 " accept wild card character '*'
            let g:neocomplcache_enable_cursor_hold_i = 0 " 'CursorHoldI' event
            " 1: 'InsertCharPre' event, version >= 7.3.461
            if v:version == 703 && has("patch461")
                let g:neocomplcache_enable_insert_char_pre = 1
            else
                let g:neocomplcache_enable_insert_char_pre = 0
            endif
            let g:neocomplcache_enable_auto_select = 0 " select first candidate auto
            let g:neocomplcache_enable_auto_delimiter = 1 " auto insert delimiter
            let g:neocomplcache_cursor_hold_i_time = 100 " time of auto complete
            let g:neocomplcache_enable_camel_case_completion = 1 " ambiguous searching when capital
            let g:neocomplcache_enable_underbar_completion = 1 " ambiguous searching when input _
            let g:neocomplcache_enable_fuzzy_completion = 0 " this match is too heavy.
            let g:neocomplcache_fuzzy_completion_start_length = 3
            let g:neocomplcache_enable_caching_message = 1 " display message in cmdline when cache.
            let g:neocomplcache_caching_limit_file_size = 500000 " set file size to make cache
            let g:neocomplcache_tags_caching_limit_file_size = 500000 " tags file size
                " use :NeoComplCacheCachingTags command to make cache.
            let g:neocomplcache_disable_caching_file_path_pattern = '' " pattern of buffer un-cache
            let g:neocomplcache_lock_buffer_name_pattern = '' " pattern of buffer do not auto-complete
            let g:neocomplcache_compare_function = 'neocomplcache#compare_rank'
            let g:neocomplcache_enable_prefetch = 0 " TODO this has side effect.
            let g:neocomplcache_lock_iminsert = 0 " lock when 'iminsert' is non zero
            let g:neocomplcache_temporary_dir = '~/.neocon'

            " [ refers to: neocomplcache/autoload/neocomplcache/sources/ ]
            if !exists('g:neocomplcache_keyword_patterns')
                let g:neocomplcache_keyword_patterns = {}
            endif
            let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
            if !exists('g:neocomplcache_omni_patterns')
                let g:neocomplcache_omni_patterns = {}
            endif
            let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
            let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
            let g:neocomplcache_omni_patterns.go = '\h\w*\%.'
            " let g:neocomplcache_omni_patterns.python = '[^. \t]\.\w*'
            " empty to disable auto complete especially for python.
            " let g:neocomplcache_omni_patterns.python = ''
            let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
            let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
                " for perlomni.vim settings. https://github.com/c9s/perlomni.vim
            let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
            " let g:neocomplcache_tags_filter_patterns =
            " let g:neocomplcache_same_filetype_lists =
            " Define dictionary.
            let g:neocomplcache_dictionary_filetype_lists = {
                        \ 'default' : '',
                        \ 'vimshell' : $HOME.'/.vimshell_hist',
                        \ 'scheme' : $HOME.'/.gosh_completions',
                        \ }
            let g:neocomplcache_dictionary_patterns = {}
            " a dictionary to define context filetypes.
            if !exists('g:neocomplcache_context_filetype_lists')
                let g:neocomplcache_context_filetype_lists = {}
            endif
            let g:neocomplcache_context_filetype_lists.perl6 = [{
                        \ 'filetype' : 'pir',
                        \ 'start' : 'Q:PIR\s*{',
                        \ 'end' : '}',
                        \ }]
            let g:neocomplcache_context_filetype_lists.vim = [{
                        \ 'filetype' : 'python',
                        \ 'start' : '^\s*python <<\s*\(\h\w*\)',
                        \ 'end' : '^\1',
                        \ }]
            " let g:neocomplcache_text_mode_filetypes =
            let g:neocomplcache_disable_select_mode_mappings = 1
            let g:neocomplcache_ctags_program = 'ctags'
            " let g:neocomplcache_ctags_arguments_list =
            " let g:neocomplcache_include_paths =
            " let g:neocomplcache_include_exprs =
            " let g:neocomplcache_include_patterns =
            " let g:neocomplcache_include_functions =
            let g:neocomplcache_include_max_processes = 25
            " let g:neocomplcache_filename_include_exprs =
            if !exists('g:neocomplcache_filename_include_exts')
                let g:neocomplcache_filename_include_exts = {}
            endif
            let g:neocomplcache_filename_include_exts.cpp = [
                        \ '', 'h', 'hpp', 'hxx',
                        \ ]
            " let g:neocomplcache_member_prefix_patterns =
            " let g:neocomplcache_member_patterns =
            if !exists('g:neocomplcache_delimiter_patterns')
                let g:neocomplcache_delimiter_patterns = {}
            endif
            let g:neocomplcache_delimiter_patterns.vim = ['#']
            let g:neocomplcache_delimiter_patterns.cpp = ['::']
            if !exists('g:neocomplcache_omni_functions')
                let g:neocomplcache_omni_functions = {}
            endif
            " if the key is '_', used for all filetypes.
            let g:neocomplcache_omni_functions = {
                        \ '_': 'syntaxcomplete#Complete',
                        \ 'ruby': 'rubycomplete#Complete',
                        \ 'c': 'ccomplete#Complete',
                        \ 'go': 'gocomplete#Complete',
                        \ 'cpp,hpp': 'omni#cpp#complete#Main',
                        \ 'html,markdown': 'htmlcomplete#CompleteTags',
                        \ 'css': 'csscomplete#CompleteCSS',
                        \ 'javascript': 'javascriptcomplete#CompleteJS',
                        \ 'xml': 'xmlcomplete#CompleteTags',
                        \ 'php': 'phpcomplete#CompletePHP',
                        \ 'sql': 'sqlcomplete#Map("sqlkeyword")',
                        \ 'haskell': 'necoghc#omnifunc',
                        \ }
            if has('python3/dyn') || has('python3')
                let g:neocomplcache_omni_functions['python'] = 'python3complete#Complete'
            elseif has('python/dyn') || has('python')
                let g:neocomplcache_omni_functions['python'] = 'pythoncomplete#Complete'
            endif
            let g:neocomplcache_vim_completefuncs = {}
            let g:neocomplcache_source_disable = {}
            let g:neocomplcache_source_completion_length = {}
            let g:neocomplcache_force_overwrite_completefunc = 0
            let g:neocomplcache_release_cache_time = 900
            let g:neocomplcache_use_vimproc = 1
                " for composite file type (only use one completion)
            let g:neocomplcache_ignore_composite_filetype_lists = {
                        \ 'python.unit' : 'python',
                        \ 'ruby.spec' : 'ruby',
                        \ }

                " [ priority ] {{{
                " control each source's completion priority.
                " The higher value is, the higher priority.

                " default
                let g:neocomplcache_source_rank = {
                            \ 'filename_complete' : 3,
                            \ 'dictionary_complete' : 4,
                            \ 'member_complete' : 5,
                            \ 'keyword_complete' : 5,
                            \ 'buffer_complete' : 5,
                            \ 'syntax_complete' : 7,
                            \ 'include_complete' : 8,
                            \ 'snippets_complete' : 8,
                            \ 'vim_complete' : 300,
                            \ 'omni_complete' : 300,
                            \ 'other plugin sources' : 5,
                            \ 'other completefunc sources' : 10,
                            \ 'other ftplugin sources' : 100,
                            \ }

                " }}}
            " }}}

            " [ neocomplcache functions ] {{{
            " inoremap <expr><C-n>
                " pumvisible() ? "\<C-n>" : "\<Tab>"
                " pumvisible() ? "\<C-j>" : "\<C-n>"
                " pumvisible() ? "\<C-j>" : neocomplcache#...()
                " neocomplcache#manual_filename_complete()
                " neocomplcache#manual_omni_complete()
                " neocomplcache#manual_keyword_complete()
                " neocomplcache#smart_close_popup()
                " neocomplcache#close_popup
                " neocomplcache#complete_common_string()
                " ----------------------------------------------
                function! s:check_back_space()
                    let col = col('.') - 1
                    return !col || getline('.')[col - 1] =~ '\s'
                endfunction
                " ----------------------------------------------
            " Awesome EXample.
            "imap <expr><Tab> neocomplcache#sources#snippets_complete#expandable()
                    "\ ? "\<Plug>(neocomplcache_snippets_expand)"
                    "\ : pumvisible() ? "\<C-n>"
                    "\ : <SID>check_back_space() ? "\<TAB>"
                    "\ : "\<C-x>\<C-u>"

            "inoremap <expr><TAB> pumvisible()
                        "\ ? "\<C-n>"
                        "\ : <SID>check_back_space() ? "\<TAB>"
                        "\ : "\<C-x>\<C-u>"
            " }}}

            " [ key mappings ] {{{
                " <Tab> -- complete or jump in snippet placeholder.
                " <C-j> -- next popup selection or jump forwards in snippet placeholder
                " <C-k> -- prev popup selection or jump backward in snippet placeholder
                " <C-n> -- next popup selection.
                " <C-p> -- prev popup selection.
                " <C-o> -- manual omni complete.
                " <C-y> -- smart close popup.
                " <C-e> -- cancel popup.
                " <C-g> -- undo completion.
                " <C-h> -- smart close popup.
                " <C-l> -- common string complete.
                " <BS>  -- smart close popup.

                inoremap <expr><C-x><C-f> neocomplcache#manual_filename_complete()
                inoremap <expr><C-o> neocomplcache#manual_omni_complete()
                inoremap <expr><C-l> neocomplcache#complete_common_string()
                inoremap <expr><C-y> neocomplcache#smart_close_popup()
                inoremap <expr><C-e> neocomplcache#cancel_popup()
                inoremap <expr><C-g> neocomplcache#undo_completion()
                inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
                inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"

                inoremap <CR> <C-R>=neocomplcache#smart_close_popup()<CR><CR>
                " inoremap <expr><CR> neocomplcache#smart_close_popup() . "\<CR>"
                " inoremap <expr><CR> neocomplcache#close_popup() . "\<CR>"

                imap <expr><C-n> pumvisible() ? "\<C-n>" : "\<Tab>"
                imap <expr><C-p> pumvisible() ? "\<C-p>"

                imap <expr><Tab> neocomplcache#sources#snippets_complete#expandable()
                            \ ?  "\<Plug>(neocomplcache_snippets_expand)"
                            \ : <SID>check_back_space() ? "\<TAB>"
                            \ : "\<C-x>\<C-u>"

                " ------------------------------------------------------------
                " { neocomplcache-snippets-complete } {{{
                " neocomplcache#sources#snippets_complete#expandable()
                    " return value:
                    "   0 : not found
                    "   1 : cursor text is snippets trigger
                    "   2 : exists placeholder in current buffer
                    "   3 : both found.
                " neocomplcache#sources#snippets_complete#expandable()
                " neocomplcache#sources#snippets_complete#jumpable()
                " neocomplcache#sources#snippets_complete#get_snippets_dir()
                " :NeoComplcacheEditSnippets [filetype],
                " <Plug>(neocomplcache_snippets_expand) -> expand_or_jump
                " <Plug>(neocomplcache_snippets_jump)   -> jump_or_expand
                " <Plug>(neocomplcache_snippets_force_expand)
                " <Plug>(neocomplcache_snippets_force_jump)
                " <Plug>(neocomplcache_start_unit_snippet)
                    " force_expand force complete are used in special like:
                    "   - func(for
                    "   - expand '.' snippet.
                    " force_jump too.
                " ----------------------------------------------
                " neocomplcache snippet
                "   -> neocomplcache complete
                "       -> check backspace
                "           -> <Tab> to expand snippet.
                "               -> User defined complete.
                "                   -> <C-j/k> next/prev placeholder
                "                   -> <C-n/p> next/prev complete item.
                " ----------------------------------------------
                " ternary operator:  x = y > 0 ? 5 : 10 =>
                " then x will be 5 or 10 depending on whether y is above zero or not.
                " imap <expr><Tab>
                "         neocomplcache#sources#snippets_complete#expandable()
                "         \ ? "\<Plug>(neocomplcache_snippets_expand)"
                "         \ : pumvisible() ? "\<C-n>"
                "         \ : <SID>check_back_space() ? "\<TAB>"
                "         \ : "\<C-x>\<C-u>"
                " \ : "" (here "" is empty string)
                " ----------------------------------------------
                " if neocomplcache#sources#snippets_complete#jumpable()
                "     inoremap <expr> <C-j> "\<Plug>(neocomplcache_snippets_jump)"
                "     inoremap <expr> <C-k> "\<Plug>(neocomplcache_snippets_jump)"
                " endif
                " ----------------------------------------------
                " imap <expr><Tab> neocomplcache#sources#snippets_complete#expandable()
                "             \ ?  "\<Plug>(neocomplcache_snippets_expand)"
                "             \ : <SID>check_back_space() ? "\<TAB>"
                "             \ : "\<C-x>\<C-u>"
                " imap <expr><C-j> neocomplcache#sources#snippets_complete#jumpable()
                "             \ ? "\<Plug>(neocomplcache_snippets_jump)"
                "             \ : ""
                " imap <expr><C-k> neocomplcache#sources#snippets_complete#jumpable()
                "             \ ? "\<Plug>(neocomplcache_snippets_jump)"
                "             \ : ""
                " }}}

                " { UltiSnips } {{{
                " <C-j>/<C-k> is used by UltiSnips jump backwards and forwards.
                " defined jump forward and backwards with C-j/k.
                " UltiSnips_ExpandSnippetOrJump, UltiSnips_ExpandSnippet,
                " UltiSnips_ListSnippets, UltiSnips_JumpForwards.
                " ----------------------------------------------
                "imap <expr><Tab> UltiSnips_ExpandSnippetOrJump() ?
                            "\ UltiSnips_ExpandSnippetOrJump()
                            "\ : pumvisible() ? "\<C-n>" : "\<Tab>"
                " }}}

                " { snipMate } {{{
                " FIXME snipMate#GetSnippets(), snipMate#ShowAvailableSnips(),
                " "\<c-r>=snipMate#ShowAvailableSnips()\<cr>"
                " ----------------------------------------------
                "imap <expr><Tab> snipMate#ShowAvailableSnips() ?
                            "\ snipMate#
                            "\ : pumvisible() ? "\<C-n>" : "\<Tab>"
                " }}}

                " [ unite ] {{{ TODO
                " completion with unite.vim
                " <Plug>(neocomplcache_start_unite_complete)
                " <Plug>(neocomplcache_start_unite_quick_match)
                " imap <C-k> <Plug>(neocomplcache_start_unite_complete)
                " imap <C-q> <Plug>(neocomplcache_start_unite_quick_match)
                " ----------------------------------------------------------
                " inoremap <expr> - pumvisible()
                "     \ ? "\<Plug>(neocomplcache_start_unite_quick_match)"
                "     \ : '-'
                " inoremap <expr> <C-Space> pumvisible()
                "             \ ? "\<Plug>(neocomplcache_start_unite_complete)"
                "             \ : "\<C-Space>"
                " }}}
            " }}}
        " }}}

        " vimproc {{{ a great asynchronous execution library for Vim.
            " let g:vimproc_password_pattern " this variable is used for vimshell.
        " }}}

        " neco-look : neocomplcache-look (/usr/bin/look)

        " AutoComplPop

        " SuperTab {{{ <Tab> perform all your insert completions.
            " context, <c-n>, <c-p>,
            " <c-x><c-o> (omni), <c-x><c-u> (user defined func), <c-x><c-]>
            let g:SuperTabDefaultCompletionType = "context"
            " when upper option is 'context'
            let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"

            let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
            let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
            let g:SuperTabContextDiscoverDiscovery =
                \ ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]

            " how long the time retains: completion, insert, session
            let g:SuperTabRetainCompletionDuration = 'insert'
            " prevent completion after ...
            let g:SuperTabNoCompleteBefore = []
            let g:SuperTabNoCompleteAfter = ['^', '\s', ',']
            let g:SuperTabMappingForword = '<c-space>' " <tab>, <c-space>, <nul>
            let g:SuperTabMappingBackward = '<s-tab>' " <s-tab>, <s-c-space>, <s-nul>
            let g:SuperTabMappingTabLiteral = '<c-tab>' " insert true TAB
            let g:SuperTabLongestEnhanced = 0 " if 'longest' in completeopt
            let g:SuperTabLongestHighlight = 1 " highlight first one in popup menu
            let g:SuperTabCrMapping = 0 " 1: cancel completion mode.
            let g:SuperTabClosePreviewOnPopupClose = 0 " close preview window ?

            " autocmd FileType *
            "             \ if &omnifunc != '' |
            "             \   call SuperTabChain(&omnifunc, "<c-p>") |
            "             \   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
            "             \ endif

            " [ extra ]
            function MyTagContext()
                if filereadable(expand('%:p:h') . '/tags')
                    return "\<c-x>\<c-]>"
                endif
                " no return will result in the evaluation of the next
                " configured context
            endfunction

            let g:SuperTabCompletionContexts =
                        \ ['MyTagContext', 's:ContextText', 's:ContextDiscover']
        " }}}

        " code_complete {{{ function parameter complete, code snippets, etc
            " Usage: <A-D> to raise up completion popup menu.
        " }}}
    " }}}

    " [ snippets ] {{{ <Ctrl-j/k> | <Tab>
        " neocomplcache-snippets_complete {{{ snippets using neocomplcache complete.
            "This source analyzes snippet files for completion. The source offer
            "a function similar with snipMate.vim and snippetsEmu.vim. Because
            "you can search a snippet with a function of neocomplcache, you may
            "omit trouble to learn.
                " :NeoComplCacheCachingSnippets [filetype]
                " :NeoComplcacheEditSnippets [filetype]
                " :NeoComplCacheEditRuntimeSnippets [filetype]
                " neocomplcache#sources#snippets_complete#expandable()
                    " return value:
                    "   0 : not found
                    "   1 : cursor text is snippets trigger
                    "   2 : exists placeholder in current buffer
                    "   3 : both found.
                " neocomplcache#sources#snippets_complete#jumpable()
                " neocomplcache#sources#snippets_complete#force_expandable()
                " <Plug>(neocomplcache_snippets_expand) -> expand_or_jump
                " <Plug>(neocomplcache_snippets_jump)   -> jump_or_expand
                " <Plug>(neocomplcache_snippets_force_expand)
                " <Plug>(neocomplcache_snippets_force_jump)
                " <Plug>(neocomplcache_start_unit_snippet)
                " <Plug>(neocomplcache_snippets_expand)
                " <Plug>(neocomplcache_snippets_jump)
                " <Plug>(neocomplcache_start_unite_snippet)

            " add user own snippets dir.
            "let g:neocomplcache_snippets_dir='~/.vim/snippets/dir2,~/.vim/snippets/dir2'
            let g:neocomplcache_snippets_dir='~/.vim/snippets/neco-snippets'
            let g:neocomplcache_disable_select_mode_mappings = 1
                " 1: not load runtime snippets. avoid conflicting snippets.
            let g:neocomplcache_snippets_disable_runtime_snippets = 0

                function! EditNeoSnippets()
                    split
                    execute ":NeoComplCacheEditSnippets ".&filetype
                endfunction

                nnoremap <buffer> <Leader>es :call EditNeoSnippets()<CR>
                "nnoremap <buffer> <Leader>es :NeoComplCacheEditSnippets<CR>
        " }}}

        " UltiSnips {{{ VISUAL, <Tab>, <C-Tab>, <C-J/K>
            " :UltiSnipsEdit
            " :UltiSnipAddFiletypes
            "       cuda.cpp.c (merging of two filetypes snippets)
            " UltiSnips_AddSnippet(trigger, value, description, options, ...)
            " UltiSnips_Anon(value, ...) 'anonymous snippet'
            if has('python3')
                let g:UltiSnipsUsePythonVersion = 3 " use python 3.X
            elseif has('python')
                let g:UltiSnipsUsePythonVersion = 2 " use python 2.X
            endif
            let g:snips_author = 'stardiviner <numbchild@gmail.com>'
            let g:UltiSnipsEditSplit = "horizontal" " normal, horizontal, vertical.
            " let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets/UltiSnips"]
            " do not use snippets come with UltiSnips.
            let g:UltiSnipsSnippetDirectories = ["snippets/UltiSnips"]
            let g:UltiSnipsDontReverseSearchPath = 0 " traverse runtimepath
            let g:UltiSnipsExpandTrigger = "<tab>"
            let g:UltiSnipsListSnippets = "<c-tab>"
            let g:UltiSnipsJumpForwardTrigger = "<c-j>" " jump to next tabstop.
            let g:UltiSnipsJumpBackwardTrigger = "<c-k>" " previous tabstop.
            let g:UltiSnipsDoHash = 1 " check and reload new snip file.
            " let g:UltiSnipsRemoveSelectModeMappings = 1 " issues a :sunmap cmd.
            " let g:UltiSnipsMappingsToIgnore = [ "somePlugin", "otherPlugin" ]

            nnoremap <buffer> <Leader>es :UltiSnipsEdit<CR>
            nnoremap <buffer> <Leader>as :UltiSnipsAddFiletypes vimwiki.python
        " }}}

        " Xptemplate

        " SnipMate {{{
            " :SnipMateOpenSnippetFiles, create snippet on the fly.
            " <C-R><Tab> show list of available snippets.
            " XX<Tab> show list or expand if match.
            " <shift-tab> to jump tab stops in reverse order.
            " let g:snips_trigger_key='<c-space>' " <tab>, <c-space>
            let g:snips_author = 'stardiviner'

            let g:snipMate = {}
            let g:snipMate.scope_aliases = {}
                " add both ruby and ruby-rails snippets for filetype='ruby'.
            let g:snipMate.scope_aliases['ruby'] = 'ruby,ruby-rails'
                " for html.javascript etc filetype.
            let g:snipMate['no_match_completion_feedkeys_chars'] = ""

            " TODO
            " default implementation collecting snippets by handlers
            "let g:snipMate['get_snippets'] = snipMate#GetSnippets
            " default handler:
            "let g:snipMateSources['default'] = snipMate#DefaultPool
            " default directories containing snippets:
            "let g:snipMate['snippet_dirs'] = funcref#Function('return split(&runtimepath,",")')

            " FIXME on the fly creating python snippet using the registers.
            " snipmate/autoload/snipMate_python_demo.vim
            " call snipMate_python_demo#Activate() in ftplugin/python.vim

            let g:commentChar = {
                        \ 'vim': '"',
                        \ 'c': '//',
                        \ 'cpp': '//',
                        \ 'sh': '#',
                        \ 'python': '#'
                        \}
        " }}}

        " SnippetComplete {{{
            " Insert mode completion for abbre and snippets.
            " i_CTRL-X_] : find matches for abbr that start with text in front of cursor
            " imap <C-x><Tab> <Plug>(SnippetComplete)
            " inoremap <C-Space> <Plug>(SnippetComplete)
        " }}}
    " }}}

    " [ skeleton/template ] {{{
        " SonicTemplate {{{ Easy and high speed coding method.
            " :Template <Tab>
            let g:template_vim_template_dir = [
                        \ '$HOME/.vim/template/SonicTemplate/'
                        \ ]
                " template filename rule:
                " [kind]-[name].[extension]
                "  `- 'base' or 'snip'
                " template file keyword: {{_name_}}, {{_cursor_}}, {{_input_:var}} ....
        " }}}

        " template {{{ read the template file automatically when edit new file.
            " Usage:
            "   - :[line]TemplateLoad[!] [pattern]
            let g:template_basedir = ['$HOME/.vim/template/template']
            let g:template_files = 'template/**'
            let g:template_free_pattern = 'template'
        " }}}

        " qtmplsel {{{ select a template on creating a new file.
            " Usage:
            "   - Search Rules:
            "       - by filetype:
            "           filetype=python -> template/python_*
            "       - by suffix:
            "           *.cpp -> template/*.cpp
            "       - by filename:
            "           Makefile -> template/Makefile_*
            " Note that especially in case 3, 'Makefile_' is a legal template
            " name but 'Makefile' is not even if you have no other template file.
            " String surrounded by '@{@' '@}@' in the template file is regarded
            " as a vim expression, and will be eval()ed on loading.
            "   e.g.
            "       @{@expand('%:t')@}@          ->  newfile.py
            "       @{@strftime('%Y-%m-%d')@}@   ->  2009-08-30
            let g:qts_templatedir = "$HOME/.vim/template/qtmplsel"
        " }}}

        " TagmaLast : Update the 'Last Changed' line in a file.
    " }}}

    " [ tags ] {{{ <F12>
        " Tagbar {{{ <F12> Display tags of a file ordered by scope.
            " <Space> display prototype of a tag. <Enter> jump to tag o: toggle fold
            nnoremap <F12> :TagbarToggle<CR>
            let g:tagbar_ctags_bin = '/usr/bin/ctags' " default empty, '/usr/bin/ctags'
            let g:tagbar_width = 25
            let g:tagbar_compact = 0 " omitting heading help line and blank lines.
            let g:tagbar_left = 0
            let g:tagbar_autoshowtag = 1 " auto open folds when tag in folds.
            let g:tagbar_autofocus = 0 " autofocus to tagbar window when opened.
            let g:tagbar_autoclose = 0 " auto close tagbar when you jump to tag
            let g:tagbar_sort = 1 " sort according to their name.
            let g:tagbar_expand = 1 " window be expanded by width of tagbar win if GVim.
            let g:tagbar_foldlevel = 2 " level higher than this number will be closed.
            let g:tagbar_usearrows = 0 " { Windows only }
            let g:tagbar_iconchars = ['▶', '▼'] " default on Linux and Mac.
            let g:tagbar_updateonsave_maxlines = 10000 " update when file has fewer
            " let g:tagbar_systemenc = "utf-8" " value of 'encoding'.
            " let g:tagbar_type_javascript = {
            "             \ 'ctagsbin' : '/usr/local/bin/jsctags',
            "             \ }

            " automatically opening tagbar.
                " autocmd VimEnter * nested :TagbarOpen " open for any files.
                "augroup TagListAutoToggle
                    "au!
                    "au VimEnter * nested :call tagbar#autoopen(1) " open for supported.
                "augroup END

            " tagbar highlight
                highlight TagbarComment ctermfg=Black
                highlight TagbarKind ctermfg=Red
                highlight TagbarScope ctermfg=Green
                highlight TagbarType ctermfg=Cyan
                highlight TagbarSignature ctermfg=Yellow
                highlight TagbarPseudoID ctermfg=Blue
                highlight TagbarFoldIcon ctermfg=Black
                highlight TagbarHighlight ctermfg=Black ctermbg=Yellow cterm=bold
                highlight TagbarAccessPublic ctermfg=Green
                highlight TagbarAccessProtected ctermfg=Blue
                highlight TagbarAccessPrivate ctermfg=Red
        " }}}

        " tagbar-phpctags {{{
            " Require: phpctags https://github.com/techlivezheng/phpctags
            let g:tagbar_phpctags_bin='$HOME/compile/phpctags/phpctags'
        " }}}

        " Taglist {{{ <F12>
            " :Tlist[AddFiles, AddFilesRecursive, Close, Debug, Lock, Messages,
            " Open, ShowPrototype, ShowTag, HighlightTag, Toggle, Undebug,
            " Unlock, Update]
            " nnoremap <F12> :TlistToggle<CR>
            let g:Tlist_Auto_Open = 0 " open taglist window when vim starts.
            let g:Tlist_Process_File_Always = 1 " processing tag even not open tags win.
            let g:Tlist_Auto_Highlight_Tag = 1 " highlight current tag.
            let g:Tlist_Show_One_File = 0 " display tags for all files and buffers.
            let g:Tlist_Sort_Type = "order" " name or order
            let Tlist_Use_Horiz_Window = 0 " use vertical window.
            let g:Tlist_WinWidth = 25
            let g:Tlist_Inc_Winwidth = 0 " don't reduce vim window after close tag-win.
                " if = 1 you can set height with:
            " let g:Tlist_WinHeight = 20
            let g:Tlist_Use_Right_Window = 1 " use right window.
            let g:Tlist_Compact_Format = 1 " reduce empty lines.
            let g:Tlist_Enable_Fold_Column = 0 " enable window fold column.
            let g:Tlist_File_Fold_Auto_Close = 1 " Close tag folds for inactive buffers.
            let g:Tlist_Display_Prototype = 1 " display tag's prototype instead of name.
            let g:Tlist_Display_Scope = 1 " display the scope of the tags next name.
            let g:Tlist_Close_On_Select = 0
            let g:Tlist_GainFocus_On_ToggleOpen = 0 " get focus.
            let g:Tlist_Highlight_Tag_On_BufEnter = 1 " auto highlight current tag.
            " let g:Tlist_Max_Tag_Length = 25
            let g:Tlist_javascript_Hide_Extras = 0 " hide extra tag data

            " TODO highlighting
            "TagListTagName  - Used for tag names
            "TagListTagScope - Used for tag scope
            "TagListTitle    - Used for tag titles
            "TagListComment  - Used for comments
            "TagListFileName - Used for filenames
        " }}}

        " Tag_Signature_Balloons (Tag Signatures in Balloon Tooltips)
            let g:loaded_tag_signature = 1
            let g:TagSignatureAllowFileLoading = 1
            let g:TagSignatureMaxMatches = 1

        " AutoTag (updates entries in a tags file automatically when saving.)

        " Taggatron {{{ A simple tag file manager for vim.
            " allow user to setup rules for creating your tag files based on language.
            " :TagUpdate
            " let g:tagdefaults = "/path/to/other/tag.file"
            " let g:taggatron_verbose = 1 " debug
            let g:tagcommands = {
                        \ "php" : {"tagfile":".php.tags","args":"-R"},
                        \ "javascript" : {"tagfile":".js.tags","args":"-R"},
                        \ }
        " }}}

        " Bundle 'indexer.tar.gz'

        " Bundle 'xolox/vim-easytags.git'
            " :UpdateTags [-R /path], :HighlightTags

        " gtags.vim {{{
            " | http://www.vim.org/scripts/script.php?script_id=893#0.6
            " $ sudo apt-get install global || .vim/plugin/gtags.vim
            " The gtags.vim plugin script integrates the GNU GLOBAL source code
            " tag system with Vim.  About the details, see
            " http://www.gnu.org/software/global/.
            " First of all, you must execute gtags at the root of source
            " directory to make tag files.
            " $ cd /var/src ; gtags
            " General form of Gtags command is as follows:
            " :Gtags [option] pattern
            " To go to func, you can say :Gtags func
            " Input completion is available. <Tab>
            " QucikFix windows, go to any entry with commands: :cn :cp :ccN :cl
            " You can use POSIX regular expression too. :Gtags ^[sg]et_
            " To go to the referenced point of func. add -r option. :Gtags -r func
            " More details please refer vim/plugin/gtags.vim
        " }}}
    " }}}

    " [ cscope ] {{{
        " cscope {{{
        " }}}
        " CCTree {{{ generate dependency-trees for symbols using cscope database in Vim
            " Usage: Build cscope database, e.g.
            "   > cscope -b -i cscope.files
            " - Load database with command, :CCTreeLoadDB
            " - Append database with command, :CCTreeAppendDB ./cscope.out
            " - show loaded databases, :CCTreeShowLoadedDBs
            let g:CCTreeUseUTF8Symbols = 1 " use symbols for drawing the tree.
            let g:CCTreeOrientation = "left"
            let g:CCTreeWindowVertical = 1 " use vertical window.
            let g:CCTreeWindowMinWidth = 20
            let g:CCTreeWindowWidth = -1 " auto-select best width to fix.
            let g:CCTreeDisplayMode = 1 " 1:Ultra-compact, 2:Compact, 3:Wide

            " syntax coloring:
                " CCTreeSymbol -- symbol name.
                " CCTreeMarkers -- include "|", "+--->"
        " }}}
    " }}}

    " [ search ] {{{
        " CtrlP {{{ <C-P> :CtrlP to full path fuzzy(regex grep) file buffer and MRU.
            let g:loaded_ctrlp = 0 " =1 to disable plug completely.
            let g:ctrl_map = '<c-p>' " for normal mode press Ctrl-P.
            let g:ctrlp_cmd = 'CtrlP' " default command to use when pressing mapping.
            let g:ctrlp_by_filename = 0 " 1: search by filename (not full path)
            let g:ctrlp_regexp = 1 " 1: to set full regexp search as default.
            let g:ctrlp_match_window_bottom = 1 " window position
            let g:ctrlp_match_window_reversed = 1 " show matching in reverse order
            let g:ctrlp_max_height = 10
            let g:ctrlp_switch_buffer = 2 " when file opened, jump to (tag, buffer)
            let g:ctrlp_reuse_window = 'netrw\|help\|quickfix'
            let g:ctrlp_working_path_mode = 'rc'
            let g:ctrlp_root_markers = ['.git', '.hg', '.svn', '.bzr',]
            let g:ctrlp_use_caching = 1 " 0: disable per-session caching.
            let g:ctrlp_clear_cache_on_exit = 1
            let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
            let g:ctrlp_prompt_mappings = {
                        \ 'PrtBS()':              ['<bs>', '<c-]>'],
                        \ 'PrtDelete()':          ['<del>'],
                        \ 'PrtDeleteWord()':      ['<c-w>'],
                        \ 'PrtClear()':           ['<c-u>'],
                        \ 'PrtSelectMove("j")':   ['<c-j>', '<down>'],
                        \ 'PrtSelectMove("k")':   ['<c-k>', '<up>'],
                        \ 'PrtHistory(-1)':       ['<c-n>'],
                        \ 'PrtHistory(1)':        ['<c-p>'],
                        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
                        \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
                        \ 'AcceptSelection("t")': ['<c-t>', '<MiddleMouse>'],
                        \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>'],
                        \ 'ToggleFocus()':        ['<s-tab>'],
                        \ 'ToggleRegex()':        ['<c-r>'],
                        \ 'ToggleByFname()':      ['<c-d>'],
                        \ 'ToggleType(1)':        ['<c-f>', '<c-up>'],
                        \ 'ToggleType(-1)':       ['<c-b>', '<c-down>'],
                        \ 'PrtExpandDir()':       ['<tab>'],
                        \ 'PrtInsert("w")':       ['<F2>', '<insert>'],
                        \ 'PrtInsert("s")':       ['<F3>'],
                        \ 'PrtInsert("v")':       ['<F4>'],
                        \ 'PrtInsert("+")':       ['<F6>'],
                        \ 'PrtCurStart()':        ['<c-a>'],
                        \ 'PrtCurEnd()':          ['<c-e>'],
                        \ 'PrtCurLeft()':         ['<c-h>', '<left>', '<c-^>'],
                        \ 'PrtCurRight()':        ['<c-l>', '<right>'],
                        \ 'PrtClearCache()':      ['<F5>'],
                        \ 'PrtDeleteMRU()':       ['<F7>'],
                        \ 'CreateNewFile()':      ['<c-y>'],
                        \ 'MarkToOpen()':         ['<c-z>'],
                        \ 'OpenMulti()':          ['<c-o>'],
                        \ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>'],
                        \ }
                " in some terminal, <c-h> is <bs>, so use:
                    " \ 'PrtCurLeft()': ['<left>', '<c-^>']
            let g:ctrlp_mruf_max = 250
            let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*' " MacOSX/Linux
            " let g:ctrlp_mruf_exclude = '^C:\\dev\\tmp\\.*' " Windows
            " let g:ctrlp_mruf_include = '\.py$\|\.rb$'
            let g:ctrlp_mruf_relative = 0 " 1: show only MRU files in current working dir
            let g:ctrlp_mruf_case_sensitive = 1 " avoid duplicate MRU entries.
            let g:ctrlp_dotfiles = 1 " =0 to don't scan for dotfiles and dotdirs.
            let g:ctrlp_custom_ignore = {
                        \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                        \ 'file': '\.exe$\|\.so$\|\.dll$',
                        \ }
                        " \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
            let g:ctrlp_max_files = 10000 " maximum number of files to scan, 0: no limit.
            let g:ctrlp_max_depth = 40 " maximum depth of a dir tree to recurse into.
                " specify external tool for listing files instead of Vim's globpath()
            "let g:ctrlp_user_command = 'find %s -type f' " MacOSX/Linux
            "let g:ctrlp_user_command = 'find %s -type f | grep (?!tmp/.*)'
                " use grep to filter the result.
            " let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d' " Windows
            let g:ctrlp_max_history = &history " max of input strings CtrlP remember
                " 0: to disable prompt's history, <c-n>, <c-p> to browse.
            let g:ctrlp_open_new_file = 'v' " specify how newly file be opened when <c-y>
                " t: tab, h: horizontal split, v: vertical split, r: current window.
            let g:ctrlp_open_multiple_files = 'v' " open multiple files with <c-z>, <c-o>
            let g:ctrlp_arg_map = 0
                " 1: <c-o> <c-y> accept extra key as argument to override default
                " t, h, v, r, <esc>|<c-c> to go back to prompt.
            let g:ctrlp_follow_symlinks = 0 " 1: follow all symlinks indiscriminately.
            let g:ctrlp_lazy_update = 0 " only update match window after typing stopped
            let g:ctrlp_use_migemo = 0 " 1: use Migemo Pattern for Japanese filenames.
            let g:ctrlp_buftag_systemenc = &encoding
            " let g:ctrlp_buftag_ctags_bin = ''
            let g:ctrlp_default_input = 0 " seed the prompt with cur file's relat-path
            let g:ctrlp_match_func = {} " an external fuzzy matching function.
            let g:ctrlp_buffer_func = {} " after entering and before exiting buffer
            let g:ctrlp_mruf_default_order = 0 " show only MRU files in pwd
            let g:ctrlp_tabpage_position = 'ac'

                " statusline {{{
                " customize the statusline for CtrlP window.
            let g:ctrlp_status_func = {
                        \ 'main': 'Function_Name_1',
                        \ 'prog': 'Function_Name_2',
                        \ }

                " Arguments: focus, byfname, s:regexp, prv, item, nxt, marked
                " a:1 a:2 a:3 a:4 a:5 a:6 a:7
                "fu! CtrlP_Statusline_1(...)
                    "let focus = '%#LineNr# '.a:1.' %*'
                    "let byfname = '%#Character# '.a:2.' %*'
                    "let regex = a:3 ? '%#LineNr# regex %*' : ''
                    "let prv = ' <'.a:4.'>='
                    "let item = '{%#Character# '.a:5.' %*}'
                    "let nxt = '=<'.a:6.'>'
                    "let marked = ' '.a:7.' '
                    "let dir = ' %=%<%#LineNr# '.getcwd().' %*'
                    "" Return the full statusline
                    "retu focus.byfname.regex.prv.item.nxt.marked.dir
                "endf

                " Argument: len
                " a:1
                "fu! CtrlP_Statusline_2(...)
                    "let len = '%#Function# '.a:1.' %*'
                    "let dir = ' %=%<%#LineNr# '.getcwd().' %*'
                    "" Return the full statusline
                    "retu len.dir
                "endf
                " }}}

                " extensions {{{
                let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir',
                            \ 'rtscript']
                    " the order of them in statusline when using <C-f>, <C-b>
                " }}}

                " file open funcs {{{
                let g:ctrlp_open_func = {
                            \ 'files'     : 'CtrlPHTMLOpenFunc',
                            \ 'buffers'   : 'Function_Name_2',
                            \ 'mru files' : 'Function_Name_3',
                            \ }

                fun! CtrlPHTMLOpenFunc(action, line)
                    if a:action == 't' && fnamemodify(a:line, ':e') =~? '^html\?$'
                        let filename = fnameescape(fnamemodify(a:line, ':p'))
                        call ctrlp#exit()
                        silent! execute '!xdg-open' filename
                    elseif a:action == 'x' && fnamemodify(a:line, ':e') !~? '^html\?$'
                        call feedkeys("\<c-o>")
                    else
                        call call('ctrlp#acceptfile', [a:action, a:line])
                    endif
                endf
                " }}}

                " [ mappings ] {{{
                " <c-p>     -- open CtrlP prompt. >>>
                " <c-r>     -- regexp mode. r>>
                " <c-d>     -- full-path or filename only search. >d>
                " <c-f>,<c-up>  -- scroll to next search mode.
                " <c-b>,<c-down> -- scroll to previous search mode.
                " <tab>     -- auto-complete dir names under current working dir.
                " <s-tab>   -- focus between the match window and the prompt.
                " <c-j>,<down>  -- move selection down.
                " <c-k>,<up>    -- move selection up.
                " <c-a>     -- move cursor to the start of the prompt.
                " <c-e>     -- move cursor to the end.
                " <c-h>,<left>,<c-^> -- move the cursor one char to the left.
                " <c-l>,<right>,     -- move the cursor one char to the right.
                " <c-]><bs> -- delete the preceding char.
                " <del>     -- delete the current char.
                " <c-w>     -- delete a preceding innder word.
                " <cr>      -- open selected file in active window.
                " <c-t>     -- open selected file in new tab after the last tabpage.
                " <c-v>     -- open selected file in vertical split.
                " <c-s>,<c-cr>,<c-x> -- open selected file in a horizontal split.
                " <c-y>     -- create a new file and its parent directories.
                " <c-n>     -- next string in the prompt's history.
                " <c-p>     -- previous string in the prompt's history.
                " <c-z>     -- mark/unmark a file to be opened with <c-o>. <c-y>
                " <c-o>     -- open files marked by <c-z>
                " <F5>      -- refresh window. and purge cache.
                " <F7>      -- wipe MRU list. delete MRU entries marked by <c-z>.
                " <insert>  -- ...
                " <esc>,<c-c>,<c-g> -- cancel. exit CtrlP.
                " }}}
        " }}}

        " Command-T {{{
            " <Leader>t provide fast, intuitive mechanism for opening files and buffers
            "nnoremap <silent> <Leader>t :CommandT<CR>
            "nnoremap <silent> <Leader>b :CommandTBuffer<CR>
            " <BS> <Del> -- delete
            " <Left> <C-h> -- move left.
            " <Right> <C-l> -- move right
            " <C-a> -- move to the start.
            " <C-e> -- move to the end.
            " <C-u> -- clear the contents of the prompt.
            " <Tab> -- switch focus between the file listing and prompt.
            " ---------------------------------------------------------
            "  <C-CR> <C-s> -- split open
            "  <C-v> -- vsplit
            "  <C-t> -- tab
            "  <C-j> <C-n> <Down> -- select next file in file listing.
            "  <C-k> <C-p> <Up> -- select previous file in file listing.
            "  <Esc> <C-c> -- cancel (dismisses file listing)
            let g:CommandTMaxFiles = 10000 " maximum number of files scan.
            let g:CommandTMaxDepth = 15
            let g:CommandTMaxCacheDirectories = 1 " 0: no limit.
            let g:CommandTMaxHeight = 15 " 0: as much as available space.
            let g:CommandTMinHeight = 0 " 0: single line.
            let g:CommandTAlwaysShowDotFiles = 0 " only if entered string contains a dot
            let g:CommandTNeverShowDotFiles = 0
            let g:CommandTScanDotDirectories = 0
            let g:CommandTMatchWindowAtTop = 0 " match window appear at bottom.
            let g:CommandTMatchWindowReverse = 1 " let the best match at bottom.
            let g:CommandTTageIncludeFilenames = 1 " include filenames when matches
            "let g:CommandTCancelMap='<C-x>'
            "let g:CommandTCancelMap=['<C-x>', '<C-c>'] " multiple alternative mapping.
        " }}}

        " Bundle 'FuzzyFinder'
            " buffer/file/command/tag/etc explorer with fuzzy matching.

        " unite.vim {{{ search and display info from arbitrary sources like:
            " files, buffers, recently used files or registers.
            " You can run one of defined action on a target displayed.
            " Usage:
            "   - :Unite [{options}] {sources}
            "       Shows the candidate window of {sources}
            "   - press 'i' to search after prompt '>'
            "       - *word,
            "       - **/foo (directory recursively)
            "       - foo bar (AND)
            "       - foo|bar (OR)
            "       - foo !bar (negative)
            "   - :Unite -buffer-name=files file
            "   - :UniteResume, :UniteBookmarkAdd,
            " Key Mappings:
            "   - <Plug>(unite_exit)
            "   - ....
            " Normal mode mappings:
            " Functions:
            " Sources:
            "   file, file/new, file_mru, file_rec, directory, buffer,
            "   tab, register, bookmark, source, window, output, command,
            "   mapping, grep, find, line, resume, jump, change, launcher,
            "   alias, menu, history/yank, process, session ....

            let g:unite_update_time = 500 " update time interval of candidates
            let g:unite_enable_start_insert = 1 " startup into insert mode
            let g:unite_split_rule = "topleft"
            let g:unite_enable_split_vertically = 0 " 1:split unite window vertically
            let g:unite_winheight = 20
            let g:unite_winwidth = 90
            let g:unite_kind_openable_cd_command = "cd"
            let g:unite_kind_openable_lcd_command = "lcd"
            let g:unite_cursor_line_highlight = "PmenuSel"
            let g:unite_abbr_highlight = "Normal"
            " let g:unite_quick_match_table = {}
            let g:unite_data_directory = expand('~/.unite')
            " let g:unite_no_default_keymappings =
            " let g:unite_source_file_ignore_pattern
            " .............

            " unite.vim extensions {{{
                " unite-ack {{{ Unite plugin for Ack.
                    " Usage:
                    " - :Unite ack:directory:search_word<CR>
                    " - :Unite ack::search_word<CR>
                    let g:unite_source_ack_command = "ack-grep --nocolor --nogroup"
                    let g:unite_source_ack_enable_highlight = 1
                    let g:unite_source_ack_search_word_highlight = "Search"
                    " let g:unite_source_ack_ignore_case =
                    let g:unite_source_ack_enable_print_cmd = 1
                    " shortcut
                    let g:unite_source_ack_targetdir_shortcut = {
                            \ 'vim': '$HOME/.vim',
                            \ 'bundle': '$HOME/.vim/bundle',
                            \ 'vam': '$HOME/.vim/addons',
                            \ 'neco': "$HOME/.vim/addons/neocomplcache",
                            \ 'unite': "$HOME/.vim/addons/unite",
                            \ 'dot': '$HOME/Git/dotfiles',
                            \ 'gem':  '/var/lib/gems/1.8/gems',
                            \ }
                    " .....
                " }}}
                " unite-scriptnames : find/open runtime scriptnames.
                    " Usage: :Unite scriptnames
                " unite-rails : a unite.vim plugin for rails
                    " Usage:
                    " :Unite rails/[model/controller/view/mailer/lib/db/config/log
                    "               /javascripts/stylesheets/
                    "               bundle/bundled_gem/routes/root/command]
                " unite-outline : provides your Vim's buffer with the outline view.
                    " Usage: :Unite outline
                " unite-adb : unite.vim Android Debug Bridge
                " unite-oreore :
                " unite-mark :
                " unite-locate : find/open files easily using locate command.
                " unite-launch : a unite plugin that runs reserved external commands
                    " quickly and stays the result persistently.
                    " Usage: :Unite launch
                " unite-haskellimport :
                " unite-history :
                " unite-help :
                " unite-gem :
                " unite-font :
                " unite-colorscheme :
                " unite-cmdwin : put next Ex command to command-line.
                    " Usage: :Unite cmdwin
                " unite-quickfix {{{ quickfix for unite.vim
                    " Usage:
                    " - :Unite quickfix
                    " - :Unite location_list
                    let g:unite_quickfix_filename_is_pathshorten = 1
                    let g:unite_quickfix_is_multiline = 1
                    " let g:Unite_quickfix_abbr_formatter =
                    " let g:Unite_quickfix_word_formatter =
                " }}}
                " unite-ssh : unite.vim for SSH source.
            " }}}
        " }}}

        " EasyGrep {{{ make search and replace in files easy.
            " \vv: grep current word, \va: add to list,
            " \vr: replace, \vo: config options.
            " :GrepOptions, :Grep, :GrepAdd [-rRiIm],
            " :Replace [target] [replacement], :Replace /[target]/[re]/
            " :ReplaceUndo, :ResultListOpen
            let g:EasyGrepMode = 2 " 0 all file 1 opened buffer 2 track current extension
            let g:EasyGrepCommand = 0 " 0: vimgrep, 1: grep (follows grepprg).
            let g:EasyGrepRecursive = 1
            let g:EasyGrepIgnoreCase = 1
            let g:EasyGrepHidden = 0 " search hidden files
            let g:EasyGrepAllOptionsInExplorer = 1
            let g:EasyGrepWindow = 1 " 0: quickfix, 1: location list.
            let g:EasyGrepWindowPosition = "botright" " such as topleft, botright.
            let g:EasyGrepOpenWindowOnMatch = 1 " open window when has matches.
            let g:EasyGrepEveryMatch = 1 " multiple matches on same line as different
            let g:EasyGrepJumpToMatch = 1 " jump to first match.
            let g:EasyGrepSearchCurrentBufferDir = 1 " search current buffer's dir.
            " let g:EasyGrepInvertWholeWord =
                " 0: all files, 1: buffers, 2: associated extensions
            " let g:EasyGrepFileAssociations = '' " location of ext info file.
            let g:EasyGrepFileAssociationsInExplorer = 1 " show file associations list.
            let g:EasyGrepOptionPrefix='<leader>vy'
            let g:EasyGrepReplaceWindowMode = 0 " 0: new tab, 1: split, 2: autowriteall
            let g:EasyGrepReplaceAllPerFile = 1 " whether use 'a' (for all).
            let g:EasyGrepExtraWarnings = 1
        " }}}

        " Ack {{{ a front for the Perl module App::Ack to replace grep.
            " Usage:
            " - :Ack [options] {pattern} [{directory}]
            " QucikFix window keyboard shortcuts:
            " o, go, t, T, v, gv, q
            if !system("grep 'Ubuntu' /etc/issue") " Ubuntu ack-grep
                let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            endif
        " }}}

        " buffers_search_and_replace {{{ powerful buffer(s) search & replace tool.
            " Usage:
            "   - [range]Bs[flag] <search regex>
            "   - flags:
            "       - c -- current buffer
            "       - e -- exclude
            "       - f --
        " }}}

        " SearchParty {{{
        " }}}

        " Area_search
            " Usage:
            " - :AreaSearch hello math world
            " - ,,n -- jump to next area matching the query.
    " }}}

    " [ comment ] {{{
        " commentary {{{
        " \\{motion}, \\\, {Visual}\\ ==> comment
        " \\u ==> uncomment
        " }}}

        " tComment {{{ An extensible & universal comment plugin
            " also handles embedded filetypes.
                " Usage:
                "   - gc{motion}    :: toggle comments.
                "   - gcc           :: toggle comment for current line.
                "   - gC{motion}    :: Comment region.
                "   - gCc           :: Comment the current line.
                "   - <C-_>...      :: :TComment ...
                "   - <Leader>...   :: :TComment ...
                "   - :[range]TComment[!] ?ARGS
                "   - :[range]TCommentAs[!] [commenttype] ?ARGS
                " tcomment#DefineType() to override defualt choice.
            let g:tcommentMapLeader1 = '<c-_>'
            let g:tcommentMapLeader2 = '<Leader>_'
            let g:tcommentMapLeaderOp1 = 'gc'
            let g:tcommentMapLeaderOp2 = 'gC'
            let g:tcommentBlankLines = 1 " comment blank lines too.
            let g:tcommentOpModeExtra = '' " '>' move cursor to end of comment
            let g:tcommentOptions = {}
            let g:tcomment#ignore_char_type = 1
            let g:tcommentGuessFileType = 1 " default: 0
            let g:tcommentGuessFileType_dsl = 'xml'
            let g:tcommentGuessFileType_php = 'html'
            let g:tcommentGuessFileType_html = 1
            let g:tcommentGuessFileType_tskeleton = 1
            let g:tcommentGuessFileType_vim = 1
            let g:tcommentGuessFileType_django = 1
            let g:tcommentIgnoreTypes_php = 'sql'
            "let g:tcomment#syntax_substitute = {}
            "let g:tcommentSyntaxMap = {}
            "let g:tcomment#replacements_c = {}
            "let g:tcommentBlockC = {}
            "let g:tcommentBlockC2 = {}
            "let g:tcommentInlineC = g:tcommentLineC
            "let g:tcommentBlockXML = "<!--%s-->\n  "
            "let g:tcommentInlineXML = "<!-- %s -->"
            "let g:tcomment_types {}
        " }}}

        " Nerd Commenter {{{ \cc >> \cu >> \cs >> \cn >> \c$ >> \c<space>
            " \cc: Comment, \cu: Uncomment, \cs, Sexily Comment.
            " \cn: Nested, \c<space>: Toggle, \cm: Minimal, \ci: Invert,
            " \c$: EOL, \cy: "y", \cA: "A", \cI: "I", \ca: Alternative delimiters,
            " let loaded_nerd_comments=1 " turn off this script.
        " }}}

        " vim-addon-commenting {{{ features: ( fork from commentary.vim )
            " - \ for commenting and uncommenting using selection or movement
            " - pays attention col of cursor so that you can indent at col 0 or
            "   indentation level
            " - n\\ comment n lines - prefer simple comemnts (// in C/C++ case)
            "   without configuration
            " work for repeat.vim
            " https://github.com/MarcWeber/vim-addon-commenting
            "let g:vim_addon_commenting = {'force_filetype_comments':
                        "\ {'php': ['#',''], 'c' : ['/*','*/']} }
        " }}}
    " }}}

    " [ doc & help "K" ] {{{
        " Viewdoc {{{ Flexible viewer for any documentation (vim help/man/perl/python)
            " support python dot operator help.
            " e.g. module.fun|<K>ction(args)
            " TODO more customize
            " Usage:
                " - <K>/<F1>, <C-]>/<C-T>, <CR>/<BS>(tag navigation),
                "   q (close), <Tab> completion.
                " - :doc[!] {topic} [{filetype}]
                " - :doc[!] <cword> [{filetype}]
                " - :ViewDoc, :man, :ViewDocMan, :help, :ViewDocHelp,
                "   :perldoc, :ViewDocPerl.
                " - e.g. :ViewDoc string.split in Python filetype.
            let g:viewdoc_open = "topleft new" " tabnew, topleft new, belowright vnew
            let g:viewdoc_only = 0 " :only, hide all other window only keep doc window.
            let g:viewdoc_prevtabonclose = 1
            let g:viewdoc_openempty = 0 " do not open anything if not found tag.
            let g:viewdoc_dontswitch = 0 " immaculately switch to opened document.
            let g:viewdoc_man_cmd = "/usr/bin/man"
            let g:ViewDoc_DEFAULT = 'ViewDoc_man' " ViewDoc_man, ViewDoc_help

            " customize {{{ TODO add other doc like HTML5, CSS3, JavaScript. Go,
            " Dart, Lisp, muttrc, fvwm,
            " Functions:
                " - ViewDoc({target}, {topic}, {filetype})
                " - ViewDoc({target}, {topic})
                " - ViewDoc({target}, <cword>, {filetype})
                " - ViewDoc({target}, <cword>)
            " Handlers:
                " to add documentation handler for new {filetype}, it's enough
                " to create on function in ~/.vimrc (or some plugin):
                " ViewDoc_{filetype}({topic}/<cword>, {filetype}, synid, have_context)
                    " synid = Syntax id for requested topic as returned by synID().
                    " Can be non-zero only if |:ViewDoc| was called with <cword>.
                    " have_context : true if we've context.
                    " The function return Dictionary with these keys. (all optional)
                    " 'topic', 'cmd', 'ft', 'line', 'col', 'search', 'tags', 'docft'.

            " function ViewDoc_pydoc(topic, ...)
            "     return  { 'cmd':	printf('pydoc %s', shellescape(a:topic,1)),
            "                 \ 'ft':	'pydoc',
            "                 \ }
            " endfunction
            " let g:ViewDoc_pydoc  = function('ViewDoc_pydoc')
            " let g:ViewDoc_python = function('ViewDoc_pydoc')

            " help_custom ~/.vim/ftdoc/{filetype}
            autocmd VimEnter * let g:ViewDoc_cmake = function('ViewDoc_help_custom')
            " }}}
        " }}}

        " Manuals {{{ An extensible help system
        " }}}
    " }}}

    " [ syntax checker ] {{{
        " Syntastic2 {{{
        " }}}

        " Syntastic {{{ :w saving to check. or daemon automatic check.
            " Commands: :Errors, :SyntasticToggleMode, :SyntasticCheck,
            let g:syntastic_check_on_open = 0 " check when buffers first loaded/save
            let g:syntastic_echo_current_error = 1 " error associated with lines
            let g:syntastic_enable_signs = 1 " :sign interface to mark syntax errors
            let g:syntastic_error_symbol = '✗'
            let g:syntastic_style_error_symbol = 'S✗'
            let g:syntastic_warning_symbol = '⚠'
            let g:syntastic_style_warning_symbol = 'S⚠'
            let g:syntastic_enable_balloons = 1 " mouse hover, need '+balloon_eval'
            let g:syntastic_enable_highlighting = 1 " syntax highlighting to mark errors
            let g:syntastic_auto_jump = 0 " jump to first detected error
            let g:syntastic_auto_loc_list = 2 " 0/1/2: auto open/close error window
            let g:syntastic_loc_list_height = 10
                " fine tune when automatic syntax checking is done.
            let g:syntastic_mode_map = {
                        \ "mode": "active",
                        \ "active_filetypes":
                            \ ['ruby', 'python', 'php', 'c', 'go', 'javascript', 'tex',],
                        \ "passive_filetypes":
                            \ ['html'],
                        \ }
            let g:syntastic_quiet_warnings = 0 " 1: care syntax errors not warning
            let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
            let g:syntastic_csslint_options = "--warning=none"
            " let g:syntastic_c_compiler
        " }}}

        " checksyntax {{{
        " }}}

        " flymake {{{ on-the-fly syntax checking using external syntax checking tool.
            " autocmd BufWritePost <buffer> call FlyMake({checker}, {err-regexp}, {warn-regexp})
            " autocmd BufWinLeave <buffer>  call FlyMakeCloseWindows()
        " }}}
    " }}}

    " [ Debugger ] {{{
        " Vdebug : Multi-language DBGP protocol debugger client for Vim.

        " VimDebug : Integrate your debugger with Vim.

        " GdbFromVim {{{ debug your applications with gdb from Vim.
            " let g:gdb_from_vim_app = 'applications'
            " let g:gdb_from_vim_args = 'arguments'
        " }}}

        " gdbmgr {{{ Vim interface to gdb.
        " }}}
    " }}}

    " [ Compiler ] {{{ <F10>
        " SingleCompile {{{ F10 compile&run
            " :SCChooseCompiler, :SCViewResult, :SCCompileRunAsync
            let g:SingleCompile_alwayscompile = 1 " =0 to disable it.
            let g:SingleCompile_asyncrunmode = 'auto' " mode: auto, none, python,
            let g:SingleCompile_autowrite = 1 " save file when compile.
            let g:SingleCompile_usequickfix = 1 " use QuickFix.
            let g:SingleCompile_menumode = 2 " 0 don't show menu, 1 sub menu, 2 menu bar
            let g:SingleCompile_resultheight = 10
            let g:SingleCompile_showquickfixiferror = 1 " auto show error.
            let g:SingleCompile_showresultafterrun = 0 " show result even no error
            let g:SingleCompile_usedialog = 1 " show dialog
            call SingleCompile#ChooseCompiler('python', 'python3')
            call SingleCompile#ChooseCompiler('sh', 'bash')
            call SingleCompile#ChooseCompiler('bash', 'bash')
            call SingleCompile#ChooseCompiler('zsh', 'zsh')
            call SingleCompile#ChooseCompiler('c', 'gcc')
            call SingleCompile#ChooseCompiler('cpp', 'g++')
            call SingleCompile#ChooseCompiler('html', 'firefox')
            call SingleCompile#ChooseCompiler('javascript', 'node.js')

            nnoremap <F10> :SCCompileRun<cr>
        " }}}
    " }}}

    " [ quickfix & location list ] {{{
        " quickfixsigns {{{ mark quickfix & location list items with signs.
            let g:quickfixsigns_classes = (['qfl', 'loc', 'marks', 'breakpoints',
                        \ 'vcsdiff' ])
            let g:quickfixsigns_events = (['BufEnter', 'BufLeave',
                        \ 'CursorHold', 'CursorHoldI',
                        \ 'InsertLeave', 'InsertEnter', 'InsertChange'])
            let g:quickfixsigns_class_vcsdiff = {
                        \ 'sign': '*quickfixsigns#vcsdiff#Signs',
                        \ 'get': 'quickfixsigns#vcsdiff#GetList(%s)',
                        \ 'event': [ 'BufEnter', 'BufLeave', 'BufWritePost'],
                        \ 'level': 6,
                        \ }
            let g:quickfixsigns_balloon = 1
            let g:quickfixsigns_max = 500 " don't display signs if longer than this.
            let g:quickfixsigns_blacklist_buffer = '^\(__.*__\|NERD_tree_.*\|-MiniBufExplorer-\)$'
            let g:quickfixsigns_icons = {}
            let g:quickfixsigns#vcsdiff#guess_type = 1
            let g:quickfixsigns#vcsdiff#highlight = {'DEL': 'DiffDelete',
                        \ 'ADD': 'DiffAdd', 'CHANGE': 'DiffChange'}
        " }}}

        " svndiff%1881 {{{ similar with quickfixsigns. colored signs for diff.
        " }}}

        " Unimpaired {{{ provides several pairs of bracket maps.
            " [, ],
            " a: , b: :b, l: :l, q: :c, t: tag.
            " o: alphabetically, n: SCM conflict marker.
            " <space>: add count blank lines. e: exchange current with.
            " encoding & decoding
        " }}}

        " sharefix {{{ sharefix addresses the pain point of your quickfix list
        " being wiped out between running different commands or functions that
        " update the list.
        " }}}
    " }}}

    " [ VCS: Git, bzr, svn, ] {{{
        " fugitive {{{ Intuitive and Simple Git wrapper for Vim.

            " auto open quickfix window for :Ggrep.
            autocmd QuickFixCmdPost grep cwindow
        " }}}

        " gitv {{{ 'gitk clone' plugin for Vim as similar set of func as a repo viewer.
            " [Browser/File] mode
            " Usage:
            "   - :Gitv [args]
            "   - :Gitv! [args]
            "   - [range]Gitv! [args]
            " TODO how to enter Altering the range in command line ??
            "   - Altering the range (input search regex/string)
            nnoremap <F8> :Gitv<cr>
            let g:Gitv_CommitStep = &lines
            let g:Gitv_OpenHorizontal = 'auto' " 0: browser mode vertical split.
            let g:Gitv_GitExecutable = 'git'
            let g:Gitv_WipeAllOnClose = 0 " wipe all buffers when q to close.
            let g:Gitv_WrapLines = 0 " wrap long commit.
            let g:Gitv_TruncateCommitSubjects = 0
            let g:Gitv_OpenPreviewOnLaunch = 1 " launch preview window when open gitv
            let g:Gitv_PromptToDeleteMergeBranch = 0 " prompt delete branch when merge
            let g:Gitv_DoNotMapCtrlKey = 1

            " resize gitv window.
            " augroup MyGitv
            "     au!
            "     au WinEnter gitv-* resize 20
            "     " WinEnter, WinCreate -> two events.
            " augroup END
        " }}}

        " extradite {{{ A git commit log browser that extends fugitive.vim
            " :Extradite | :Extradite! -- vertical.
            " nnoremap <F8> :Extradite<cr>
            " let g:extradite_width = 60
            let g:extradite_showhash = 1 " show abbre commit hashes.
        " }}}

        " vim-github {{{ A vim plugin to access to Github.
            " Usage: :Github {feature} [arguments]
            " Function: github#connect({path} [, {param}] [, {raw}])
            " e.g. :edit github://issues/thinca/vim-github
            let g:github#user="NagatoPain"
            " let g:github#token=$GITHUB_TOKEN
            let g:github#curl_cmd="curl"
        " }}}

        " rhubarb {{{ fugitive extension for GitHub
            " Usage: i_CTRL-X_CTRL-O to complete when editing commit.
            " let g:github_user = '<user>'
            " let g:github_password = '<password>'
        " }}}

        " gf-diff : extend gf and other commands.
        " Usage: open code file in 'diff' output with 'gf'.

        " svndiff%1881 : show diff signs for svn/git.

        " [ conflict ] {{{
        " Splice  {{{ plugin for resolving conflicts during three-way merges.
            " setup in ~/.gitconfig
            let g:splice_debug = 0 " Splice is loaded only once.
            let g:splice_disable = 0 " Splice is enabled as usual.
            let g:splice_initial_diff_grid = 0 " the diff the grid mode starts in.
            let g:splice_initial_diff_loupe = 0
            let g:splice_initial_diff_compare = 0
            let g:splice_initial_diff_path = 0
            let g:splice_initial_layout_grid = 0 " grid mode layout 0
            let g:splice_initial_layout_loupe = 0 " single file
            let g:splice_initial_layout_compare = 0 " 0: vsplit, 1: hsplit
            let g:splice_initial_layout_path = 0 " 0,1,2,3,4
            let g:splice_initial_scrollbind_grid = 0
            let g:splice_initial_scrollbind_loupe = 0
            let g:splice_initial_scrollbind_compare = 0
            let g:splice_initial_scrollbind_path = 0
            let g:splice_initial_mode = "grid" " grid, loupe, compare, path
            let g:splice_prefix = "-"
            let g:splice_wrap = "None" " wrap, nowrap, None
        " }}}

        " ConflictDetection {{{ highlight markers >>>>>> <<<<<<< =========
            let g:ConflictDetection_WarnEvents = 'BufWritePost'
            " FIXME set statusline+=%!ConflictCheck()
            " set statusline+=%!g:ConflictDetection_AutoDetectEvents
            " set statusline+=%!g:ConflictDetection_WarnEvents
            " let g:ConflictDetection_AutoDetectEvents = ''
                " empty to disable auto detect
            " highlight def link conflictOurs                     guibg=Green
            " highlight def link conflictBase                     guibg=Brown
            " highlight def link conflictTheirs                   guibg=Red
            " highlight def link conflictSeparatorMarkerSymbol    guifg=Black
            " highlight def conflictOursMarker                    guifg=Green
            " highlight def conflictBaseMarker                    guifg=Brown
            " highlight def conflictTheirsMarker                  guifg=Red
        " }}}

        " ConflictMotions {{{ defines movement commands and text objects.
            " Usage:
            " ]z, [z on conflict marker.
            " ]x, [x next/previous start of a conflict.
            " To change the default motion mappings, use:
            let g:ConflictMotions_ConflictBeginMapping = 'x'
            let g:ConflictMotions_ConflictEndMapping = 'X'
            let g:ConflictMotions_MarkerMapping = 'z'
            " To change the default text object mappings, use:
            let g:ConflictMotions_ConflictMapping = 'x'
            let g:ConflictMotions_SectionMapping = 'z'
        " }}}
        " }}}

        " patchreview : allows easy single or multipatch code or diff reviews.
            " Usage:
            " - :DiffReview
            "   -- reviewing current changes in your workspace.
            " - :DiffReview git staged --no-color -U5
            "   -- reviewing staged git changes.
            " - :PatchReview some.patch
            "   -- reviewing a patch.
            " - :ReversePatchReview some.patch
            "   -- reviewing a previously applied patch.
    " }}}

    " [ FileManager ] {{{ F11
        " NerdTree {{{ <F11> :NERDTree [dir|bookmark-name]
            " let loaded_nerd_tree=1 " let vim can not load NERDTree.
            let NERDChristmasTree = 1 " colourful. =0 for more vanilla looking tree.
            let NERDTreeAutoCenter = 1 " default = 1.
            let NERDTreeAutoCenterThreshold = 3 " default = 3.
            let NERDTreeCaseSensitiveSort = 0 " default = 0.
            let NERDTreeChDirMode = 1 " 0/1/2
            let NERDTreeHighlightCursorline = 1 " highlight cursorline.
            let NERDTreeHijackNetrw = 1 " for :edit <dir> open 'secondary' NERD tree.
            let NERDTreeIgnore = ['\~$', '\.log', '\.pyo', '\.pyc', '\.swp', '\.bak', '\.git', '\.hg']
            let NERDTreeBookmarksFile="$HOME/.vim/NERDTreeBookmarks"
            let NERDTreeQuitOnOpen = 0 " does not close after open. default=0.
            let NERDTreeShowBookmarks = 1 " show Bookmarks when open NERD-tree.
            let NERDTreeShowHidden = 0 " does not show hidden files.
            let NERDTreeShowLineNumbers = 0 " do not show line numbers, default=0
            let NERDTreeWinPos = "left" " NERD-tree window position.
            let NERDTreeWinSize = 20 " window size, default=31.
            "let NERDTreeDirArrows =
            "new own syntax highlight gnap.
            "let NERDTreeMinimalUI =
            nnoremap <silent> <F11> :NERDTreeToggle<CR>
        " }}}

        " vim-nerdtree_plugin_collections {{{
        " }}}

        " vimfiler {{{ Powerful file explorer implemented by VimL.
            " Usage: :VimFiler
            " Require: unite.vim
            let g:vimfiler_as_default_explorer = 1 " behaves as netrw
        " }}}
    " }}}

    " [ buffers ] {{{
        " Tagma_Buffer_Manager {{{
            " h/<Tab> , l/<S-Tab>. <Cr>/o S/s V/v Ctrl-[hjkl]
            " :MgrToggle :help TagmaBufMgr
            let g:TagmaBufMgrAutoDisplay = 1 " =0 to disable autodisplay.
            let g:TagmaBufMgrBufferNumbers = 1 " buffer number
            let g:TagmaBufMgrCloseSelect = 0 " close buffer when selected.
            let g:TagmaBufMgrLastWindow = 1 " default =0.
            let g:TagmaBufMgrLocation = 'T' " Top, Bottom, Left, Right, Float
            let g:TagmaBufMgrMapCArrow = 1 " Ctrl-Arrow
            let g:TagmaBufMgrMapChjkl = 0 " Ctrl-[hjkl] to nav buffers.
            let g:TagmaBufMgrPrefix = '<Leader>tb' " prefix for all commands.
            let g:TagmaBufMgrPopUp = 1 " Right-Click PopUp menu
            let g:TagmaBufMgrWidth = 25 " when at the Left or Right.
            let g:TagmaBufMgrLastLine = 0 " Display Manager Window on last line
        " }}}

        " minibufexplorer {{{
            let g:miniBufExplSplitBelow = 0  " position at bottom or top.
            let g:miniBufExplSplitToEdge = 1 " force MBR to open at the edge of screen
            let g:miniBufExplorerMoreThanOne = 1 " open when more than one.
            let g:miniBufExplMapWindowNavVim = 1 " Ctrl + h/j/k/l
            let g:miniBufExplMapWindowNavArrows = 0 " Ctrl + Arrow keys
            let g:miniBufExplMapCTabSwitchBufs = 1 " <C-TAB> and <C-S-TAB>
            let g:miniBufExplMapCTabSwitchWindows = 0 " <C-TAB> and <C-S-TAB>
            let g:miniBufExplUseSingleClick = 1 " single click or tabs.
            let g:miniBufExplModSelTarget = 1 " if use other explorer like TagList.
            let g:miniBufExplCloseOnSelect = 0 " close after select buffer.
            let g:miniBufExplCheckDupeBufs = 0 " when >15 buffers
            let g:miniBufExplShowBufNumbers = 1 " show buffer number, 0 to omit them
            " let g:miniBufExplForceSyntaxEnable = 1 " conflict with Powerline.
            let g:miniBufExplorerDebugLevel = 0  " MBE serious errors output. [0/4/10]
            let g:miniBufExplorerDebugMode  = 1  " Uses VIM's echo function
            let g:miniBufExplMaxSize = 0
            let g:miniBufExplMinSize = 1
            " Vertical mode
            " let g:miniBufExplVSplit = 20   " column width in chars in virtical.
            " let g:miniBufExplMaxSize = <max width: default 0>
            " let g:miniBufExplMinSize = <min width: default 1>
            " MiniBufExpl Colors
            hi MBEVisibleActive guifg=#A6DB29 guibg=fg
            hi MBEVisibleChangedActive guifg=#F1266F guibg=fg
            hi MBEVisibleChanged guifg=#F1266F guibg=fg
            hi MBEVisibleNormal guifg=#5DC2D6 guibg=fg
            hi MBEChanged guifg=#CD5907 guibg=fg
            hi MBENormal guifg=#808080 guibg=fg
        " }}}

        " LustyJuggler {{{ <Leader>lj
            "set hidden
        " }}}

        " Tabman {{{ <Leader>tm, :TMToogle, || ? [count] <cr> e x b t o O l h <Tab> r
            let g:loaded_tabman = 0 " set 1 to disable plugin completely
            let g:tabman_toggle = '<leader>tm'
            let g:tabman_width = 25
            let g:tabman_side = 'left'
            let g:tabman_specials = 0 " show help and quickfix window created by plugin
            let g:tabman_number = 0 " disable line number in TabMan
        " }}}
    " }}}

    " [ Tools ] {{{
        let g:TasksListTokens = ['FIXME', 'TODO', 'BUG', 'ISSUE', 'ERROR', 'XXX',]

        " TagmaTasks {{{
            " :TagmaTasks [*.pl|*|**/*], :TagmaTasksMarks
            " :TagmaTasksClear, :TagmaTasksToggle
            " \tt, \tc, \tm, \tw. => [t, ]t, [T, ]T.
            let g:TagmaTasksAutoUpdate = 1
            let g:TagmaTasksHeight = 10
            let g:TagmaTasksIdleUpdate = 0
            let g:TagmaTasksJumpTask = 1
            let g:TagmaTasksJumpKeys = 1
            let g:TagmaTasksMarks = 1
            let g:TagmaTasksOpen = 1
            let g:TagmaTasksPrefix = '<Leader>t'
            let g:TagmaTasksTokens = g:TasksListTokens
        " }}}

        " TaskList {{{ \tl ( \t map conflict with CommandT.vim )
            map <Leader>tl <Plug>TaskList
            let g:tlWindowPosition = 1 " 1: bottom, 0: top.
            let g:tlRememberPosition = 1
            let g:tlTokenList = g:TasksListTokens
        " }}}

        " endwise : end certain structures automatically. if, do, def ...

        " Rainbow_Parentheses_Improved {{{ show parentheses in different color
            " Usage: :RainbowToggle, rainbow#toggle()
            " au syntax * call rainbow#load([
            "             \ ['(',')'],['\[','\]'],['{','}'],
            "             \ ['begin','end'],
            "             \ ])
            au syntax * call rainbow#activate()
        " }}}

        " switch {{{ swap a pattern and substition.
        " }}}

        " SwapIt {{{ <C-A>, <C-X>
            " to integrate with other incrementor scripts (such as speeddating.vim)
            " to the keys that be invoked when swapit doesn't have a proper option
            nmap <Plug>SwapItFallbackIncrement <Plug>SpeedDatingUp
            nmap <Plug>SwapItFallbackDecrement <Plug>SpeedDatingDown
            " Multi word Swaps
            " Filetype Swaps
            " OmniCompletion Swaps
            let b:swap_completefunc = 'cssswapit#CssSwapComplete'
        " }}}

        " AuthorInfo {{{ Insert Author Info with :AuthorInfoDetect
            "noremap <Leader>ai <Esc>:AuthorInfoDetect<CR>
            let g:vimrc_author = 'stardiviner'
            let g:vimrc_email = 'numbchild@gmail.com'
            " let g:vimrc_homepage = ''
        " }}}

        " license_loader {{{ a vim script to load a license template.
            " Usage: :call LoadMyLicense('apache')
            " license template in template/license/*
            let g:T_AUTHOR = "stardiviner"
            let g:T_AUTHOR_EMAIL = "numbchild@gmail.com"
            let g:T_DATE_FORMAT = "%c"
            "nnoremap <C-j> /<+.\{-1,}+><CR>c/+>/e<CR>
            "inoremap <C-j> <ESC>/<+.\{-1,}+><CR>c/+>/e<CR>
        " }}}
    " }}}
" }}}

" [ languages ] {{{
    " [ Python ] {{{
        " if has('python3/dyn') || has('python/dyn')
        "             \ || has('python3') || has('python')
        " endif

        " [ IDE ] {{{
            " Python-mode-klen {{{ Python IDE.
                " K: doc <C-space>: Rope autocomp
                " <Leader>r: run <Leader>b: set/unset breakpoint.
                " pylint, rope, pydoc  :help Python-mode-contents Show documentation
                    " key <-> command {{{
                    " [[      jump on previous  class or function.
                    " ]]      jump on next class or function.
                    " [m      jump on previous class or method.
                    " ]m      jump on next class or method.
                    " ac      select a class. Ex: vac, dac, yac, cac.
                    " ic      select inner class. Ex: vic, dic, yic, cic.
                    " am      select a function or method. Ex: vam, dam, yam, cam.
                    " im      select inner function or method. Ex: vim, dim, yim, cim.
                    " }}}
                let g:pymode_doc = 1 " Load show documentation plugin
                let g:pymode_doc_key = 'K' " Key for show python documentation
                let g:pydoc = 'pydoc' " Executable command for documentation search
                " Run python code
                let g:pymode_run = 1 " Load run code plugin
                let g:pymode_run_key = '<LocalLeader>r' " Key for run python code
                " Pylint checking
                let g:pymode_lint = 1 " Load pylint code plugin
                let g:pymode_lint_checker = "pylint" " pylint, pyflakes or PEP8
                let g:pymode_lint_config = "$HOME/.pylintrc" " Pylint configuration file
                let g:pymode_lint_write = 1 " Check code every save
                let g:pymode_lint_cwindow = 1 " Auto open cwindow if errors be finded
                let g:pymode_lint_jump = 1 " Auto jump on first error
                let g:pymode_lint_signs = 1 " Place error signs
                let g:pymode_lint_minheight = 3 " Minimal height of pylint error window
                let g:pymode_lint_maxheight = 6 " Maximal height of pylint error window
                " Rope refactoring library
                let g:pymode_rope = 1 " Load rope plugin
                let g:pymode_rope_auto_project = 1 " Auto create and open ropeproject
                let g:pymode_rope_enable_autoimport = 1 " Enable autoimport
                let g:pymode_rope_autoimport_generate = 1 " Auto generate global cache
                let g:pymode_rope_autoimport_underlineds = 0
                let g:pymode_rope_codeassist_maxfixes = 10
                let g:pymode_rope_sorted_completions = 1
                let g:pymode_rope_extended_complete = 1
                let g:pymode_rope_autoimport_modules = ["os","shutil","datetime"]
                let g:pymode_rope_confirm_saving = 1
                let g:pymode_rope_global_prefix = "<C-x>p"
                let g:pymode_rope_local_prefix = "<C-c>r"
                let g:pymode_rope_vim_completion = 1 " use vim's complete function.
                let g:pymode_rope_guess_project = 0 " scan project slow completion speed
                let g:pymode_rope_goto_def_newwin = 1
                let g:pymode_rope_always_show_complete_menu = 1 " default=0
                " Other stuff
                let g:pymode_breakpoint = 1 " Load breakpoints plugin
                let g:pymode_breakpoint_key = '<LocalLeader>b' " set/unset breakpoint
                let g:pymode_utils_whitespaces = 1 " Autoremove unused whitespaces
                let g:pymode_options_indent = 1 " default pymode python indent options
                let g:pymode_options_fold = 1 " Set default pymode python fold options
                let g:pymode_options_other = 1 " Set default pymode python other options
                " utils
                let g:pymode_utils = 1 " utils script
                let g:pymode_utils_whitespaces = 1 " autoremove unused whitespaces
                " virtualenv
                let g:pymode_virtualenv = 1 " virtualenv support
                " syntax
                let g:pymode_syntax = 1 " use custom syntax highlighting
                let g:pymode_syntax_builtin_objs = 1
                let g:pymode_syntax_builtin_funcs = 1
                " indent
                let g:pymode_options_indent = 1
                " fold
                let g:pymode_options_fold = 1
                " others
                let g:pymode_options_other = 1
                " PyLintWindowToggle command
                " motion
                let g:pymode_motion = 1 " pymode enable some python motions.
            " }}}
        " }}}

        " [ complete ] {{{
        " }}}

        " [ help ] {{{
            " vim-pyref {{{ python and lib refence, django document,
                " "F1" only work in python buffer.
                " let g:pyref_mapping = 'K'
                "let g:pyref_python = '/usr/share/doc/python2.7/html/'
                "let g:pyref_django = '/usr/share/doc/python-django-doc/html/'
            " }}}
        " }}}

        " [ debug ] {{{
            " pyflakes & pylint {{{ check when saving file.
            "function! Pyflakes()
                "let tmpfile = tempname()
                "execute "w" tmpfile
                "execute "set makeprg=(pyflakes\\ " . tmpfile . "\\\\\\|sed\\ s@" . tmpfile ."@%@)"
                "make
                "cw
            "endfunction
            "autocmd BufWrite *.{py} :call Pyflakes()

            "function! Pylint()
                "setlocal makeprg=(echo\ '[%]';\ pylint\ %)
                "setlocal efm=%+P[%f],%t:\ %#%l:%m
                "silent make
                "cwindow
            "endfunction
            "autocmd BufWrite *.{py} :call Pylint()
            " }}}

            " pytest {{{ A simple way of running your tests from within VIM.
            " }}}
        " }}}

        " [ indent & syntax & fold ] {{{
            " SimpylFold
                " correct fold for python class/function indent.
                let g:SimpylFold_docstring_preview = 1

            " ~/.vim/syntax/python[3.0].vim {{{
                "    If you want all Python highlightings above:
                let g:python_highlight_all = 1
                "    (This option not override previously set options)
                ""    For highlight builtin functions:
                "let g:python_highlight_builtins = 1
                ""    For highlight builtin objects:
                "let g:python_highlight_builtin_objs = 1
                ""    For highlight builtin funtions:
                "let g:python_highlight_builtin_funcs = 1
                ""    For highlight standard exceptions:
                "let g:python_highlight_exceptions = 1
                ""    For highlight string formatting:
                "let g:python_highlight_string_formatting = 1
                ""    For highlight str.format syntax:
                "let g:python_highlight_string_format = 1
                ""    For highlight string.Template syntax:
                "let g:python_highlight_string_templates = 1
                ""    For highlight indentation errors:
                "let g:python_highlight_indent_errors = 1
                ""    For highlight trailing spaces:
                "let g:python_highlight_space_errors = 1
                ""    For highlight doc-tests:
                "let g:python_highlight_doctests = 1
                "    For fast machines:
                "       python_slow_sync
                " }}}

            " python_match.vim
                " %, g%, [%, ]%, d]%, v]%d,
                " cycle through:
                " if/elif/else, try/except/catch,
                " for/continue/break, while/continue/break,
        " }}}

        " [ virtualenv ] {{{
            " virtualenv {{{ Python virtualenv for Vim.
                " Usage:
                " statusline: %{virtualenv#statusline()}
                " Commands:
                " :VirtualEnvList
                " :VirtualEnvDeactivate
                " :VirtualEnvActivate <Tab> [name]
                let g:virtualenv_directory = "~/.virtualenvs"
                let g:virtualenv_auto_activate = 1
                let g:virtualenv_stl_format = '[%n]'
            " }}}

            " vim-python-virtualenv {{{
            " }}}
        " }}}

        " [ other: open & jump, module ] {{{
            " Vimpy%3752 {{{ helps in Navigating through Python code easy.
                "<leader>om : Open Module. Go to a module with a given name.
                "<leader>oc : Open Class. Go to a class with a given name.
                "<leader>of : Open Function. Go to a funtion with a given name.
                "<leader>gm : Goto Module given by word under cursor (Eg. use
                "this to navigate to a module under an 'import' statement).
                "<leader>gc : Goto Class given by word under cursor.
                "<leader>gf : Goto Function given by word under cursor.
            " }}}

            " python_open_module : open the python module on cursor
                " FIXME cannot open module like from .module import text,
                " or from kk.jj import text.
                let g:pom_key_open='<LocalLeader>oo' " open module in the current window
                let g:pom_key_open_in_win='<LocalLeader>ow' " open module in a new window
                let g:pom_key_open_in_tab='<LocalLeader>ot' " open module in a tab
        " }}}

        " [ REPL ] {{{
            " vim-pipe {{{ provides REPL-like development for other shell tools
                " For example you can instantly send an SQL script to the
                " database and see the results in a temporary buffer.
            " }}}

            " PyREPL.vim {{{ Provide a way to run python REPL inside buffer.
                " Usage: :PyREPLToogle or \r to toggle the REPL on or off.
            " }}}
        " }}}

        " selfdot lets you type 'self.' by pressing '.' in Python files.

        " [ Django ] {{{
            " vim-django-support {{{ Django omni completion.
            " }}}

            " vim-htmldjango_omnicomplete {{{ htmldjango ft OmniCompletion
                " Usage:
                "   Filters:
                "   {{ somevar|a<c-x><c-o>}} complete 'add', 'addslashes'
                "   Tags:
                "   {% cy<c-x><x-o> %} should complete 'cycle'
                "   Load Statements:
                "   It also should grab any libs you have {% load tag_lib %} in
                "   the file. Although it needs them in INSTALLED_APPS.
                "   {% load <c-x><c-o> %} will complete libraries (eg. 'cache',
                "   'humanize')
                "   Template Filenames:
                "   {% extends '<c-x><c-o>' %} will list base.html ... etc
                "   URL Complete:
                "   {% url <c-x><c-o> %} should complete views and named urls
                "   Super Block Complete:
                "   {% block c<c-x><c-o> %} to complete 'content' or something
                "   defined in an extended template.
                "   Optional Variable Name Completion: (placeholder)
                "   {{ s<c-x><x-o> }} will complete any maps defined in the
                "   python htmldjango_opts['variable'] dict list.
                au FileType htmldjango
                        \ set omnifunc=htmldjangocomplete#CompleteDjango
                let g:htmldjangocomplete_html_flavour = 'html5'
                    " html5,html401s,html401t,....
                " :verbose function htmlcomplete#CheckDoctype
                    " for DocType details
                " Testing:
                " django needs to be in sys.path along with
                " DJANGO_SETTINGS_MODULE in your environment.
                " :python import django
                " :python from django.conf import settings; print settings.INSTALLED_APPS
                " :python from django.conf import settings; print settings.TEMPLATE_DIRS
                " should show the apps template dirs you need.
            " }}}

            " vim-django {{{ Django vim wraps the manage.py.
                " Usage:
                "   - DjangoAdmin
                "   - DjangoManage
                "   - DjangoProjectActivate
                " let g:django_projects = "$HOME/Projects"
                " let g:django_apps =
            " }}}
        " }}}
    " }}}

    " [ Ruby ] {{{
        let ruby_operators = 1 " highlight operations
        let ruby_space_errors = 1 " highlight space errors
        let ruby_fold = 1
        "let ruby_no_comment_fold = 1

        " vim-ruby {{{
            " https://github.com/vim-ruby/vim-ruby
            " https://github.com/MarcWeber/vim-ruby

            " autocmd FileType ruby compiler ruby

            " syntax
            let ruby_no_expensive = 1 " smart end color etc
            let ruby_operators = 1 " highlight operators
            let ruby_space_errors = 0 " highlight whitespace erros
                " disable this, because use other script

            " completion CTRL-X CTRL-O
                " Ruby completion will parse your buffer on demand in order to
                " provide a list of completions.
            let g:rubycomplete_buffer_loading = 0 " this will cause some code execute
            let g:rubycomplete_classes_in_global = 1
            let g:rubycomplete_rails = 1
        " }}}

        " neco-rubymf {{{ a neocomplcache plugin to integrate methodfinder
            " Requires:
            "   - Ruby 1.9.3
            "   - gem install methodfinder
        " }}}

        " rails {{{ Ruby on Rails
            " easy file navigation, enhanced syntax highlighting, and more
        " }}}

        " RbREPL {{{ Rub a Ruby REPL in Vim.
        " }}}
    " }}}

    " [ Lisp ] {{{
        " Slimv {{{ Super Lisp Interaction Mode for Vim. ("SLIME for Vim")
        " }}}

        " paredit {{{ performs Structured Editing of Lisp S-expressions in Vim.
            " similar to paredit.el for Emacs.
            " paredit.vim is a part of Slimv.vim
            " let g:paredit_loaded = 0
            let g:paredit_electric_return = 0 " electric return feature
            " let g:paredit_leader = '\'
            let g:paredit_matchlines = 100
            let g:paredit_mode = 1
            let g:paredit_shortmaps = 1 " <, >, J, O, W, S.
        " }}}

        " Lisper {{{ Yet Another Lisp Engine Written In Pure VimScript
            " Usage:
            " - call lisper#eval() to evaluate expression.
            " - let engine = lisper#engine() ; echo engine.eval()
            " - Repl for Lisp -> :LisperRepl -> lisp>
        " }}}
    " }}}

    " [ Shell ] {{{
        " vim shell settings :
            let g:is_sh = 1 " default: Bourne shell.
            let g:sh_fold_enabled = 3 " 1: function, 2: heredoc, 4: if/do/for
            let sh_minlines = 200
            "let sh_maxlines = 100
            " iskeyword:
            "let g:sh_isk =
            "let g:sh_noisk = 1

        " bash-support {{{ Bash Support implements a bash-IDE for Vim/gVim.
        " }}}
    " }}}

    " [ VimL ] {{{
        let g:vimsyn_embed = "mpPr" " embed script highlight: perl,python,ruby,tcl
        let g:vimsyn_folding = 'afmpPr' " augroup, function, perl, python, ruby
        let g:vimsyn_noerror = 1 " suppress error highlighting.

        " Vim-Support {{{ Vim Script IDE for Vim/gVim.
            " :h vimsupport.
        " }}}

        " vesting {{{ vimscript test framework.
        " }}}

        " runVimTests {{{ A testing framework for Vim.
        " }}}

        " Self {{{ Vim prototype object system.
        " }}}
    " }}}

    " [ SQL ] {{{
        " :h ft_sql.txt,
            let msql_sql_query = 1 " like SQL highlighting inside Strings.
            let msql_minlines = 200 " for syncing, minlines defaults to 100.
        let g:sql_type_default = 'mysql' " or 'sqlanywhere'

            " [ OmniCompletion SQL static/dynamic ] {{{ :help ft-sql-omni
                " [ static mode ] {{{
                " All, Statement, Functions, Keywords, Options, Types.
                let g:ftplugin_sql_omni_key = '<C-C>'
                imap <buffer> <C-C>a <C-\><C-O>:call sqlcomplete#Map('syntax')<CR><C-X><C-O>
                imap <buffer> <C-C>k <C-\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>
                imap <buffer> <C-C>f <C-\><C-O>:call sqlcomplete#Map('sqlFunction')<CR><C-X><C-O>
                imap <buffer> <C-C>o <C-\><C-O>:call sqlcomplete#Map('sqlOption')<CR><C-X><C-O>
                imap <buffer> <C-C>T <C-\><C-O>:call sqlcomplete#Map('sqlType')<CR><C-X><C-O>
                imap <buffer> <C-C>s <C-\><C-O>:call sqlcomplete#Map('sqlStatement')<CR><C-X><C-O>
                " }}}

                " [ dynamic mode ] {{{
                "       Table List, Procedure List, View List, Column List.
                " <C-C>     t           p               v       c
                " Require: dbext.vim
                    " Drilling In / Out: replace column <-> table when viewing popup window.
                let g:ftplugin_sql_omni_key_right = '<Right>'
                let g:ftplugin_sql_omni_key_left  = '<Left>'
                imap <buffer> <C-C>R <C-\><C-O>:call sqlcomplete#Map('ResetCache')<CR><C-X><C-O>
                " }}}

            " Completion Customization
            " let omni_sql_no_default_maps = 1
            let omni_sql_ignorecase = 1
            let omni_sql_include_owner = 1
            let omni_sql_precache_syntax_groups = ['syntax', 'sqlKeyword', 'sqlFunction', 'sqlOption', 'sqlType', 'sqlStatement']
            " }}}

        " Dbext {{{ Database extension plugin.
            " \sbp -- SQL Buffer Prompt.
            " \se  -- SQL Execute
            " \sel -- SQL Execute Line
            " Visual(V) -- linewise-visual to execute.
        " }}}

        " VDBI {{{ Database client for Vim: browsing, operation, view.
            " :VDBI
            " viewer keys: q, <cr>, <leader>s/d/y,
            " query editor keys: q, <leader>e/r.
            " Datasource Viewer keys: q, <cr>
        " }}}

        " SQLUtilities: | Formatting, generate - columns lists, procedures for databases
            " [ functions ] {{{
            " automatically captilize all SQL keywords and statements.
        " }}}
    " }}}

    " [ Web: HTML5 & CSS ] {{{
        " [ HTML5 ] {{{
            " ZenCoding {{{ powerful abbreviation engine. "<C-Y>[,vn...]"
                " Usage: :verbose map <c-y>  --> to show all ZenCoding mappings.
                let g:user_zen_leader_key = '<c-y>' " prefix.
                " define tag's behavior.
                let g:user_zen_settings = {
                            \ 'lang': 'en',
                            \ 'html': {
                            \       'filters': 'html',
                            \       'indentation': ' ',
                            \   },
                            \  'php' : {
                            \    'extends' : 'html',
                            \    'filters' : 'html,c',
                            \   },
                            \  'css' : {
                            \    'filters' : 'fc',
                            \   },
                            \  'javascript' : {
                            \    'snippets' : {
                            \      'jq' : "$(function() {\n\t${cursor}${child}\n});",
                            \      'jq:each' : "$.each(arr, function(index, item)\n\t${child}\n});",
                            \      'fn' : "(function() {\n\t${cursor}\n})();",
                            \      'tm' : "setTimeout(function() {\n\t${cursor}\n}, 100);",
                            \       },
                            \   },
                            \ }
                let g:use_zen_complete_tag = 1 " complete tags with omnifunc.
            " }}}

            " Sparkup {{{ Sparkup lets you write HTML code faster.
            " }}}

            " MatchTag

            " HTML_AutoCloseTag

            " html5 {{{ HTML5 omnicomplete func and syntax for Vim.
                " based on the default htmlcomplete.vim.
                " Features:
                "   - Support all new elements and attributes.
                "   - Support microdata
                "   - Support RDFa.
                "   - Support WAI-ARIA.
                " TODO learn upper features reference can find link in script readme.
                " enable event-handler attributes support:
                let g:html5_event_handler_attributes_complete = 1
                " enable RDFa attributes support:
                let g:html5_rdfa_attributes_complete = 1
                " enable microdata attributes support:
                let g:html5_microdata_attributes_complete = 1
                " enable WAI-ARIA attribute support:
                let g:html5_aria_attributes_complete = 1
            " }}}

            " HTML5_Syntax_File : HTML5 syntax file.
        " }}}

        " [ CSS ] {{{
            " ~/.vim/after/syntax/css3.vim
            " au BufRead,BufNewFile *.css setlocal ft=css syntax=css3

            " Better_CSS_Syntax_for_Vim {{{
                " 1. Support most of HTML & CSS properties, including HTML5 & CSS3.
                " 2. Different highlight colors for properties, value, units and so on.
            " }}}

            " css3_mod

            " vim_less {{{ support for LESS CSS.
                " syntax highlight
                " indent support
                " compile the file.less to file.css if you have lessc installed
                " and echo any errors.
            " }}}

            " vim-less : syntax support for LESS CSS.
        " }}}
    " }}}

    " [ JavaScript ] {{{
        " jscomplete-vim {{{ vim omnifunc for JavaScript
            " [Optional extensions]
            " extension scripts under the 'autoload/js/' will be loaded with set
            " list to 'g:jscomplete_use' or 'b:jscomplete_use' in ~/.vimrc
            " dom: adding DOM keywords completion.
            " moz: Mozilla JavaScript keywords.
            " xpcom: Mozilla XPCOM component keywords.
            " es6th: ECMAScript keywords.
            let g:jscomplete_use = ['dom', 'moz', 'xpcom', 'es6th',]
            " :JSCompleteUse for loading jscomplete's extensions.
            " :JSCompleteUse [<pluginName>, ...]
            " show loaded and non-loaded extensions if omitted arguments
            "   + => loaded extensions.
            "   - => non-loaded extensions.
        " }}}

        " jsflakes%4057 {{{ powerful vim plugin lint javascript code on the fly.
            " Require: jsruntime, jsoncodecs.
            " :cl, clopen
            " :RunJS, :RunJS 1,2 -> run js from line 1 to line 2.
            " :RunHtml, :RunHtmlBlock 1,2
            "let g:jshint_rcfile = {PATH}
        " }}}

        " jsruntime {{{ javascript runtime library in vim.
            " Interpreter: PyV8, node, cscript, spiderMonkey.
            " let g:js_interpreter = 'pyv8'
        " }}}

        " jsoncodecs {{{ Dumps lines from vim to a valid JSON string.
        " }}}

        " jsbeautify : a javascript source code formatter
            " <Leader>ff -- Function g:Jsbeautify()
        " sourcebeautify : Beautify your source code, js, css, html.

        " javaScriptLint: Displays JavaScript Lint warnings in quickfix window

        " jshint.vim : JSHint Integration
            " jshint.vim facilitates tight integration between JSHint and Vim.
        " jslint.vim : Check JavaScript files for errors with JSLint
            " :JSLintUpdate
            let g:JSLintHighlightErrorLine = 1

        " jQuery : Syntax file for jQuery.
            au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
    " }}}

    " [ Dart ] {{{
        " Dart : Dart Lang Syntax for Vim.
    " }}}

    " [ Web App ] {{{
        " vim-brunch {{{ makes navigating your brunch projects comfortable
            " Brunch -> https://github.com/brunch/brunch.git
            " is a lightweight approach to building HTML5 applications
            " with emphasis on elegance and simplicity.
            let g:brunch_path_app = 'app' " the dir of the app folder.
            let g:brunch_path_test = 'test' " the dir of the test folder.
            let g:brunch_ext_script = 'js' " the extension for script files
            let g:brunch_ext_stylesheet = 'less' " the extension for stylesheets
            let g:brunch_ext_template = 'hbs' " the extension for templates
        " }}}
    " }}}

    " [ PHP ] {{{
        let php_sql_query = 1 " highlight SQL syntax in strings.
        let php_baselib = 1 " highlight Baselib methods.
        let php_htmlInStrings = 1 " HTML syntax highlight inside strings.
        let php_oldStyle = 1 " use the old colorstyle.
        let php_asp_tags = 1 " enable highlight ASP-style short tags.
        let php_noShortTags = 1 " disable short tags
        let php_parent_error_close = 1 " highlight parent error ] or )
        let php_parent_error_open = 1 " skip php end tag, if exists, open (, [
        let php_folding = 1 " folding for classes and functions.
        let php_sync_method = -1 " selecting syncing method. -1/0/>0

        " [ debugger ] {{{
            " DBGPavim {{{ enable PHP debug in vim with Xdebug.
                " Requires:
                "       - install xdebug for PHP.
                "       - and edit php.ini file.
                "           - zend_extension=path_to_xdebug.so
                "           - xdebug.remote_enable=1
                "       - edit apache config file.
                "           - php_value xdebug.remote_port 9009
                " Usage:
                " :Bl/:Bp => list all breakpoints, toggle breakpoint on current line.
                " - <F1>    => toggle help window.
                " - <F2>    => step into.
                " - <F3>    => step over
                " - <F4>    => step out
                " - <F5>    => start debugger backend.
                " - <F6>    => stop debugger backend.
                " - <F7>    => evalute expression and display result.
                " - <F9>    => toggle layout.
                " - <F11>   => show all variables.
                " - <F12>   => show variable on current cursor.
                " :Pg       => to print value of complex variables like $this->savings[3]
                " :Up       => goto upper level of stack
                " :Dn       => goto lower level of stack
                let g:dbgPavimBreakAtEntry = 0
                "let g:dbgPavimPathMap = [['D:/works/php','/var/www'],]
                let g:dbgPavimPort = 9009
            " }}}

            " Xdebug {{{ An awesome debugging client for Vim, Xdebug and PHP.
                " This is YET another version of the DBGP client script that
                " Seung Woo Shin created The reason I've added this as a new
                " script is because I've added enough new features to warrant
                " it.
            " }}}

            " vim-addon-xdebug  {{{
                " :XDbgStart
            " }}}
        " }}}

        " [ syntax checker ] {{{
            " phpqa {{{ Run PHP QA tools and show highlighted results.
                " This is a plugin for Vim that integrates PHP quality checking
                " tools, to allow you to code to a particular standard and
                " easily spot errors and violations.
            " }}}
            " PHPUnit_QF : Run PHPUnit tests from within vim and put the errors
            " into the quickfix list.
        " }}}

        " [ Integration ] {{{
            " PIV {{{ PHP Integration for Vim.
                " Usage:
                "   - K --> doc
            " }}}
        " }}}

        " [ completion ] {{{
            " phpcomplete {{{ Improved PHP omnicompletion.
            " }}}
        " }}}

        " [ Framework ] {{{
            " cakephp {{{ navigating, managing CakePHP applications with Vim
            " }}}
            " cake {{{ easy jumping between Controller, Model and View files
                " Usage:
                " specified the app directory of your CakePHP.
                " :CakePHP /path/to/cakephp_app/
                " Automatically perform at startup.
                let g:cakephp_enable_fix_mode = 1
                let g:cakephp_app = "/path/to/cakephp_app/"
                " When you find a project from open file automatically,
                " please set it as follows.
                let g:cakephp_enable_auto_mode = 1
            " }}}
        " }}}

        " pdv-standalone {{{ standalone version of phpDocumentor for Vim plugin.
            let g:pdv_cfg_Package = 'placeholder'
            let g:pdv_cfg_Version = '1.0.0'
            let g:pdv_cfg_Author = 'stardiviner <numbchild@gmail.com>'
            "let g:pdv_cfg_Copyright =
            "let g:pdv_cfg_License =
            let g:pdv_cfg_Type = "mixed"
            let g:pdv_cfg_Uses = 0
            let g:pdv_cfg_paste = 1
            let g:pdv_cfg_php4always = 0
            let g:pdv_cfg_php4guess = 1
            let g:pdv_cfg_php4guessval = "protected"
            let g:pdv_cfg_CommentHead = "/**"
            let g:pdv_cfg_Comment1 = " * "
            let g:pdv_cfg_Commentn = " * "
            let g:pdv_cfg_CommentTail = " */"
            let g:pdv_cfg_CommentSingle = "//"
        " }}}

        " [ Framework ] {{{
            " [ Drupal ] {{{
                " Drupal {{{ someone's Drupal work Vim settings, use Drush.
                    " Usage:
                    "  - :Hook -> Implement the named hook, where the cursor is.
                    "  - :EditDrupal
                    "  - :ResetVimDrupalCache
                " }}}
            " }}}

            " [ behat ] {{{
                " vim-behat
            " }}}
        " }}}
    " }}}

    " [ Go ] {{{
        " https://github.com/nsf/gocode.git | autocompletion daemon for Go Language.
    " }}}

    " [ C & C++ Dev Env ] {{{
        augroup CSettings
            au!
            au FileType c,cpp setlocal cindent
            au FileType c,cpp,java set matchpairs+==:;
        augroup END

        " neocomplcache-clang {{{ clang_complete for neocomplcache.
            " Require: clang_complete
                " clang.so, clang.dll, libclang.dylib
            let g:neocomplcache_clang_use_library = 1 " use clang library
            let g:neocomplcache_clang_library_path = '/usr/lib/'
            let g:neocomplcache_clang_executable_path = '/usr/bin/clang'
            let g:neocomplcache_clang_macros = 1 " -code-completion-macros option
            let g:neocomplcache_clang_patterns = 1 " -code-completion-patterns option
            let g:neocomplcache_clang_auto_options = "path, .clang_complete"
            let g:neocomplcache_clang_user_options = "" " user clang options
            let g:neocomplcache_clang_debug = 0 " enable debug message.
        " }}}

        " clang_complete {{{ :h clang_complete.txt
            let g:clang_auto_select = 0 " 0/1/2 auto select first entry in popup menu
            let g:clang_complete_auto = 1 " auto complete after -> . ::
            let g:clang_complete_copen = 1 " 1: open quickfix window on error
            let g:clang_hl_errors = 1 " highlight warnings and errors
            let g:clang_periodic_quickfix = 0 " periodically update quickfix
                " you can use g:ClangUpdateQuickFix() with a mapping to do this
            let g:clang_snippets = 1
            " clang_complete, snipmate, ultisnips
            let g:clang_snippets_engine = "ultisnips"
            let g:clang_conceal_snippets = 1
            let g:clang_trailing_placeholder = 0 " for clang_complete snippet engine
            let g:clang_close_preview = 0 " auto close preview window after completion
            let g:clang_exec = "clang" " name or path of clang executable.
            let g:clang_user_options = "" " useful if you want filter result or others
            "let g:clang_auto_user_options = "path, .clang_complete, gcc"
            let g:clang_use_library = 1
            let g:clang_library_path = "/usr/lib/"
            let g:clang_sort_algo = "priority"
            let g:clang_complete_macros = 1
            let g:clang_complete_patterns = 1
        " }}}

        " c.vim {{{ C/C++ IDE
        " }}}
    " }}}

    " [ Haskell ] {{{
        let hs_highlight_delimiters = 1
        let hs_highlight_boolean = 1
        let hs_highlight_types = 1
        let hs_highlight_more_types = 1
        let hs_highlight_debug = 1
        let hs_allow_hash_operator = 1
        "let lhs_markup = tex " tex/none

        " neco-ghc {{{ neocomplcache complete for Haskell.
        " omnifunc=necoghc#omnifunc
        " au Filetype haskell setlocal omnifunc=necoghc#omnifunc
        " }}}
    " }}}

    " [ Perl ] {{{
    " perlomni : https://github.com/c9s/perlomni.vim
    " }}}

    " [ Lua ] {{{
        "let lua_version = 4 " activate Lua 4.0 syntax highlight
        let lua_version = 5 " activate Lua 5.0 syntax highlight
            " to restore highlighting for Lua 5.1:
            "let lua_version = 5
            "let lua_subversion = 1

        " lua {{{ Lua filetype plugin for Vim
            " let g:lua_path =
            let g:lua_check_syntax= 1
            let g:lua_check_globals = 1
            let g:lua_compiler_name = 'luac' " luac, lualint
            let g:lua_compiler_args = '-p'
            " let g:lua_error_format =
            let g:lua_complete_globals = 1
            let g:lua_complete_library = 1
            let g:lua_complete_dynamic = 1
            let g:lua_complete_omni = 0 " have unintended consequences and slow
        " }}}

        " lua_omni {{{ omni completion function for Lua.
            " It works by scanning _G and parsing Vim buffers.
            " CTRL-X CTRL-O,
            " :help lua_omni
            let b:lua_inner_folds = 1
            " To regenerate folds use the zx or zX normal commands.
        " }}}

        " luainspect {{{ Semantic highlighting for Lua in Vim.
            " Usage:
            "   - :LuaInspect, :LuaInspectToggle.
            "let g:lua_inspect_events = 'CursorHold,CursorHoldI,BufReadPost,BufWritePost'
            let g:lua_inspect_warnings = 1 " 0: do not show warnings.
            let g:lua_inspect_internal = 1
        " }}}
    " }}}

    " [ Erlang ] {{{
        "let erlang_keywords = 1 " to disable keywords highlighting.
        "let erlang_functions = 1
        "let erlang_characters = 1
    " }}}

    " [ Java ] {{{
        let java_highlight_java_lang_ids=1 " highlight Identifiers in java.lang.*
    " }}}

    " [ Sed ] {{{
        let highlight_sedtabs = 1 " make tabs stand out from regular blanks
    " }}}

    " [ R ] {{{
        " Vim-R-plugin {{{ editing R code and integrate Vim with R
            " :help vim-r-plugin
            " Depends:
            " Tmux, vimcom(R packge), Screen(Vim plugin: vim + screen/tmux)
            " Features:
                " Communication with R.
                " Omni completion (auto-completion) for R objects.
                " Ability to see R's documentation in Vim's buffer.
                " Object Browser.
                " Syntax highlighting for R and RHelp code.
                " Smart indentation for R and RHelp syntax.
                " Most of the plugin's behavior is customizable.
        " }}}
    " }}}

    " [ Rust ] {{{
    " }}}

    " [ Assembly ] {{{
        " files syntax
            "asm		GNU assembly (the default)
            "asm68k		Motorola 680x0 assembly
            "asmh8300	Hitachi H-8300 version of GNU assembly
            "ia64		Intel Itanium 64
            "fasm		Flat assembly (http://flatassembler.net)
            "masm		Microsoft assembly (probably works for any 80x86)
            "nasm		Netwide assembly
            "tasm		Turbo Assembly (with opcodes 80x86 up to Pentium, and MMX)
            "pic		PIC assembly (currently for PIC16F84)
        let filetype_i = "asm" " files matching *.i could be Progress or Assembly.
        " let b:asmsyntax = "nasm"
        " let asmsyntax = "nasm"
    " }}}
" }}}

" [ Android ] {{{
    " Eclim {{{ bring Eclipse functionality to Vim support various languages
        " code complete: <C-X><C-U>
        " :Validate/:w to check syntax error.
    " }}}
" }}}

" [ Vim Extension ] {{{

    " [ register & operation ] {{{
        " YankRing

        " Repeat {{{ improve Vim's "."'s repeat.
            " support in:
            " surround.vim, speeddating.vim, abolish.vim, unimpaired.vim, commentary.vim
            " single/last/multiple/visual/complex repeats, using vim scripts.
            " `=> . @: :[range][v]g[lobal][!]/{pattern}/[cmd] V[Visual] q(record)->@
        " }}}

        " Visualrepeat {{{ Repeat command extended to visual mode.
            " Usage: {Visual}.
        " }}}

        " operator-user : Define your own operator easily
    " }}}

    " [ position & session & marker ] {{{
        " restore_view : automatically restoring file's cursor position and folding
            " view info in ~/.vim/view/*
            " set viewoptions=cursor,folds,slash,unix
            set viewoptions=cursor,unix
            " let g:skipview_files = ['*\.vim']

        " Recover {{{ A diff buffer way to see diff between recover and on disk files.
            " :RecoverPluginDisable, :RecoverPluginEnable
            " :FinishRecovery, RecoveryPluginFinish
        " }}}

        " StarRange.vim | Select a string in visual mode. Press * or # key.

        " visualstar: | star (*) for visual-mode.

        " exjumplist | a Vim plugin to provide extra commands for |jumplist|
            nmap <C-M-i>  <Plug>(exjumplist-go-last)
            nmap <C-M-o>  <Plug>(exjumplist-go-first)
            nmap <M-)>  <Plug>(exjumplist-next-buffer)
            nmap <M-(>  <Plug>(exjumplist-previous-buffer)

        " vim-signature {{{ toggle, display and navigate marks.
            " Usage:
            "   - <Leader>ma -- toggle the mark a.
            "   - <Leader>m, -- place the next available mark.
            "   - <Leader>m<Space> -- delete all marks.
            let g:SignatureDefaultMappings = 1
            " let g:SignatureIncludeMarks =
            let g:SignatureWrapJumps = 1
            let g:SignatureMarkLeader = 'm'
            let g:SignatureLcMarkStr = "\p\m"
            let g:SignatureUcMarkStr = "\p\m"
            let g:SignatureMarkerLeader = 'm'
            " let g:SignatureIncludeMarkers =
            let g:SignatureDisableMenu = 0
            let g:SignatureMenuStruct = "P&lugins.&Signature"
            let g:SignaturePurgeConfirmation = 1
        " }}}

        " vmark.vim_Visual_Bookmarking {{{
        " Toggle visual bookmarking and jump through bookmarks
        " Usage:
        " - mm    -- toggle visual bookmark current line.
        "   - ma    -- remove all bookmarks
        "   - mn    -- move to next bookmark below current line.
        "   - mp    -- move to prev bookmark above current line.
            "let b:vm_maxmarks " max number of bookmarks in buffer.
            "let b:vm_guifg
            "let b:vm_guibg
            let b:vm_ctermfg = 'black'
            let b:vm_ctermbg = 'cyan'
            " FIXME un-map <F2>, <F3> maps.
            "nunmap <F2>
            "nunmap <F3>
        " }}}

        " Mark%2666 {{{ Highlight several words in different colors simultaneously.
            " {Visual}[N]<Leader>m, {Visual}<Leader>r, [N]<Leader>n, :[N]Mark {pattern}
            " :Marks
            " 1: Cyan  2:Green  3:Yellow  4:Red  5:Magenta  6:Blue ~
            if has('gui_running')
                let g:mwDefaultHighlightingPalette = 'extended'
                "let g:mwDefaultHighlightingNum = 9 " restrict color numbers
            endif
            highlight MarkWordN ctermbg=Cyan ctermfg=Black guibg=#8CCBEA guifg=Black
            highlight link SearchSpecialSearchType MoreMsg
            "let g:mwDefaultHighlightingPalette = [
            "\{ 'ctermbg':'Cyan', 'ctermfg':'Black', 'guibg':'#8CCBEA', 'guifg':'Black'},
            "\	...
            "\]
            "let g:mwHistAdd = '/@' " don't add marked words to search(/), input(@) history
            let g:mwAutoLoadMarks = 1 " restore marks from previous Vim session.
            "let g:mwAutoSaveMarks = 0 " turn off auto save session, Manually :MarkSave.
            nnoremap <Leader>M <Plug>MarkToggle
            nnoremap <Leader>N <Plug>MarkAllClear
                " remove the default overriding of * and #
            "nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext
            "nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev
        " }}}

        " EasyMotion {{{ provide a much simpler way to use some motion in vim.
            " <Leader><Leader>w -- trigger "word" motion w.
            " <Leader><Leader>f{char} -- trigger "f" motion.
            " and other mappings: w/W, f/F, t/T, b/B, e/E, ge/gE, j/k, n/N.

            "let g:EasyMotion_keys = '1234567890'
            "let g:EasyMotion_do_shade = 0
            "let g:EasyMotion_leader_key = '<Leader>' " default: <Leader><Leader>
            " Custom keys
            "let g:EasyMotion_mapping_{motion} = {mapping}
        " }}}

        " gf-user: extend 'gf' operation to open code file.

        " DynamicSigns {{{ Use Signs for different things.
            let g:Signs_IndentationLevel = 1 " numeric indentation level.
            let g:SignsMixedIndentation = 1 " mixed indentation
            let g:Signs_Bookmarks = 1 " display marks
            let g:Signs_QFList = 1 " display quickfix items signs.
            let g:Signs_Diff = 1 " display signs for viewing changes to the buffer
            let g:Signs_Alternate = 1 " alternating colors
        " }}}
    " }}}

    " [ statusline ] {{{
        " Powerline {{{ customize Vim statusline.
            let g:Powerline_cache_enabled = 0
            let g:Powerline_symbols = "fancy" " compatible, fancy, unicode.
            set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10
            " [0x2213] ∓, [0x2b60] ⭠, [0x2b61] ⭡, [0x2b62, 0x2b63] ⭢⭣.
            let g:Powerline_symbols_override = {
                        \ 'BRANCH': [0x2b60],
                        \ 'RO'    : [0x2b64],
                        \ 'FT'    : [0x2b62, 0x2b63],
                        \ 'LINE'  : [0x2b61],
                        \ }
            "let g:Powerline_dividers_override = ['>>', '>', '<<', '<']
            let g:Powerline_theme = "default" " default, skwp
            let g:Powerline_colorscheme = "default" " default, skwp
            let g:Powerline_stl_path_style = "relative" " filename/short/relative/full
            let g:Powerline_mode_n = " N " " normal
            let g:Powerline_mode_i = "INSERT" " insert
            let g:Powerline_mode_R = "REPLACE" " replace
            let g:Powerline_mode_v = "VISUAL" " visual mode
            let g:Powerline_mode_V = "V⋅LINE" " visual line
            let g:Powerline_mode_cv = "V⋅BLOCK" " visual block
            let g:Powerline_mode_s = "SELECT" " select mode
            let g:Powerline_mode_S = "S⋅LINE" " select line
            let g:Powerline_mode_cs = "S⋅BLOCK" " select block

            " Customization {{{
            "call Pl#Theme#InsertSegment({newsegment}, {location}, {targetsegment})
            "{location} : 'before', 'after'
            "call Pl#Theme#RemoveSegment({targetsegment})
            "call Pl#Theme#ReplaceSegment({targetsegment}, {newsegment})
            call Pl#Theme#RemoveSegment('fileencoding')
            call Pl#Theme#RemoveSegment('fileformat')
            " FIXME call Pl#Theme#InsertSegment('static_str', 'before', 'filesize')
            " call Pl#Theme#InsertSegment('filesize', 'before', 'scrollpercent')
            call Pl#Theme#InsertSegment('ws_marker', 'after', 'lineinfo')
            call Pl#Theme#InsertSegment('virtualenv', 'before', 'neco_ft')
            call Pl#Theme#InsertSegment('hgrev', 'after', 'fugitive')
            " Custom files stored as separate files in autoload/Powerline/*
            call Pl#Theme#InsertSegment('neco_ft', 'before', 'filetype')
            " }}}
        " }}}

        " current-func-info

        " fugitive.vim

        " syntastic.vim %{SyntasticStatuslineFlag()}
    " }}}

    " [ command line ] {{{
    " }}}

    " [ history/undo ] {{{
        " Vim's builtin undo tree:
            " "u" -> undo
            " "<C-R>" -> redo
            " :undo (is useful if you know what change you want to jump to.)
            " [count]g-, [count]g+ (are useful if you don't know exactly what
            " the change number is.)
            " :undolist :earlier/:later [time] {time travelling}

        " Gundo {{{ Visual Vim Undo tree and list.
            " gundo#GundoShow(), gundo#GundoHide()
            nnoremap <F9> :GundoToggle<CR>
            " let g:gundo_disable = 1 " disable Gundo.
            let g:gundo_prefer_python3 = 1
            let g:gundo_right = 0 " right/left position.
            let g:gundo_help = 1 " show help.
            let g:gundo_width = 45
            let g:gundo_auto_preview = 1
            let g:gundo_preview_height = 25
            let g:gundo_preview_buttom = 0 " 0 default.
            let g:gundo_preview_statusline = 'Preview'
            let g:gundo_tree_statusline = 'Tree'
            let g:gundo_map_move_older = "j"
            let g:gundo_map_move_newer = "k"
            let g:gundo_close_on_revert = 0
        " }}}
    " }}}

    " [ simulate ] {{{
        " Clam {{{ A lightweight Vim plugin for working with shell commands.
            " :Clam ls -l, :%Clam sort, :1,10Clam python
            " :ClamVisual sort | uniq -c | sort -n
            " :ClamVisual wc -c, :'<,'>ClamVisual wc -c
            let g:clam_autoreturn = 1
            let g:clam_autoreturn = 'vertical botright'
        " }}}
    " }}}

    " [ REPL: Read-Eval-Print Loop ] {{{
        " Screen {{{ (vim + gnu screen/tmux) ['Screen_vim__gnu_screentmux']
            " simulate an embedded shell in vim by allowing you convert vim
            " session into one running in Screen or Tmux with a split window.
            " :help screen.txt
            " Workflow:
            " $ vim filename.py edit a python file.
            " :ScreenShell python Run all or pieces of code in interactive
            " python shell.
            " [Visual]:ScreenSend Send code from a vim buffer to the shell.
            " :ScreenQuit or :qa Quit the screen session return to vim session.
            " --- :ScreenShellVertical [cmd], :IPython
            " :ScreenShellReopen command for tmux.
            let g:ScreenImpl = 'Tmux' " 'GnuScreen' , 'Tmux'
            " Note: With tmux, :ScreenShellAttach is currently not supported.
            "let g:ScreenShellScreenInitArgs =
            let g:ScreenShellTmuxInitArgs = '-2' " tmux 256 color support
            let g:ScreenShellHeight = 15
            let g:ScreenShellWidth = -1
            let g:ScreenShellQuitOnVimExit = 1
            let g:ScreenShellExternal = 0
            let g:ScreenShellInitialFocus = 'vim' " focus: 'vim', 'shell'
            let g:ScreenShellServerName = 'vim'
            let g:ScreenShellTerminal = "" " for GVim open terminal.
            let g:ScreenShellExpandTabs=1 " avoid tab be interept as complete performing
            let g:ScreenShellSendPrefix = ''
            let g:ScreenShellSendSuffix = ''

                " map depending on whether you have an active screen shell open
                " or not.
                "function! s:ScreenShellListener()
                    "if g:ScreenShellActive
                        "nmap <C-c><C-c> :ScreenSend<cr>
                        "nmap <C-c><C-x> :ScreenQuit<cr>
                    "else
                        "nmap <C-c><C-c> :ScreenShell<cr>
                    "endif
                "endfunction

                "nmap <C-c><C-c> :ScreenShell<cr>
                "augroup ScreenShellEnter
                    "autocmd User * call <SID>ScreenShellListener()
                "augroup END
                "augroup ScreenShellExit
                    "autocmd User * call <SID>ScreenShellListener()
                "augroup END
        " }}}

        " vimux {{{ Easily interact with tmux from vim.
            " Usage:
            " - :VimuxRunCommand("command")
            " - :VimuxRunLastCommand
            " - :VimuxCloseRunner
            " - :VimuxClosePanes
            " - :VimuxCloseWindows
            " - :VimuxInspectRunner
            " - :VimuxInterruptRunner
            " - :VimuxPromptCommand
            " - :VimuxClearRunnerHistory

            let g:VimuxHeight = "25"
            let g:VimuxOrientation = "h" " h: horizontal, v: vertical
            let VimuxUseNearestPane = 0 " if found, use existing tmux pane.
            let VimuxUseNearestPane = "q C-u"

            " Run the current file with rspec
            map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>
            " Prompt for a command to run
            map <Leader>rp :VimuxPromptCommand<CR>
            " Run last command executed by VimuxRunCommand
            map <Leader>rl :VimuxRunLastCommand<CR>
            " Inspect runner pane
            map <Leader>ri :VimuxInspectRunner<CR>
            " Close all other tmux panes in current window
            map <Leader>rx :VimuxClosePanes<CR>
            " Close vim tmux runner opened by VimuxRunCommand
            map <Leader>rq :VimuxCloseRunner<CR>
            " Interrupt any command running in the runner pane
            map <Leader>rs :VimuxInterruptRunner<CR>

            " vimux-ruby-test {{{
            " }}}
        " }}}

        " inline_edit {{{ Edit code that's embedded within other code.
            " Visual select -> <Leader>e - any area that you mark.
            " JS/CSS in HTML, SQL in RUby, code in markdown, Django block in template.
            " normal mode:
            nnoremap <leader>e :InlineEdit<cr>
            " visual mode:
            xnoremap <leader>e :InlineEdit<cr>
            " insert mode:
            inoremap <c-e> <esc>:InlineEdit<cr>a
            let b:inline_edit_autowrite = 0 " =1, save proxy to buffer instead of write
                " detect <script> <style> tags like HTML
            let b:inline_edit_html_like_filetypes = ['vimwiki', 'markdown', 'tex']
        " }}}

        " NrrwRgn (NarrowRegion) {{{ A Narrow Region Plugin similar to Emacs
            "Narrowing means focussing on a region and making the rest
            "inaccessible." This is a script emulates Emacs Narrowing feature,
            "by opening a selected range in a new scratch buffer.  In the
            "scratch buffer simply save it and the changes will be copied into
            "the original file.
            " Usage:
            "   - :NarrowRegion/:NR, :NarrowWindow/:NW, :WidenRegion[!]
            "   - {Visual select} \nr
        " }}}

        " partedit {{{ Edit part of buffer by another buffer.
        " }}}
    " }}}

    " [ unicode & symble & sign ] {{{
        " unicode  {{{ A Completion function for Unicode glyphs
            " e.g. type "AE", <C-X><C-U>, / <C-X><C-G>
            " <Leader>un -- swaps between unicode name and glyphs function complete.
            " Functions :
                " :EnableUnicodeCompletion
                " :DisableUnicodeCompletion
                " :UnicodeName
            let g:enableUnicodeCompletion = 0 " always enable Unicode completion.
            let g:unicode_complete_name = 0 " only complete Unicode Names instead glyphs
            let g:showDigraphCode = 1
        " }}}

        " mathematic {{{
            " Usage: {{{
                " Superscript And Subscript:
                    " `0 ⁰  `+ ⁺ ... ( 0-9 + - (  ) / ^ . , > <  )
                    " `a ᵃ  `A ᴬ ... ( a-z except q , Some of A-Z )
                    " _0 ₀  _+ ₊ ... ( 0-9 + - (  ) / ^  )
                    " _a ₐ  _e ₑ ... (a e h i k l m n o p r s t u v x )
                " Short CMD:
                    " Greek Alphabet:
                        " \GA  => Α , \GD   => Δ
                        " \Ga  => α , \Gg   => γ
                    " Fractions:
                        " \1/2   => ½ , \1/3 => ⅓
                        " \2/3   => ⅔ , \3/5 => ⅗
                    " Arrows:
                        " \<--   => ←  , \--v => ↓  , \==>  => ⇒
                        " \<---  => ⟵  , \--^ => ↑  , \===> => ⟹
                    " Grouping:
                        " \(U    => ⎛  , \]U  => ⎤
                        " \(M    => ⎜  , \]M  => ⎥
                        " \(B    => ⎝  , \]B  => ⎦
                        " \(V    => ︵ , \]V  => ︺
                    " Operator:
                        " \U.    => ⨃ , \UU   => ∪  , \UN  => ∩
                        " \I1    => ∫ , \I3   => ∭  , \I=  => ⨎
                        " \IO1   => ∮ , \IO3  => ∰  , \IOW => ∳
                        " \PDF   => ∂ , \THF  => ∴  , \BCS => ∵
                        " \MUL   => × , \DIV  => ÷
                        " \SQRT2 => √ , \SQRT3 => ∛ , \SQRT4 => ∜
                    " Relations:
                        " \<=    => ≤ , \>=  => ≥   , \!=  => ≠
                        " \<~    => ⪝ , \>~  => ⪞   , \!>  => ≯
                        " \o+    => ⊕ , \o-  => ⊖   , \ox  => ⊗
                        " \O+    => ⨀ , \O+  => ⨁   , \OX  => ⨂
                    " Sets:
                        " \SUBO  => ⊂ , \SUBE => ⊆  , \SUBN => ⊄
                        " \SUPO  => ⊃ , \SUPE => ⊇  , \SUPX => ⊉
                        " \AND   => ∧ , \OR   => ∨  , \NOT  => ¬
                        " \XOR   => ⊕
                        " \EXTS  => ∃ , \EXTN => ∄  , \FALL => ∀
                        " \BOT   => ⊥ , \TOP => ⊤   , \LFT  => ⊣
                        " \RGT   => ⊢
                    " Misc:
                        " \INF  => ∞  , \PRT  => ∝
                        " \ARC   => ⌒ , \ANG  => ∠
                        " \DEGC  => ℃ , \DEGF => ℉
                        " \OHM   => Ω , \MHO  => ℧  , \ANGS => Å
                        " \a/c   => ℀ , \a/s  => ℁  , \No   => №
                        " \TM    => ™ , \CO   => ©  , \RO   => ®
                        " \AE    => Æ , \ae   => æ  , \fi   => ﬁ
                    " Fonts:
                        " \BBA   => 𝔸 , \BBH => ℍ   , \BB0  => 𝟘
                        " \FKH   => ℋ , \FKI => ℑ   , \FKL  => ℒ
                " Latex CMD:
                " Key Helper:
                " :KeyHelper => makes viewing and inputting these symbols easier.
                " It will dynamicly showing matching keymap with your input.  And
                " press '<Enter>' in the KeyHelper window to append to file.
                " And you can input more unicode symbols:
                " 0x2500-0x2800,  0x1D100 - " 0x1D1DD
            " }}}

            "nmap <Leader>kk :KeyHelper<CR>
            "" Active
            "map <Leader>km :set keymap=mathematic<CR>
            "" Stop
            "map <Leader>kn :set keymap=<CR>
            "" view it's details, modify it at your convenience.
            "map <leader>kvm :sp ~/.vim/addons/mathematic/keymap/mathematic.vim<CR>
            "let g:mathematic_user_dir = "~/.vim/addons/mathematic/keymap/mathematic.vim"
            "let g:mathematic_fuzzy_match = 1
        " }}}
    " }}}

    " [ session ] {{{
        " LargeFile: disable some option to speed up on time.

        " sudo.vim
            " Usage: put it in plugin directory.
            "  - (command line): $ vim sudo:/etc/passwd
            "  - (within vim): :e sudo:/etc/passwd
            " Commands:
            "   - SudoRead
            "   - SudoWrite

        " SudoEdit {{{ Edit Files using Sudo/su.
            " Usage:
            " <Tab>
            " :SudoRead[!] [file] ---> :r !sudo cat file.
            " :e sudo:/etc/fstab ---> compatibility with the old sudo.vim.
            " :[range]SudoWrite[!] [file] ---> :w !sudo tee >/dev/null file.

            " let g:sudoAuth = "ssh" " first try to use this tool before falling back
            " let g:sudoAuthArg = "root@localhost"
                " example: for su, use g:sudoAuthArg="-c",
            let g:sudo_askpass = '/usr/bin/ssh-askpass'
            let g:sudo_no_gui = 1 " disable GUI
        " }}}
    " }}}

    " [ color ] {{{
        let rgb_file = "/usr/X11/lib/X11/rgb.txt"

        " colorv {{{
        " }}}

        " Colorizer {{{ W3-Colors, X11, hex, RGB, rgb(RR,GG,BB) HVL hvl(H,V,L)
            " :[range]ColorHighlight[!], :ColorToggle, :ColorClear, :ColorContrast
            " :RGB2Xterm [#]RRGGBB,  " :HSL2RGB
            let g:auto_color = 1
            let g:color_x11_names = 1
        " }}}

        " CSSMinister
            " CSSMinister provides functions and mappings that convert any
            " hexadecimal, keyword, RGB(A) or HSL(A) color values from one format to
            " another.

        " EasyColour {{{ makes it really easy to create your own colour scheme.
        " }}}

        " VIM_Color_Picker {{{ <F5>, :ColorPicker
        " }}}

        " nosyntaxwords
            " find words that are not syntactically highlighted in current
            " buffer.
    " }}}

    " [ colorscheme ] {{{
        " galaxy {{{ a colorscheme tries to make colorscheming simpler.
            " Require: colorv
            " Usage:
            " - :colorscheme galaxy -- start galaxy
            " - :Galaxy {scheme}  -- Schemes Window
            " - :GalaxyScreen -- Schemes details
            " - :GalaxyLoad {scheme} -- Load Galaxy scheme.
        " }}}

        " ScrollColors
            " :ScrollColors
            " \[n|p] to choose colorscheme

        " ColorSchemeEditor {{{ PyGTK GUI to more easily create colorschemes
            " (keywords: color scheme editor)
        " }}}

        " Lucius
    " }}}

    " [ syntax for *** ] {{{
        " Txtfmt-The-Vim-Highlighter {{{ "Rich text" highlighting formatted with Vim
            " modeline: vim:ft=txtfmt || ft=c.txtfmt (mix)
            " token(define, concealed), attributes,
            au! filetypedetect BufRead,BufNewFile *.txt setfiletype txtfmt
            " nested region
            "augroup filetypedetect
                "au!
                "au BufRead,BufNewFile *.c    let b:txtfmtNested = 1
                "au BufRead,BufNewFile *.c    setf c.txtfmt
            "augroup END
            let g:txtfmtMapwarn = "mMoOcC"
            let g:txtfmtModelines = 5
            let g:txtfmtNested = 1
            let b:txtfmtEscape = 'bslash'
            let g:txtfmtTokrange = '&enc == "utf-8" ? "0xE000X" : "180X"'
            let g:txtfmtUndercurl = 1
            "let g:txtfmtUsermap{}
        " }}}

        " Bundle 'mutewinter/nginx.vim.git'

        " Nginx config syntax.
    " }}}

    " [ window ] {{{
        " dwm.vim {{{ Tiled Window Management for Vim inspired from dwm.
            " Usage:
            " - Ctrl-N => creates a new window and place it in the area [M],
            "   stacks all previous windows in the [S] areas.
            " - Ctrl-C => close the current window if no unsaved changes.
            " - Ctrl-J => jumps to next window (clockwise)
            " - Ctrl-K => jumps to previous window (anti-clockwise)
            " - Ctrl-F => focus the current window, that is, place it in the [M]
            "   area & stacks all other windows in the [S] areas.
        " }}}

        " ZoomWin {{{ <c-w>o :ZoomWin, :call ZoomWin() to zoom window.
            let g:zoomwin_preserve_taglist = 1
            let g:zoomwin_preserve_winmanager = 1
        " }}}
    " }}}

    " [ conceal ] {{{
        " vim-ocaml-conceal
    " }}}

    " [ complete ] {{{
        " CompleteHelper {{{ 'completefunc', i_CTRL-X_CTRL-U,
            " Functions: {{{
                " CompleteHelper#FindMatches( matches, pattern, options )
                " CompleteHelper#ExtractText( startPos, endPos, matchObj )
                " CompleteHelper#Abbreviate#Word( matchObj )
                " CompleteHelper#JoinMultiline( text )
                " CompleteHelper#Repeat#TestForRepeat()
            " }}}
            "" Example: {{{
            "function! SimpleComplete( findstart, base )
                "if a:findstart
                    "" Locate the start of the keyword.
                    "let l:startCol = searchpos('\k*\%#', 'bn', line('.'))[1]
                    "if l:startCol == 0
                        "let l:startCol = col('.')
                    "endif
                    "return l:startCol - 1 " Return byte index, not column.
                "else
                    "" Find matches starting with a:base.
                    "let l:matches = []
                    "call CompleteHelper#FindMatches( l:matches, '\V\<' . escape(a:base, '') . '\k\+', {'complete': '.'} )
                    "return l:matches
                "endif
            "endfunction

            "inoremap <C-x><C-z> <C-o>:set completefunc=SimpleComplete<CR><C-x><C-u>
            "" }}}
        " }}}

        " AmbiCompletion {{{ ambiguous word completion.
            " complete a word with no only start-with match but also ends-with
            " and contains match.
            if &completefunc == ''
                set completefunc=g:AmbiCompletion
            endif
            let g:AmbiCompletion_richerSupportForMultibyte = 1
            let g:AmbiCompletion_allBuffers = 1
        " }}}
    " }}}

    " [ window: split, navigation ] {{{
        " SpitVspit {{{ Powerful multiple files splitting; split/vsplit/edit.
            " Usage:
            "   - :Spit[Up/Down]
            "   - :[V/W]spit[Left/Right]
            let g:loaded_SpitVspit = 0 " =1 to disable load script.
        " }}}
    " }}}

    " [ timestamp ] {{{
    " }}}

    " bad-whitespace highlight bad whitespace, but disable in insert mode.
        " Usage:
        " - EraseBadWhitespace
        " - ShowBadWhitespace
        " - HideBadWhitespace
        " - ToggleBadWhitespace

    " trailing-whitespace
        " Usage:
        " - highlight trailing whitespace in red color.
        " - :FixWhitespace to fix whitespace errors.
        " - [range]FixWhitespace to visual select range to pass.

    " TUI (Text User Interface) {{{
        " forms {{{ A Vim TUI library.
        " }}}
    " }}}

    " [ Vim FAQ / Tips ] {{{
        " tips.vim {{{ show vim tips everytime when you enter vim.
            " :NextTip
        " }}}

        " Bundle 'chrisbra/vim_faq.git'
    " }}}
" }}}

" [ tools ] {{{
    " [ GTD, wiki, note, outliner & calendar ] {{{
        " vimwiki {{{
            let g:vimwiki_list = [
                \ {
                    \ 'path': '~/Wiki/vimwiki/wiki/',
                    \ 'path_html': '~/Wiki/vimwiki/output/',
                    \ 'auto_export': 0, 'index': 'index', 'ext': '.wiki',
                    \ 'syntax': 'default',
                    \ 'css_name': 'style.css',
                    \ 'template_path': '~/Wiki/vimwiki/templates/wiki/',
                    \ 'template_default': 'default',
                    \ 'template_ext': '.html',
                    \ 'custom_wiki2html': '',
                    \ 'maxhi': 0,
                    \ 'list_margin': -1,
                    \ 'nested_syntaxes': {
                        \ 'python': 'python', 'ruby': 'ruby',
                        \ 'bash': 'sh', 'vim': 'vim',
                        \ 'javascript': 'javascript', 'dart': 'dart',
                        \ 'c': 'c', 'go': 'go',
                        \ 'lisp': 'lisp', 'scheme': 'scheme',
                        \ 'git': 'git', 'diff': 'diff',
                    \ },
                \ },
                \ {
                    \ 'path': '~/Wiki/vimwiki/personal/',
                    \ 'path_html': '~/Wiki/vimwiki/personal_output/',
                    \ 'auto_export': 0, 'index': 'index', 'ext': '.wiki',
                    \ 'css_name': 'style.css', 'syntax': 'default',
                    \ 'template_path': '~/Wiki/vimwiki/templates/personal/',
                    \ 'template_default': 'default',
                    \ 'template_ext': '.template',
                \ },
                \ {
                    \ 'diary_rel_path': 'Diary/',
                    \ 'diary_index': 'diary',
                    \ 'diary_header': 'Diary',
                    \ 'diary_sort': 'desc',
                \ },
            \ ]
            let g:vimwiki_hl_headers = 1 " use VimwikiHeader1-6
            let g:vimwiki_hl_cb_checked = 1 " checked list items
            let g:vimwiki_global_ext = 1 " make temporary wiki in dir.
            let g:vimwiki_ext2syntax = {
                        \ 'wiki': 'default',
                        \ }
                        " \ 'md': 'markdown',
                        " \ 'mkd': 'markdown',
            let g:vimwiki_auto_checkbox = 1 " if is not checkbox then create.
            let g:vimwiki_menu = 'Plugin.Vimwiki' " GUI sub menu for available wikies
            let g:vimwiki_listsyms = ' .oOX'
            let g:vimwiki_use_mouse = 0 " disable mouse.
            let g:vimwiki_folding = 1 " disable folding. speed up file.
            let g:vimwiki_fold_lists = 1 " enable list subitem's folding.
            let g:vimwiki_list_ignore_newline = 0
            let g:vimwiki_table_mappings = 0 " disable Table mapping
                " to disbale vimwiki <Tab> map
            let g:vimwiki_table_auto_fmt = 0
            let g:vimwiki_dir_link = '' " [[dir/]] to open directory with netrw.
            let g:vimwiki_html_header_numbering = 2
            let g:vimwiki_html_header_numbering_sym = '.'
            " let g:vimwiki_valid_html_tags = 'b,i,s,u,sub,sup,kbd,br,hr'
            let g:vimwiki_user_htmls = '404.html,search.html'
            let g:vimwiki_conceallevel = 2 " vimwiki set this everytime
            let g:vimwiki_url_mingain = 25 " min chars be gained by concealing URLs
            let g:vimwiki_url_maxsave = 30
            let g:vimwiki_debug = 0
            let g:vimwiki_diary_months = {
                        \ 1: 'January', 2: 'February', 3: 'March',
                        \ 4: 'April', 5: 'May', 6: 'June',
                        \ 7: 'July', 8: 'August', 9: 'September',
                        \ 10: 'October', 11: 'November', 12: 'December',
                        \ }
            let g:vimwiki_use_calendar = 1
        " }}}

        " Calendar {{{
            " Usage:
            "   :Calendar, :Calendar 2001 8
            let g:calendar_focus_today = 1
            let g:calendar_mark = 'right' " place mark(*|+) after the day.
                " left, left-fit, right.
            let g:calendar_navi = 'both' " use navigator: top, bottom, both
            let g:calendar_navi_label = 'Prev,Today,Next'
            " let g:calendar_erafmt = 'Heisei,-1988'   " replace header: for Japanese
            "let g:calendar_mruler = 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'
            "let g:calendar_wruler = 'Su Mo Tu We Th Fr Sa'
            let g:calendar_monday = 1 " start with monday.
            let g:calendar_weeknm = 5 " 1: WK01, 2: WK 1, 3: KW01, 4: KW 1, 5: 1
            let g:calendar_datetime = 'statusline' " title, statusline, ''
            " let g:calendar_no_mappings =
        " }}}

        " VikiDeplate {{{ adds wiki-like hypertext capabilities to Vim.
        " }}}

        " vikitasks {{{
        " }}}

        " vktheming {{{ make vimwiki more colorful in GUI.
        " }}}

        " viske {{{ manage your daily schedule on vim with timeline calendar.
            " Usage:
            "   - :Viske
            let g:ViskeDir = '$HOME/Schedule/'
            let g:ViskeSubWinHeight = 7 " height of the Sub-Window
            let g:ViskeCalWinWidth = 25 " width of the calendar-window
            let g:ViskecutDownMsg = 1 " Trim the summary of tasks or not
            let g:ViskeStartTime = 7 " Start time of a day.
            let g:ViskeEndTime = 21 " End time of a day.
            let g:ViskeWidthFuzzy = 4 " Acceptable length that run over a screen.
            let g:ViskeLang = "us,cn,jp" " Language setting
            let g:ViskeTaskTypeLabel = ['\ ', 'seminar', 'circle',
                        \ 'part time job', 'family', 'TODO'
                        \ ]
            let g:ViskeDayLabel = ['S', 'M', 'Tu', 'W', 'Th', 'F', 'S']
        " }}}

        " vimgtd {{{ gtd by vim.
            " :TaskToday, :TaskAll, :TaskDoneOrDoingByDate {date}, :TaskToggle ....
            "let g:loaded_wikigtd = 1
            let g:wikigtd_index = 'task/task'
        " }}}

        " notes {{{ Easy note taking in Vim.
            " Usage:
            " - :Note -- start a new note.
            " - `:[edit|tabedit|split] note:filename`
            " - [visual text]<Leader>en/sn/tn.
            " - :[Split|Tab]NoteFromSelectedText
            " - :write or :update to save notes.
            " - :Note strings -- to edit existing notes or new note be created.
            " - :SearchNotes keyword  or :SearchNotes /pattern/ for regex.
            " - :RelatedNotes -- back-references, find all notes refer to this file.
            " - :RecentNotes
            " - Navigating: gf, CTRL-W_f, CTRL-W_gf. (jump to open, split, tab)
            " - C-X_C-U, C-X_C-O for completing,
            " - embed filetype: embed highlighting, {{{type ...}}}
            " - bullets: <Tab>, <S-Tab>, <Alt-Left>, <Alt-Right>
            let g:notes_directory = '~/vimwiki/Notes'
            let g:notes_suffix = '.note'
            let g:notes_title_sync = 'prompt' " prompt, change_title, rename_file, no
            let g:notes_smart_quotes = 1
            let g:notes_ruler_text = '* * *'
            let g:notes_list_bullets = "['•', '◦', '▸', '▹', '▪', '▫']"
            "let g:notes_list_bullets = '['*', '-', '+']'
            let g:notes_shadowdir = '~/vimwiki/Notes/vimPlugin/shadow'
            let g:notes_indexfile = '~/vimwiki/Notes/vimPlugin/index.pickle'
            "let g:notes_indexscript =
            let g:notes_tagsindex = '~/vimwiki/Notes/vimPlugin/tags.txt'
            " Make the C-] combination search for @tags:
            "imap <C-]> <C-o>:SearchNotes<CR>
            "nmap <C-]> :SearchNotes<CR>
            " Make double mouse click search for @tags. This is actually quite a lot of
            " fun if you don't use the mouse for text selections anyway; you can click
            " between notes as if you're in a web browser:
            "imap <2-LeftMouse> <C-o>:SearchNotes<CR>
            "nmap <2-LeftMouse> :SearchNotes<CR>
            " ~/.vim/ftplugin/notes.vim : setlocal filetype=notes.txtfmt
        " }}}

        " vim-pad {{{ A quick notetaking plugin
            " Workflow:
            "       - open your notes.
            "       - search in your notes.
            "       - create a new note.
            " file is free format, you can use modeline like markdown etc.
            " Usage:
            "   - :ListPads (`Ctrl-Esc`, <Leader><Esc>) <Plug>PadListPads.
            "       - <Enter> to open pad in list.
            "       - dd, <Del> to delete.
            "       - <Esc> to close buffer.
            "       - <Shift-F> to search.
            "       - <Shift-S> select sort.
            "   - in a note: <Leader>dd will delete note file.
            "   - in a note: <Leader>+m to ask for filetype and insert modeline.
            "   - (`<Leader>s`) <Plug>PadSearchPads.
            "   - :OpenPad (<Leader>n) <Plug>PadOpenPad. create new note
            let g:pad_dir = "~/vimwiki/vim-pad/"
            let g:pad_format = "markdown" " markdown,pandoc,
            let g:pad_modeline_position = "bottom" " bottom, top,
            let g:pad_window_height = 20
            let g:pad_highlighting_variant = 1
            let g:pad_search_backend = 'grep' " grep, ack
            let g:pad_search_ignore_case = 1
            let g:pad_read_nchars_from_files = 200 " read 200 chars summary from files
            " XXX change mappings.
        " }}}

        " HyperList: <= WOIM {{{
            " HyperList is a way to describe anything: any state, item(s),
            " pattern, action, process, transition, program, instruction etc
        " }}}

        " VOoM {{{ Vim two-pane outliner
            " Usage:
            "   - :Voom {MarkupMode}, :Voomhelp.
            "   - :Voomexec [vim/py], :Voomlog,
            nnoremap <F7> :Voom<CR>
            let g:voom_tree_placement = "left" " left, right, top, bottom.
            let g:voom_tree_width = 30
            let g:voom_tree_height = 12
            let g:voom_log_placement = "bottom" " right, left, top, bottom.
            let g:voom_log_width = 30
            let g:voom_log_height = 12
            let g:voom_return_key = "<Return>"
            let g:voom_tab_key = "<Tab>"
            " let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
            " let g:voom_default_mode = 'asciidoc'
            " let g:voom_verify_oop =
            " let g:voom_rstrip_chars_{filetype}
                " let g:voom_rstrip_chars_vim = "\"# \t"
                " let g:voom_rstrip_chars_text = " \t"
                " let g:voom_rstrip_chars_help = " \t"
            " let g:voom_user_command
            " let g:voom_create_devel_commands
        " }}}

        " Speeddating : <C-A>, <C-X>, {Visual}<C-A/X>

        " Vomodoro {{{ facilitates planning, tracking and archiving Pomodoros.
            " Usage:
            "   - :PomodoroOpenArchive -- open the archived Pomodoros.
            "   - :PomodoroPerformArchive --- copy todo list to Pomodoros.
            "   - :PomodoroToDoToday -- open the todo list buffer.
            " keys:
            "   - <esc>/q   -- close buffer window.
            "   - <CR>      -- add a check box to current line.
            "   - <space>   -- check off a box on the current line.
            "   - -         -- check of the remaining boxes on line using dashes
            let g:Pomo_ArchiveFilePath = "$HOME/vimwiki/Vomodoro/todotoday"
            let g:Pomo_ToDoTodayFilePath = "$HOME/vimwiki/Vomodoro/archive"
        " }}}

        " vim-pomodoro {{{ a Vim plugin for the Pomodoro time management technique
            " Require: AsyncCommand
        " }}}
    " }}}

    " [ shell ] {{{
        " vimshell {{{ powerful shell inplemented by vim script
            "built-in functionalities that you had to set up to enable if it's on zsh.
            " :VimShell[Create,Tab,Pop,Interactive,....] [{options}...] [{path}]
            let g:vimshell_prompt = "vimshell%"
            let g:vimshell_user_prompt = "getcwd()\n"
            "let g:vimshell_right_prompt =
            let g:vimshell_no_default_keymappings = 0 " disable all key mapping in vimshell
            let g:vimshell_use_terminal_command = "urxvt -e"
            "let g:vimshell_temporary_directory = "expand('~/.vimshell')"
            let g:vimshell_max_command_history = 1000
            let g:vimshell_max_directory_stack = 100
            "let g:vimshell_vimshrc_path = "expand('~/.vimshrc')"
            "let g:vimshell_escape_colors =
            let g:vimshell_disable_escape_highlight = 0
            let g:vimshell_cat_command = "cat" " $PAGER command path
            "let g:vimshell_editor_command = " $EDITOR command path
            let g:vimshell_environment_term = "rxvt-unicode-256color" " $TERM env
            let g:vimshell_split_command = "nicely" " nicely, tabnew, vsplit
            let g:vimshell_popup_command = ""
            let g:vimshell_popup_height = 30
            let g:vimshell_cd_command = "lcd"
            let g:vimshell_no_save_history_commands = {'history' : 1, 'h' : 1, 'histdel' : 1}
            let g:vimshell_scrollback_limit = 1000
            let g:vimshell_interactive_no_save_history_commands = {}
            let g:vimshell_interactive_update_time = 500
            "let g:vimshell_interactive_command_options
            "let g:vimshell_interactive_interpreter_commands =
            "let g:vimshell_interactive_encodings =
            "let g:vimshell_interactive_echoback_commands =
            let g:vimshell_terminal_cursor = 'i:block-Cursor/lCursor'
            "let g:vimshell_terminal_commands =
            "let g:vimshell_interactive_cygwin_commands =
            let g:vimshell_interactive_cygwin_path = 'c:/cygwin/bin'
            let g:vimshell_interactive_cygwin_home = ''
            "let g:unite_source_vimshell_external_history_path =
        " }}}
    " }}}

    " [ bookmark & mark ] {{{
    " }}}

    " [ TeX & LaTeX ] {{{
        let g:tex_fold_enabled = 1
        let g:tex_comment_nospell = 1 " useful when include source code in comments
        let g:tex_verbspell = 1 " spell checking in Verbatim Zones
        "let tex_no_error=1
        let g:tex_conceal = "admgs"
            "accents/ligatures, delimiters, math symbols, Greek, superscripts/subscripts

        " auctex {{{ a large collection of LaTex macros.
        " }}}

        " TeX_9 {{{ semi-automatic LaTeX ftplugin with lots of firepower !
        " }}}

        " TeX-PDF {{{ Lightweight "stay-out-of-your-way" TeX-to-PDF dev support.
        " }}}

        " AutomaticLaTeXPlugin {{{ background compilation, completion, bib search, toc etc.
        " }}}

        " tex_autoclose
        " auctex : macros for LaTeX.
    " }}}

    " [ markup & write ] {{{
        " preview%3344 {{{
            " <Leader>P => preview markup: markdown, rdoc, textile, html, rst
            let g:PreviewBrowsers='firefox,luakit,chromium-browser'
            " let g:PreviewCSSPath='/path/to/css/file'
            let g:PreviewMarkdownExt='markdown,md,mkd,mkdn,mdown'
            let g:PreviewTextileExt='textile,txt'
            let g:PreviewRdocExt='rdoc'
            let g:PreviewHtmlExt='html,htm'
            let g:PreviewRonnExt='ronn'
            let g:PreviewRstExt='rst'
        " }}}

        " Engspchk {{{ on-the-fly spellcheck uses Vim's native syntax highlighting.
            " English Spelling Checker Manual
            " The engspchk source uses Vim's native syntax highlighting to catch
            " spelling errors, so you get quick on-the-fly spellchecking!
            " for source code, only check on comment instead of variables.
            " Usage:
            "   - on-the-fly spellcheck.
            "   - \ec : startup, \en : next, \ep : prev, \ee : end.
            "   - \ea : alternative, \er : RareWord<>Error, (user dict)
            "   - \es : save to dict, \eS : remove. (proj dict)
            "   - \ev : check on visual, \eV : turn off.
            " for alternative window:
            "   - <cr> : select, <tab> : select and global substitute.
            "   - q : quit.
            " Commands: ':Engspchk'
            " Keys:
            "   - <leftmouse>/<rightmouse>/<middlemouse>.
            set mouse=n
            let g:spchkmouse = 1
            let g:spchkautonext = 1
            let g:spchkdialect = "usa" " 'usa', 'can', 'uk'
            let g:spchklang = "eng"
            " let g:spchknonhl = " force all non-syntax-highlighted text.
            let g:spchkpunc = 1
            let g:spchksilent = 1
            " let g:spchkaltright=20 " let alternate-spelling window on right side
            " let g:spchkacronym=
            " let g:cvimsyn= expand('${HOME}/.vim/plugin/CVIMSYN')
            " let g:DrChipTopLvlMenu

            " highlighting groups:
                " BadWord, Dialect, RareWord,
        " }}}

        " SpellCheck {{{ populates quickfix-list spelling errors workflow.
            " :[range]SpellCheck
            " :SpellCheck[!] (quickfix window), :SpellLCheck[!] (location window)
                " auxiliary commands:
                    " issue an error when spelling errors exist.
                    " :BDeleteUnlessSpellError[!], :WriteUnlessSpellError[!]
                    " :WriteDeleteUnlessSpellError[!], :XitUnlessSpellError[!]
                    " auto open quickfix list when spelling errors.
                    " :BDeleteOrSpellCheck[!], :WriteOrSpellCheck[!]
                    " :WriteDeleteOrSpellCheck[!], :XitOrSpellCheck[!],
                    " :UpdateAndSpellCheck[!]
            let g:SpellCheck_OnNospell = function('SpellCheck#AutoEnableSpell')
            "let g:SpellCheck_OnNospell = '' " :SpellCheck fail when 'spell' is off
            let g:SpellCheck_DefineAuxiliaryCommands = 1 " disable auxiliary commands

            "autocmd BufWritePre /tmp/mutt-* :UpdateAndSpellCheck
        " }}}

        " LanguageTool {{{ check language grammar. en, fr, etc.
            " :LanguageToolCheck
            let g:languagetool_jar=$HOME . '/languagetool/LanguageTool.jar'
            "autocmd BufWritePre /tmp/mutt-* :LanguageToolCheck
        " }}}

        " SpellCheck & LanguageToolCheck {{{
        " }}}
    " }}}

    " [ ebooks ] {{{
        au BufReadCmd *.epub call zip#Browse(expand("<amatch>"))
            " let vim edit epub. because vim can auto edit files inside zip file
    " }}}

    " [ POST/Search(WWW): blog, microblog, twitter, WWW etc ] {{{
        " UltraBlog: local database for Blog WordPress.

        " Tumble {{{ Tumble for Vim.
            " :[range]Tumble [draft|published]
            " :[ranger]TumbleLink
            " :TumblesList [draft|publish]
            " ( here [ranger] can be selected by visual.)
            " markdown title at first line.
            let tumblr_email = 'numbchild@gmail.com'
            let tumblr_password = 'chrisM.sprite324'
            let tumblr_tumblelog = 'stardiviner.tumblr.com'
            " let tumblr_http_proxy =
        " }}}

        " wwwsearch {{{ Search WWW easily from Vim.
            " Usage:
            " :Wwwsearch [{search-engine}] {keyword}
            " Functions:
                " wwwsearch#search({keyword}, [{search-engine}])
                " wwwsearch:add({search-engine}, {uri-template})
                " wwwsearch:remove({search-engine})
            let g:wwwsearch_command_to_open_uri = '/usr/bin/luakit {uri} &'
            "nnoremap <Space>*  :<C-u>Wwwsearch -default <cword><Return>
            nnoremap <Space>* <Plug>(operator-wwwsearch)
                " search-engine :
                    " -default : same as "-google"
                    " -dictionary : Dictionary (Max OS X only)
                    " -google : Google
                    " -twitter : Twitter
                    " -vim.org : Google for www.vim.org
                    " -wikipedia : Wikipedia
                " call wwwsearch#default(
                "             \   'default',
                "             \   'http://en.wikipedia.org/w/index.php?search={keyword}'
                "             \ )
                " call wwwsearch#add(
                "             \ 'blekko',
                "             \ 'http://blekko.com/ws/+{keyword}'
                "             \ )
                " call wwwsearch#add(
                "             \ 'duckduckgo',
                "             \ 'http://duckduckgo.com/?q={keyword}'
                "             \ )
                " call wwwsearch#add(
                "             \ 'github',
                "             \ 'http://github.com/search?q={keyword}'
                "             \ )
                " call wwwsearch#add(
                "             \ 'googlecode',
                "             \ 'http://code.google.com/query/#q={keyword}'
                "             \ )
                " call wwwsearch#add(
                "             \ 'baidu',
                "             \ 'http://www.baidu.com/s?wd={keyword}'
                "             \ )
                " call wwwsearch#add(
                "             \ 'digg',
                "             \ 'http://digg.com/search?s={keyword}'
                "             \ )
            " }}}

        " [ paste ] {{{
            " vim-pastie
                " :[range(v):/1,10/%(file)]Pastie[!] file.txt/register
                " :[%|visual]Pastie!

            " PasteBin {{{ <Visual>PasteBin
                " http://www.vim.org/scripts/script.php?script_id=3505
                " http://pastebin.com/api config reference.
                let g:pastebin_browser_command = "firefox %URL% &"
                let g:pastebin_private = 1 " 0: Public, 1: Unlisted, 2: Private.
                let g:pastebin_api_dev_key = '1587f97dfac0e24806b9d5092f710dc6'
                let g:pastebin_api_user_name = 'numbchild'
                let g:pastebin_api_user_password = 'numbchild324'
                let g:pastebin_expire_date = '1M'
                    " N:Never, 1H: 1 Hour, 1D: 1 Day, 1M: 1 Month
            " }}}

            " Gist {{{ GitHub paste server.
                " Requires: curl, webapi-vim, git command.
                " :'<,'>Gist -- visual
                " :Gist -- post current buffer to gist.
                " :Gist -s describ -- post with description
                " :Gist -p -- create a private gist.
                " :Gist -P -- create a public gist.
                " :Gist -a -- create a anonymously gist.
                " :Gist -e -- edit the gist. :w to save
                " :Gist -e -s describ -- post/edit with the description.
                " :Gist -d -- delete the gist. (need opened gist buffer).
                " :Gist -f -- fork (need opened gist buffer).
                " :Gist -l [pattern] -- list
                " :Gist -ls -- list gists from your started gists.
                " :Gist -la -- list everyone's gists.
                " :Gist +/-1 -- star the gist.
                " :Gist --abandon -- when have problem.
                " GitHub auth stored in ~/.gist-vim, to revoke, just remove it
                " To make a already opened gist buffer.
                "   - :Gist -l
                "   - <Enter> on a file to open a gist.
                "   - :Gist -e git@gist.github.com:3358356.git
                "   - :w to save and update.
                let g:gist_clip_command = 'xclip -selection clipboard' " Linux
                let g:gist_detect_filetype = 1 " detect filetype from the filename.
                let g:gist_open_browser_after_post = 1 " open browser after post.
                let g:gist_browser_command = 'firefox %URL% &' " 'elinks %URL%'
                let g:gist_show_privates = 1 " show private gist in :Gist -l.
                let g:gist_get_multiplefile = 1 " edit all files contains more than one.
            " }}}
        " }}}

        " WebAPI {{{
        " }}}
        " TwitVim {{{ Vim Twitter client.
            let twitvim_login = "numbchild:numbchild324"
            "let twitvim_proxy = "proxyhost:proxyport"
            let twitvim_browser_cmd = 'firefox'
            let twitvim_filter_enable = 1
        " }}}
    " }}}

    " [ mail ] {{{
        let mail_minlines = 30 " highlight all the standard elements of an email.

        " mail filetype settings from scripts and plugins.
        " ~/.vim/ftplugin/mail.vim
    " }}}

    " [ translate ] {{{
    " }}}

    " [ format ] {{{
        " Tabular {{{ flexible, intuitive text aligning.
            " Usage:
            " /{char} -> /,
            " /{char}/[range] -> /,/r0 -> [range]: l,r,c => left, right, center.
            " :Tabularize [first_comma,multiple_spaces,]
            " /,/r1c1l0 | /^[^,]*\zs,/r0c0l0
            " Tabularize scripts.
        " }}}

        " Align%294

        " Surround {{{ cs, ds, ys[(text object)|iw|W|t(<p>)], (Visual)S
            " cs"', cs'<q>, cst", ds", ysiw], yss(, ds{, ds),
            " Visual(V): S<p class="important">
            " :help surround.txt
        " }}}

        " Abolish {{{ quick find, substitute, abbreviate
        " several variations of a word at once
            " three case variants (foo, Foo, and FOO) are operated on by every command.
            " :Abolish, :Subvert.
        " }}}

        " Auto_Pairs {{{
                " shortcuts:
                "   <M-o> : newline with indentation
                "   <M-a> : jump to of line
                "   <M-n> : jump to next pairs
                "   <M-e> : jump to end of pairs.
                "   Ctrl-V ) : insert ) without trigger the plugin.
            "let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}
            let g:AutoPairsShortcuts = 1
            " let g:AutoPairscutToggle = '<another key>'
                " if bellowing keys conflict with others
            let g:AutoPairsShortcutToggle = '<M-p>'
            let g:AutoPairsShortcutFastWrap = '<M-e>'
            let g:AutoPairsShortcutJump = '<M-n>'
            let g:AutoPairsShortcutBackInsert = '<M-b>'
            let g:AutoPairsMapBS = 1
            let g:AutoPairsMapCR = 0 " insert a new indented line if cursor in pairs.
                " error in vimwiki <CR> Enter. but use upper inoremap can solve.
            let g:AutoPairsMapSpace = 0
                " error in abbreviations <space> auto expand.
            let g:AutoPairsCenterLine = 1
            let g:AutoPairsFlyMode = 0
        " }}}

        " delimitMate {{{ auto closing of quotes, parenthesis, brackets etc.
        " }}}

        " formatvim {{{ convert current file to colored HTML, BBCode or whatever.
            " :help format.txt
            " :[{range}]Format format/diffformat/list [{formatName} [{option1} {value1}]
        " }}}
    " }}}

    " [ ASCII Draw ] {{{
        " DrawIt {{{ Ascii drawing plugin: lines, ellipses, arrows, fills, and more!
            " \di to start DrawIt, \ds to stop DrawIt.
            " <left>, <right>, <up>, <down>, -- move and draw left
            " <shift-left> <shift-....> -- move left ...
            " >, <, ^, v, -- draw (-> <- ^ v) arrow.
            " <pgup> <pgdn> ... -- replace with a \, move down and right, and insert a \.
            " \>, \<, \^, \v, -- draw fat (-> <- ^ v) arrow
            " \a           draw arrow based on corners of visual-block
            " \b           draw box using visual-block selected region
            " \e           draw an ellipse inside visual-block
            " \f           fill a figure with some character
            " \h           create a canvas for \a \b \e \l
            " \l           draw line based on corners of visual block
            " \s           adds spaces to canvas
            " <leftmouse>  select visual block
            " <s-leftmouse>  drag and draw with current brush (register)
            " \ra ... \rz  replace text with given brush/register
            " \pa ...      like \ra ... \rz, except that blanks are considered
                            " to be transparent
        " }}}

        " boxdraw
            " Draw diagrams and tables using boxdrawing characters

        " sketch.vim
            " Draw with mouse: boxes, arrows, lines, fills.
            " Transparent/opaque drag and drop.

        " drawing.vim
            " Ascii drawing primitives with mouse in vim GUI (box, arrow, line).

        " ditaa {{{ convert ASCII diagrams into proper bitmap graphics.
        " }}}
    " }}}

    " [ text-object ] {{{
    " }}}

    " [ open with \o ] {{{ open: URL, preview doc: markdown, TeX, etc.
        " Utl {{{ :Utl to open links, files.
            nnoremap <leader>o :Utl<CR>
                " Syntax: no need to escape 'spaces'.
                " use '' contain filename(url) strings. e.g. = ":silent !evince '%p' &"
                " <url:#r=here> id=here | <url:tn=some text> <url:filename.txt#line=-10>
                " <url:foo bar.pdf> | <url:./temp> folder |
                " <url:../plugin/utl.vim#tn=text>
                " <url:file:///home/stb/.vim/plugin/utl.vim>
                " <url:http://www.google.com> www.vim.org
                " <url:man:ls> || <url:config:>
                " download from [1] || [1] www.google.com
                " It brings the benefits of URL-based hyperlinking to plain text,
                " extending the URL syntax for plain text needs.
            let g:utl_opt_verbose=0 " 0=no (default), 1=yes
            let g:utl_opt_highlight_urls='yes' " 'yes' is default / 'no'

            " reference utl_rc.vim
            " HTTP
            " %u, %p for Unix, %P for Windows.
            if !exists("g:utl_cfg_hdl_scm_http_system")
                if has("unix")
                    " let g:utl_cfg_hdl_scm_http_system = 'silent !xdg-open %u' " for ubuntu system
                    "let g:utl_cfg_hdl_scm_http_system = "!xterm -e lynx '%u#%f'" "	console browser
                    " if browser is GUI, don't use "silent" => "silent !browser", will crash terminal vim screen
                    " Check if an instance is already running, and if yes use it, else start firefox.
                    " let g:utl_cfg_hdl_scm_http_system = "silent !firefox -remote 'ping()' && firefox -remote 'openURL( %u )' || firefox '%u#%f' &"
                    " use lightweight browser like : luakit, jumanji, urbl etc.
                    let g:utl_cfg_hdl_scm_http_system = "!luakit '%u#%f' &"
                endif
                let g:utl_cfg_hdl_scm_http=g:utl_cfg_hdl_scm_http_system
            endif
            " http wget:
            let g:utl_cfg_hdl_scm_http__wget="call Utl_if_hdl_scm_http__wget('%u')"
            " scp
            if !exists("g:utl_cfg_hdl_scm_scp")
                let g:utl_cfg_hdl_scm_scp = "silent %d %u"
            endif
            " mailto:
            if !exists("g:utl_cfg_hdl_scm_mailto")
                let g:utl_cfg_hdl_scm_mailto = "!urxvt -e mutt '%u'"
            endif
            " generic
            if !exists("g:utl_cfg_hdl_mt_generic")
                if has("unix")
                    if $WINDOWMANAGER =~? 'kde'
                        let g:utl_cfg_hdl_mt_generic = 'silent !konqueror "%p" &'
                    else
                        let g:utl_cfg_hdl_mt_generic = 'silent !urxvt -e sh -c ranger "%p"'
                    endif
                endif
            endif
            " directory
            let g:utl_cfg_hdl_mt_text_directory__cmd = ':!urxvt -e sh -c ranger "%p"'
            let g:utl_cfg_hdl_mt_text_directory__vim = 'VIM'   " Vim builtin file explorer
            " let g:utl_cfg_hdl_mt_text_directory='VIM'
            " let g:utl_cfg_hdl_mt_text_directory = ':silent !nautilus "%p" &'
            let g:utl_cfg_hdl_mt_text_directory=g:utl_cfg_hdl_mt_text_directory__cmd
            " application/pdf
            let g:utl_cfg_hdl_mt_application_pdf = ":silent !zathura '%p' &"
            " FIXME application/djvu
            let g:utl_cfg_hdl_mt_application_djvu = ":silent !evince '%p' &"
            " application/chm
            " let g:utl_cfg_hdl_mt_application_chm = ":silent !chmsee '%p' &"
            " application/doc
            let g:utl_cfg_hdl_mt_application_msword = ":silent !libreoffice '%p' &"
        " }}}

        " Elinks {{{ <Leader>o/<leader>O, <C-j>/<C-k> :[n]LMarks :[n]LHist
            " Require: must have Elinks already running in another Terminal
            " window or Tmux/Screen pane.  The plugin talks to the running
            " instance of ELinks.  If you want to change the keybindings, just
            " edit the nnoremap lines at the bottom of the plugin file.
        " }}}
    " }}}

    " [ terminal multiplexer ] {{{
        " vimux {{{ effortless vim and tmux interaction. :call RunVimTmuxCommand("ls")
        " }}}
    " }}}

    " [ smalltools ] {{{
        " fcitx
            " for set small delay
            " set timeoutlen=600
            " Screen: maptimeout, Tmux: escape-time options.
    " }}}

    " [ speak ] {{{
        " VimSpeak {{{ call Microsoft Windows AGENT and speaks (range) selected text.
            " [range]VimSpeak
        " }}}

        " VimSpeak function {{{
            function! VimSpeak() range
                " Concatenate input string.
                let curline = a:firstline
                let strline = ''
                while curline <= a:lastline
                    let tmpline = getline(curline)
                    if tmpline=~ '\m^\a' && strline =~ '\m\a$'
                        let strline = strline .' '. tmpline
                    else
                        let strline = strline . tmpline
                    endif
                    let curline = curline + 1
                endwhile
                " FIXME call libcall("VimSpeak.dll", "Speak", strline)
            endfunction

            command! -nargs=0 -range VimSpeak <line1>,<line2>call VimSpeak()
        " }}}
    " }}}

    " [ encrypt ] {{{
        " Edit gpg encrypted files {{{
        " Transparent editing of gpg encrypted files.
        augroup encrypted
            au!
            " First make sure nothing is written to ~/.viminfo while editing
            " an encrypted file.
            autocmd BufReadPre,FileReadPre      *.gpg set viminfo=
            " We don't want a swap file, as it writes unencrypted data to disk
            autocmd BufReadPre,FileReadPre      *.gpg set noswapfile
            " Switch to binary mode to read the encrypted file
            autocmd BufReadPre,FileReadPre      *.gpg set bin
            autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
            autocmd BufReadPre,FileReadPre      *.gpg let shsave=&sh
            autocmd BufReadPre,FileReadPre      *.gpg let &sh='sh'
            autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
            autocmd BufReadPost,FileReadPost    *.gpg '[,']!gpg --decrypt --default-recipient-self 2> /dev/null
            autocmd BufReadPost,FileReadPost    *.gpg let &sh=shsave
            " Switch to normal mode for editing
            autocmd BufReadPost,FileReadPost    *.gpg set nobin
            autocmd BufReadPost,FileReadPost    *.gpg let &ch = ch_save|unlet ch_save
            autocmd BufReadPost,FileReadPost    *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
            " Convert all text to encrypted text before writing
            autocmd BufWritePre,FileWritePre    *.gpg set bin
            autocmd BufWritePre,FileWritePre    *.gpg let shsave=&sh
            autocmd BufWritePre,FileWritePre    *.gpg let &sh='sh'
            autocmd BufWritePre,FileWritePre    *.gpg '[,']!gpg --encrypt --default-recipient-self 2>/dev/null
            autocmd BufWritePre,FileWritePre    *.gpg let &sh=shsave
            " Undo the encryption so we are back in the normal text, directly
            " after the file has been written.
            autocmd BufWritePost,FileWritePost  *.gpg silent u
            autocmd BufWritePost,FileWritePost  *.gpg set nobin
        augroup END
        " }}}

        " Bundle 'git://gitorious.org/vim-gnupg/vim-gnupg.git' {{{
            " :GPGEditRecipients || :GPGViewRecipients
            " :GPGEditOptions || :GPGViewOptions
            " This script implements transparent editing of gpg encrypted files.
            " The filename must have a “.gpg”, “.pgp” or “.asc” suffix.
            " let g:GPGExecutable
            let g:GPGUseAgent = 1
            let g:GPGPreferSymmetric = 0
            let g:GPGPreferArmor = 0
            let g:GPGPreferSign = 0
            " let g:GPGDefaultRecipients
            let g:GPGUsePipes = 0
            " let g:GPGHomedir =
        " }}}

        " TGpg {{{
            " :TGpgEncrypt || encrypting files with GPG. symmetric encryption(default)
            let g:tgpg_gpg_cmd = '/usr/bin/gpg'
            let g:tgpg_gpg_md5_check = 'md5sum'. g:tgpg_gpg_cmd " calculate md5 checksum
            let g:tgpg_gpg_md5_sum = '' " The known md5 checksum of pgp binary.
            let g:tgpg_options = {'verbosefile': '', 'verbose': 0} " during read/write
            let g:tgpg_registers = '"-/_*+' " reset these registers after leaving buffer
            let g:tgpgCachePW = 2 " cache password.
            let g:tgpgBackup = 1 " when writing, make backups.
            let g:tgpgMode = 'symmetric' " symmetric (default), encrypt, clearsign.
            let g:tgpgModes = ['encrypt', 'clearsign', 'symmetric']
            " ----- gpg options -----
            let g:tgpgOptions = '-q --no-secmem-warning'
            let g:tgpgTempSuffix = '.~tGpg~' " the suffix for backups and temporary files.
            let g:tgpgCmdRecipient = '-r "%s"' " RECIPIENTS: How to pass recipients.
            let g:tgpgSepRecipient = ';|/&' " separators user use when naming multiple recipients.
            let g:tgpgCmdPassphrase = '--passphrase "%s"' " PASSPHRASE: pass passphrase.
            let g:tgpgShellQuote = '&'.&shellxquote " more characters should be quoted.
            let g:tgpgInputsecret = 'inputsecret' " A function to input secrets.
        " }}}

        " openssl.vim {{{ Edit OpenSSL encrypted files and turn Vim into a Password Safe!
        " }}}
    " }}}

    " [ ledger / accounting ] {{{
        " ledger {{{
            au BufNewFile,BufRead *.ldg,*.ledger setf ledger | comp ledger
        " }}}
    " }}}

    " [ helper ] {{{
    " bestfriend : how long did you edit a file with Vim ?
        " :Bestfriend[s]
    " }}}
" }}}

" vim: foldmethod=marker
