" =========================
"
"    _  __(_)__ _  ________
"  _| |/ / //  ' \/ __/ __/
" (_)___/_//_/_/_/_/  \__/
"
" =========================
" Author: stardiviner ( numbchild at gmail dot com )
" Example: http://www.vi-improved.org/vimrc.php
" http://amix.dk/vim/vimrc.html

" FIXME most options variable is /path/to/file. they should not quote with "" , it is wrong.

" [[ GUI ]] {{{ :help gui.txt :help gui_x11.txt
if has("gui")

endif
" }}}

" [[ vim Settings ]] {{{
set nocompatible       " not vim compatible. must be first one, will affect other options.
set mouse=""           " disable mouse
set tags=./tags;$HOME  " walk directory tree upto $HOME looking for tags
set errorbells         " error bells
set visualbell         " visual bells
set backspace=2        " more powerful backspace

    " [ mouse ] {{{ In many terminal emulators the mouse works just fine, thus enable it.
    "if has('mouse')
      "set mouse=a
    "endif
    " }}}

    " [ updating vimrc file on the fly ] {{{
"     if has("autocmd")
"         autocmd bufwritepost .vimrc source $MYVIMRC
"     endif
    " nmap <leader>v :tabedit $MYVIMRC<CR>
    " }}}

    " [ help ] {{{2 vim internal HELP
    " map K <ESC>:exec "help".expand("<cWORD>")<CR> 
    autocmd FileType sh,vimwiki,config,none
                \ setlocal keywordprg="man"
    " for vimrc to press 'K'
    autocmd FileType vim,help 
                \ let &keywordprg=":help"
        " }}}

    " [ history ] {{{
    set history=256 " history lines
    " undo
    set undolevels=1000 
    " }}}

    " [ encode ] {{{2
    set encoding=utf-8
    set fileencoding=utf-8
    set fileencodings=utf-8,ucs-bom,enc-cn,cp936,gbk,latin1
    "set encoding&		    " terminal charset: follows current locale
    set isfname+=32 " let vim support filename with white spaces when  using "gf".
    " }}}

    " [ register ] {{{
    " you can use ["+p and "+y] to paste and yank 
    set clipboard+=unnamed   " "* is the clipboard register, 
    " set pastetoggle=<F8>   " toggle between paste and normal: for 'safer' pasting from keyboard
    " }}}

    " [ modeline ] {{{
    set modeline     " =/* vim: set ai ft=config: */
    set modelines=2  " the number of lines that is checked for set commands.
    set colorcolumn=80  " highlight column after 'textwidth', a red line.
    " set cc=+1,+2,+3  " highlight three columns after 'textwidth'
    " set colorcolumn=4,+1
        " add bellowing to colorscheme file.
        " hi ColorColumn     ctermfg=000 ctermbg=220
    " }}}

    " [ buffer ] {{{2
    set autowrite                    " auto write when changed
    set autoread                     " auto read changed files
    set confirm                      " confirm current buffer.
    if has("vms")
        set nobackup		" do not keep a backup file, use versions instead
    else
        set backup		" keep a backup file
        set backupdir=$HOME/backup-vim/  " backup dir
        set backupcopy=auto
    endif
    " }}}

    " [ swap ] {{{
    set dir=.,~/.tmp,/var/tmp,/tmp  " swap file dir
    " }}}

    " [ search ] {{{
    set incsearch hlsearch wrapscan " do incremental searching, wrapscan used for ]s and [s spelling mistake.
    set ignorecase smartcase        " smartcase will override ignorecase when type with upper case characters.
    set showmatch
    " }}}

    " [ completion ] {{{2
    set cmdheight=1                  " command line height
    set autochdir                    " auto change dir
    set wildmenu                     " show matches above the command line, ( overwriting status line. )
    set wildmode=full                " or use list:longest ( =full, will only complete in statusline )
    set dictionary=~/.vim/misc/words " dictionary for "k", '/usr/share/dict/words'
    set complete=.,w,b,u,k,t,i       " completion buffers
    "            | | | | | | |
    "            | | | | | | \current and included files
    "            | | | | | \tags completion
    "            | | | | \dict 
    "            | | | \unloaded buffers 
    "            | | \other loaded buffers
    "            | \buffers in other windows
    "            \the current buffer

    set completeopt=menuone,longest,preview  " ( OR menuone,longest ) for insert mode completion.
    " set file path completion.
    set path+=.,/usr/local/include,/usr/include,,
    " set showfulltag " NOTE: this doesn't work well together with "longest" in 'completeopt'.
    set showcmd     " show (partial) command in the last line of screen.
    " ignore those files when completion.
    set wildignore+=*.swp,*.svn,*.git,cvs,*.o,*.obj,*.pyc,*.pyo,*.png,*.gif,*.jpg,*.jpeg,*.bmp,*.tiff
    set report=0                     " always report changed lines
    " new-omni-completion ( internal ) Ctrl-X,Ctrl-*
    " }}}

    " [ Omni complete-functions ] {{{
    " set omnifunc=  " find the start of the text to be completed.
    " set completefunc " actually find the matches.
    " }}}

    " [ session ] {{{2
    " set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize " for :mksession
    au BufReadPost *  
                \if line("'\"") > 1 && line("'\"") <= line("$") 
                \| exe "normal! g`\"" 
                \| endif
    set viminfo='10,\"100,:20,%,n~/.viminfo " help :viminfo , notice permission is wrong on viminfo
    " }}}

" }}}


" [ looks ] {{{
    " [ basic looks ] {{{
    set number         " show number
    set sidescroll=1
    set scrolloff=10  " show some lines up and down of cursor, 999 will let cursor always in middle.
    set magic          " to avoid portability problems with using patterns. always keep this option on.
    " }}}

    " [ colorscheme ] {{{
    if $TERM =~ 'rxvt-unicode-256color' || '^xterm' || $TERM =~ 'xterm-256color' || $TERM =~ '^screen' || has("gui_running")
        set t_Co=256
        colorscheme molokai
    else 
        set t_Co=256
        colorscheme molokai
    endif
    " }}}

    " [ cursor ] {{{3 :help 't_EI' 't_SI' ( EI: EndInsert, SI: StartInsert.
    " color from /etc/x11/rgb.txt
    " [ cursor color ] 
    "if &term =~ "rxvt-unicode-256color\\|rxvt-unicode"
        " set ttyfast
        "let &t_EI = "\<Esc>]12;RoyalBlue1\x9c"
        "let &t_SI = "\<Esc>]12;IndianRed1\x9c"
        "silent !echo -e "\e]12;orange\x9c"
    "elseif &term =~ "screen"    " screen in urxvt or xterm
        ":silent !echo -ne "\eP\e]12;IndianRed2\007\e\\"
        "let &t_SI = "\eP\e]12;RoyalBlue1\007\e\\"
        "let &t_EI = "\eP\e]12;IndianRed2\007\e\\"
        "autocmd VimLeave * :!echo -ne "\eP\e]12;green\007\e\\"
    "elseif &term =~ "xterm"
        ":silent !echo -ne "\e]12;IndianRed2\007"
        "let &t_SI = "\e]12;RoyalBlue1\007"
        "let &t_EI = "\e]12;IndianRed2\007"
        "autocmd VimLeave * :!echo -ne "\e]12;green\007"
    "elseif &term =~ "xterm\\|rxvt"
      "let &t_SI = "\<Esc>]12;orange\x7"
      "let &t_EI = "\<Esc>]12;red\x7"
      "silent !echo -ne "\033]12;red\007"
      "" reset cursor when vim exits
      "autocmd VimLeave * silent !echo -ne "\033]112\007"
      "" use \003]12;gray\007 for gnome-terminal
    " endif

    " [ cursor shape ]
    " = '\<Esc>[1 q' .  1 or 0 > blinking block, 2 > solid block, 3 > blinking underscore, 4 > " solid underscore.
    "if &term =~ 'rxvt-unicode-256color\\|rxvt-unicode'
        "let &t_SI = "\<Esc>[1 q"
        "let &t_EI = "\<Esc>[3 q"
    "elseif &term =~ '^xterm'
        "let &t_SI .= "\<Esc>[4 q"
        "let &t_EI .= "\<Esc>[2 q"
        "" =~ "^xterm"
        "" let &t_SI = "\<Esc>]12;purple\x7"
        "" let &t_EI = "\<Esc>]12;blue\x7"
    "else
        "let &t_SI = "\<Esc>]50;CursorShape=2\x7"
        "let &t_EI = "\<Esc>]50;CursorShape=4\x7"
    "endif
    " }}}

    " hilight current line {{{2
    autocmd InsertLeave * set cursorline
    autocmd InsertEnter * set cursorline 
    " only highlight column in current window.
    au WinLeave * set nocursorline nocursorcolumn
    au WinEnter * set cursorline cursorcolumn
    set cursorline
    set cursorcolumn  " set uplight cursorline 
    " }}}

    " [ fold ] {{{
    set foldenable          " enable fold
    set foldmethod=indent   " indent, syntax, manual, expr, diff, marker
    set foldnestmax=3       " maximum nesting of fold
    set foldlevel=4         " fold start from which level
    set foldlevelstart=2    " start editing with folds closed.
    set foldmarker={{{,}}}      " fold marker
    set foldminlines=3      " fold minlines
    set foldcolumn=0        " 3 colums ahead of line number.

        "set foldtext=MyFoldText()
        "function MyFoldText()
          "let line = getline(v:foldstart)
          "let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
          "return v:folddashes . sub
        "endfunction

        "set foldtext=VimrcFoldText()
        "function! VimrcFoldText() " {{{2
            "let line = foldtext()
            "let foldSize = 1 + v:foldend - v:foldstart
            "let lineCount = line("$")
            "let foldPercentage = printf("%4.1f", (foldSize*1.0)/lineCount*100)
            "" Show fold Percentage along with # of lines
            "return substitute(line, '^\([-+]\+\)\(\s\+\)\(\d\+\) lines', '\1 '.foldPercentage.'%\2(\3 lines)', 'g')
        "endfunction " }}}

        set foldtext=VimrcFoldText() " {{{
        function! VimrcFoldText() 
            " get first non-blank line
            let fs = v:foldstart
            while getline(fs) =~ '^\s*$'
                let fs = nextnonblank(fs + 1)
            endwhile
            if fs > v:foldend
                let line = getline(v:foldstart)
            else
                let line = getline(fs)
            endif
            let line = substitute(line, '/\*\|\*/\|{'.'{{\d\=', '', 'g')." "
            let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
            let foldSize = 1 + v:foldend - v:foldstart
            let foldSizeStr = " " . foldSize . " lines "
            let foldLevelStr = repeat("+--", v:foldlevel)
            let lineCount = line("$")
            let foldPercentage = "[" . printf("%4.1f", (foldSize*1.0)/lineCount*100) . "%] "
            " let expansionString = repeat("-", w - strlen(foldSizeStr) - strlen(line) - strlen(foldLevelStr) - strlen(foldPercentage))
            let expansionString = repeat(" ", w - strlen(foldSizeStr) - strlen(line) - strlen(foldLevelStr) - strlen(foldPercentage))
            return line . foldSizeStr . foldLevelStr . expansionString . foldPercentage
        endfunction 
        " }}}

    " [ FileType fold ] {{{
    au FileType vim,conf,muttrc,fvwm,none 
                \ set foldmethod=marker
    autocmd FileType diff set foldmethod=diff
    " open or close fold with "space"
    nnoremap <SPACE> za 
        " }}}

    " [ syntax ] {{{
    syntax enable   " enable syntax highlighting
    syntax on       " follows colorscheme to highlight.
    " }}}

    " [ indent ] {{{2
    set autoindent  " smartindent is stupid cause 'cindent'
    set wrap        " how text displayed.
  " set whichwrap=b,s,h,l,<,>,~,[,] " everything wraps
    "             | | | | | | | | |
    "             | | | | | | | | +-- "]" Insert and Replace
    "             | | | | | | | +-- "[" Insert and Replace
    "             | | | | | | +-- "~" Normal
    "             | | | | | +-- <Right> Normal and Visual
    "             | | | | +-- <Left> Normal and Visual
    "             | | | +-- "l" Normal and Visual (not recommended)
    "             | | +-- "h" Normal and Visual (not recommended)
    "             | +-- <Space> Normal and Visual
    "             +-- <BS> Normal and Visual
    " }}}

    " [ filetype ] {{{
    filetype plugin indent on " combine three into one.
        " filetype on " enables filetype detection
        " filetype plugin on " enables filetype specific plugins
        " filetype indent on  " 
    " }}}

    " [ tab ] {{{2
    set tabstop=4
    set expandtab 
    set softtabstop=4
    set shiftwidth=4
    set smarttab
    " }}}
        
    " [ text ] {{{2
    set textwidth=100 " =0:unlimited, limit textwidth to prevent your from nesting more code blocks.
    set formatprg=""          " default is ""
    set formatoptions=tcq     " vim default is "tcq".
    set commentstring=/*%s*/  " OR #%s
    set listchars=eol:$
    " }}}

    " [ title ] {{{2
    set title                       " dynamic title
    set titleold="Hack Opened Vim"
    set titlestring=%F\ -\ Vim
    " set titlelen=95
    " }}}

    " [ statusline ] {{{2
    set laststatus=2       " show a nicer status bar.
    " TODO %#HLname#  %1* %0*
    " set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set statusline=\ %-3.3n%f%h%m%r%w%q%{fugitive#statusline()}\ %3*[%{strlen(&ft)?&ft:'none'}]%*%=0x%-8B%-14(%l,%c%V%)%<%P
"                     | | | | | | |  |                   |     ||_________________________| | |     |      |  | |     |
"                     | | | | | | |  | +highlight -------------+            | +end highlight+ |     |      |  | |     |
"                     | | | | | | |  | +filetype ---------------------------+                 |     |      |  | |     |
"                     | | | | | | |  |                   |              +separate left/right -+     |      |  | |     |
"                     | | | | | | |  |                   |              +value of byte under cursor +      |  | |     |
"                     | | | | | | |  |                   |              +line number ----------------------+  | |     |
"                     | | | | | | |  |                   |              +column number -----------------------+ |     |
"                     | | | | | | |  |                   |              +vertical column number ----------------+     |
"                     | | | | | | |  +-fugitive Git -----+              +percent -------------------------------------+
"                     | | | | | | +-- "[QuickFix List]" or "[Location List]"
"                     | | | | | +-- preview window flag "[Preview]"
"                     | | | | +-- Readonly flag "[RO]"
"                     | | | +-- modified flag "[+]"
"                     | | +-- help buffer flag text is "[help]"
"                     | +-- path of file
"                     +-- buffer number
    set shortmess="lnxtT"  " short on status line message : default is "filnxtToO"
    set ruler              " show the cursor position all the time in status line.
    set showmode           " show editing mode.
    " }}}

" }}}

" Key Bindings {{{1
    " command: :copen QuickFix window.
    map <F3> :cwindow<CR>
    " command: :lopen LocationList window.
    map <F4> :lwindow<CR> 
    " FIXME test whether this is error.
    " autocmd VimEnter * :botright cwindow
    " autocmd VimEnter * :botright lwindow
" }}}

" [ Misc Settings ] {{{1
" FIXME write large file options, you can autocmd file... set ro  " readonly mode
    " [ large file ] {{{2
    " }}}
" }}}

" Program {{{1

    " [[ Compiler ]] {{{ SingleCompile.vim
    " set different make and compiler for different FileType
    " set makeprg=
    " map <F10> :make
    " }}}

" [[ Python Dev Env ]] {{{
" au FileType python setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4
" auto remove any extra whitespaces from the ends of lines
autocmd BufWritePre *.py normal m`:%s/\s\+$//e``
    " [ debug ] {{{2
    " pyflakes & pylint {
    function! Pyflakes()
        let tmpfile = tempname()
        execute "w" tmpfile
        execute "set makeprg=(pyflakes\\ " . tmpfile . "\\\\\\|sed\\ s@" . tmpfile ."@%@)"
        make
        cw
    endfunction

    function! Pylint()
        setlocal makeprg=(echo\ '[%]';\ pylint\ %)
        setlocal efm=%+P[%f],%t:\ %#%l:%m
        silent make
        cwindow
    endfunction
    " TODO choose one to use.
    autocmd BufWrite *.{py} :call Pyflakes()
    " autocmd BufWrite *.{py} :call Pylint()
    " }}}
" }}}

" [[ HTML ]] {{{1
" }}}

" [[ C & C++ Dev Env ]] {{{2
    autocmd FileType c,cpp setlocal cindent  " use correct indent for C.
    au BufNewFile,BufRead,BufEnter *.cpp,*.hpp set omnifunc=omni#cpp#complete#Main
    " }}}

" }}}

" [ vundle ] ( vim plugins manager ) {{{
    " [ vundle settings ]
    " XXX :BundleInstall! ( notice bang(!), to update all vundles )
    " [ advanced way ] {{{2
    " let root = '/tmp/vundle_bundles/'
    " let src = 'http://github.com/gmarik/vundle.git' 
    " let src = '~/.vim/bundle/vundle/.git' 
    "if !isdirectory(expand(root).'/vundle')
      "exec '!git clone '.src.' '.root.'/vundle'
    "endif
    "filetype off
    "syntax on
    "runtime macros/matchit.vim
    "exec 'set rtp+='.root.'/vundle'
    "call vundle#rc(root)
    "Bundle "gmarik/vundle"
    " }}}

    " [ simple way ] {{{2
    syntax on
    filetype off
    set runtimepath+=~/.vim/bundle/vundle/
    call vundle#rc()
    " let Vundle manage Vundle
    Bundle 'gmarik/vundle'
    " }}}

    " [ vundle examples ] {{{
    " Example: github username with dashes.
    " https://github.com/trapd00r/x11colors.vim.git
    " Bundle 'trapd00r/x11colors.vim'
    " Example: vim-scripts name
    " Bundle 'minibufexplorerpp'
    " Example: full uri.
    " Bundle 'git://git.wincent.com/command-t.git'
    " Bundle 'https://github.com/vim-scripts/vim-game-of-life'
    " Example: short uri
    " Bundle 'gh:gmarik/snipmate.vim.git'
    " Bundle 'github:mattn/gist-vim.git'
    " Example: local uri stuff
    " Bundle '~/Dropbox/.gitrepos/utilz.vim.git'
    " Bundle 'file://Dropbox/.gitrepos/utilz.vim.git'
    " Example: with options
    " Bundle 'rstacruz/sparkup.git', {'rtp': 'vim/'}
    " Example: Camel case
    " Bundle 'vim-scripts/RubySinatra'
    " }}}


" pathogen
Bundle 'tpope/vim-pathogen.git'

" [ program ] {{{

" TODO
" Bundle 'fholgado/minibufexpl.vim' 
    " {{{ minibufexpl
    " buffers navigation, h/l, s/v splitv/h
    " FIXME highlight current selected buffer with color
    " FIXME disable minibufexpl autostart.
    " let g:miniBufExplMinSize = 1 " enable min height
    let g:miniBufExplForceSyntaxEnable = 1 " enable syntax
    let g:miniBufExplMapWindowNavVim = 1 " enable C-h/j/k/l to Navi windows.
    let g:miniBufExplModSelTarget = 1 " if you use other explorer like taglist
    " let g:miniBufExplCloseOnSelect = 1 " close after you selected one buffer.
    " MiniBufExpl Color Examples, [ load before colorscheme ]
    hi link MBEVisibleChanged Error
    hi MBEVisibleNormal guifg=#5DC2D6 ctermfg=081 ctermbg=081
    hi MBEVisibleActive guifg=#A6DB29 ctermfg=154 ctermbg=154 
    hi MBEVisibleChanged guifg=#F1266F ctermfg=203 ctermbg=203
    hi MBEVisibleChangedActive guifg=#F1266F ctermfg=203 ctermbg=203
    " windows navigation {{{2
    noremap <C-h> <C-w>h
    noremap <C-j> <C-w>j
    noremap <C-k> <C-w>k
    noremap <C-l> <C-w>l
    " }}}

" Bundle 'taglist.vim' 
    " {{{ <F12>
"     let Tlist_Ctags_Cmd='/usr/bin/ctags'
"     let g:ctags_statusline = 1 " Display function name in status bar:
"     let generate_tags = 1 " Automatically start script
"     let Tlist_Show_One_File = 1 " only show tags about current file. not all files.
"     let Tlist_Use_Horiz_Window = 0 " Displays taglist results in a vertical window:
"     let Tlist_WinWidth = 20 " window width
"     let Tlist_Inc_Winwidth = 0 " for console/terminal vim.
"     let Tlist_Compact_Format = 1 " empty lines are used to separate different tag types.
"     let Tlist_GainFocus_On_ToggleOpen = 1 " move cursor to taglist window when you open taglist window.
"     let Tlist_File_Fold_Auto_Close = 1 " open tags tree for current buffer, close others.
"     let Tlist_Process_File_Always = 1 " use these commands without opening the taglist window.
"     let Tlist_Enable_Fold_Column = 0 " not display vim fold column in the taglist window.
"     " let Tlist_Display_Prototype = 1 " display tag prototypees instead of the tag name.
"     " let Tlist_Display_Tag_Scope = 0 " not display the scope of the tags next to the tag names
"     " let Tlist_Use_Right_Window = 1 " window will appear on the right hand side.
"     " let Tlist_Exit_OnlyWindow = 1 " only taglist window opend, and you want to close vim.
"     nnoremap <F12> :TlistToggle<CR>
"     " }}}

Bundle 'Tagbar' 
    " {{{ <F12>
    " FIXME Tagbar will auto-refresh vim. 
    let g:tagbar_ctags_bin = '/usr/bin/ctags' " default empty | '/usr/bin/ctags'.
    let g:tagbar_width = 20
    let g:tagbar_compact = 1 " omitting blank lines. 
    let g:tagbar_left = 0
    let g:tagbar_autoshowtag = 1 " auto open folds when tag in folds.
    let g:tagbar_autofocus = 1 " autofocus to tagbar window when opened.
    let g:tagbar_autoclose = 0 " auto close tagbar when you jump to tag
    let g:tagbar_sort = 1 " sort according to their name.
    let g:tagbar_expand = 0 " vim window will be expanded by the width of tagbar window if using GUI vim.
    let g:tagbar_foldlevel = 99 " initial foldlevel for folds in tagbar.
    let g:tagbar_usearrows = 0 " { Windows only }
    " let g:tagbar_systemenc = "utf-8" " value of 'encoding'.
    nnoremap <F12> :TagbarToggle<CR>
    " autocmd VimEnter * nested TagbarOpen
    " change tagbar color.
	" highlight TagbarScope guifg=Green ctermfg=Green
    " }}}

    " Bundle 'indexer.tar.gz'
" Bundle 'AutoTag' " 
    " AutoTag does not work for Tagbar.

Bundle 'TaskList.vim' 
    " {{{ \t
    " map <leader>v <Plug>TaskList
    let g:tlWindowPosition = 1 " 1: bottom, 0: top.
    let g:tlRememberPosition = 1 
    let g:tlTokenList = ["FIXME", "TODO", "XXX", "FUCK", "NOTE"]
    " }}}

" [ Completion ]
    " FIXME use Ctrl-j/k to select completion. modify in script.
Bundle 'AutoComplPop' 
    " {{{ Ctrl-y: yes. NOT ENTER !!! ( enter will jump to next line. )
    " FIXME , let popup original string, when HTML, then I type will change into HTML, not html, so that can not use tab to complete.
    " let g:acp_enableAtStartup = 0 " disable run at startup
    " let g:acp_mappingDriven = 0 " non-zero is triggered by key mappings instead of CursorMovedI event.
    " FIXME add snipMate into g:acp_completeOption popup menu list.
    let g:acp_completeOption = '.,w,b,t,i,u' " set to 'complete'.
    " let g:acp_completeOption = '.,w,b,t,i,u,k' " set to 'complete'.
                               "| | | | | | \dictionary.
                               "| | | | | \unloaded buffers.
                               "| | | | \current and included files.
                               "| | | \tag completion.
                               "| | \other loaded buffers that are in buffer list.
                               "| \buffers from other widnows.
                               "\current buffer.
        " spell & dictionary. FIXME FileType together with another place
        autocmd FileType mail,text,tex,markdown,org,tpp,cvs,none 
                    \ let g:acp_completeOption = '.,k'
        autocmd FileType vimwiki,mail,text,tex,markdown,org,tpp,cvs,none
                    \ let g:acp_behaviorKeywordLength = 5
    let g:acp_completeoptPreview = 0 " python etc show preview window when completion.
    " let g:acp_behaviorKeywordCommand = "\<C-p>" " command for keyword completion.
    let g:acp_behaviorKeywordLength = 4 " NOTE: if this value is <= other Length, AutoComplPop will not complete.
    let g:acp_behaviorFileLength = 1 " file
    let g:acp_behaviorPythonOmniLength = 0 " Python. disable acp_behaviorKeywordLength if you want to enable this.
    let g:acp_behaviorPerlOmniLength = 0 " Perl
    let g:acp_behaviorXmlOmniLength = 0 " XML
    let g:acp_behaviorHtmlOmniLength = 1 " HTML
    let g:acp_behaviorCssOmniPropertyLength = 1 " CSS
    let g:acp_behaviorCssOmniValueLength = 0 " CSS
    " let g:acp_behavior = {} " for advanced users.
        " FIXME let snipMate complete add into popup list.
        " let g:acp_behaviorSnipmateLength = 1 " =0 will ONLY popup complete snipMate.
        " for snipMate.vim {{{ " add following to plugin/snipMate.vim
        "fun! GetSnipsInCurrentScope()
            "let snips = {}
            "for scope in [bufnr('%')] + split(&ft, '\.') + ['_']
                "call extend(snips, get(s:snippets, scope, {}), 'keep')
                "call extend(snips, get(s:multi_snips, scope, {}), 'keep')
            "endfor
            "return snips
        "endf
        "There is the restriction on this auto-popup, that the word before cursor must
        "consist only of uppercase characters.
        "}}}
    " }}}

" TODO better combine SuperTab-continued. with AutoComplPop into one.
Bundle 'SuperTab-continued.' 
    " {{{ <Tab>
    " perform all your insert completion using the "Tab" key. <cr> to end completion.
    " let SuperTab decide which completion mode to use and should play with OmniCompletion
    let g:SuperTabMappingTabLiteral = '<c-tab>' " insert true TAB
    let g:SuperTabDefaultCompletionType = "context" " XXX MUST set in pythoncomplete, set completefunc/omnifunc.
    let g:SuperTabContextDefaultCompletionType = "<c-p>" " when set upper 'context'.
    " let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
    " let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
    " let g:SuperTabContextDiscoverDiscovery =
        " \ ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]
    " let g:SuperTabMappingForword = '<c-space>' " replace default <Tab> 
    let g:SuperTabLongestEnhanced = 1 " when you have 'longest' in completeopt, enhanced longest.
    let g:SuperTabLongestHighlight = 0 " highlight first one in popup menu let you hit <enter>.
    let g:SuperTabCrMapping = 1 " <Enter> will not jump to next line.
    " }}}

" [ Omni ]
Bundle 'c9s/perlomni.vim'
Bundle 'pythoncomplete'
    " TODO if SuperTab or AutoComplPop can work Completion too. remove this.
    autocmd FileType python set omnifunc=pythoncomplete#Complete
    " autocmd FileType python set completefunc=pythoncomplete#Complete

" [ Navigation ]
" Bundle 'Command-T'
Bundle 'The-NERD-tree' 
    " {{{ <F11> :NERDTree [dir|bookmark-name]
    " let loaded_nerd_tree=1 " let vim can not load NERDTree.
    let NERDChristmasTree = 1 " colourful. =0 for more vanilla looking tree.
    let NERDTreeAutoCenter = 1 " default = 1.
    let NERDTreeAutoCenterThreshold = 3 " default = 3.
    let NERDTreeCaseSensitiveSort = 0 " default = 0.
    let NERDTreeChDirMode = 1 " 0/1/2
    let NERDTreeHighlightCursorline = 1 " highlight cursorline.
    let NERDTreeHijackNetrw = 1 " for :edit <dir> open 'secondary' NERD tree.
    let NERDTreeIgnore = ['\~$', '\.log$', '\.pyo$', '\.swp$', '\.bak$'] " a list of regex.
    let NERDTreeBookmarksFile="$HOME/.vim/NERDTreeBookmarks" " where Bookmarks are saved.
    let NERDTreeQuitOnOpen = 0 " does not close after open. default=0.
    let NERDTreeShowBookmarks = 1 " show Bookmarks when open NERD-tree.
    let NERDTreeShowHidden = 0 " does not show hidden files.
    let NERDTreeShowLineNumbers = 0 " do not show line numbers, default=0
    let NERDTreeWinPos = "left" " NERD-tree window position.
    let NERDTreeWinSize = 20 " window size, default=31.
    nmap <silent> <F11> :NERDTreeToggle<CR>
    " }}}
" Bundle 'project.tar.gz'
Bundle 'kien/ctrlp.vim'
    " {{{ :CtrlP to full path fuzzy(regex grep) file buffer and MRU. :help ctrlp.txt
    " let g:ctrl_map = '<c-p>' " for normal mode press Ctrl-P.
    " let g:loaded_ctrlp = 1 " disable plug completely.
    " let g:ctrlp_by_filename = 0 " set =1 will search by filename (not full path), default.
    let g:ctrlp_regexp_search = 1 " =1 to set full regexp search as default  mode.
    let g:ctrlp_persistent_input = 2 " remember the last input string and position of selection in window.
    " let g:ctrlp_match_window_reversed = 1 " reverse matching window.
    let g:ctrlp_split_window = 2 " how the file is to be opened.
    let g:ctrlp_ignore_space = 1 " =1 to ignore whitespaces in filenames and directory.
    " let g:ctrlp_working_path_mode = 1 " parent directory of current file.
    " let g:ctrlp_root_markers = [''] " 
    " let g:ctrlp_max_height = 10 " max height.
    let g:ctrlp_use_caching = 1 " =0 to disable pre-session caching.
    " Note: you can quickly purge the cache by pressing <F5>.
    let g:ctrlp_clear_cache_on_exit = 0 " =0 to enable cross-sessions caching.
    " let g:ctrlp_cache_dir = $HOME " set the parent dir for '.ctrlp_cache' dir.
    " let g:ctrlp_prompt_mappings = {
    let g:ctrlp_mru_files = 1 " =0 to disable Most Recently Used files.
    " let g:ctrlp_mruf_max = 50
    " let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*' " MacOSX/Linux
    " let g:ctrlp_mruf_include = '\.py$\|\.rb$' " let MRU only remember some files.
    " let g:ctrlp_dotfiles = 1 " =0 to disable search dotfiles and dotfirs.
    " set wildignore+=*/.git/*,*/.hg/*,*/.svn/*  " Linux/MacOSX
        " FIXME this wildignore set will lead Vundle install error.
    " let g:ctrlp_highlight_match = [1, 'Function'] " highlight of matched patterns and group.
    " let g:ctrlp_max_files = 20000 " max number of files to scan. =0 for no limit.
    " let g:ctrlp_max_depth = 40 " maximum depth of a directory tree to recurse into.
    let g:ctrlp_live_update = 1
    " let g:ctrlp_user_command = ''
    let g:ctrlp_open_new_file = 3
    " let g:ctrlp_max_history = &history " from set history=50
    " }}}

" [ VCS ]
Bundle 'fugitive.vim'
    " {{{ :Git [args] :Gedit HEAD <CR> :Gdiff :Gread :Gstatus :Gcommit 
    " TODO learn this.
    " }}}
Bundle 'tpope/vim-git'
    " {{{ syntax, indent, filetype plugin for git, gitcommit, gitconfig, gitrebase, and gitsendemail. 
    " Bundle 'git.zip'
    " }}}
" Bundle 'vcscommand.vim'

" [ Web ]
" Bundle 'ZenCoding.vim'
" Bundle 'othree/html5.vim'
    " html5 OmniCompletion and syntax.

" ~/.vim/syntax/css3.vim
    au BufRead,BufNewFile *.css set ft=css syntax=css3

" [ compile ]
Bundle 'SingleCompile'
    " {{{ <F9> compile <F10> compile&run, without leaving vim. QuickFix :cope to see error list.
    " :SCChooseCompiler to choose compiler, :SCViewResult to see run result. :SCCompileRunAsync
    nmap <F9> :SCCompile<cr>
    nmap <F10> :SCCompileRun<cr>
    " TODO add Function key for view run result.
    " nmap <F8> :SCViewResult<cr>
    let g:SingleCompile_asyncrunmode = 'auto' " default='auto'
    let g:SingleCompile_showquickfixiferror = 1 " auto show error.
    " let g:SingleCompile_showresultafterrun = 1 " TODO whether set this option.
    " TODO uncomment this.
    " call SingleCompile#SetCompilerTemplate('filetype', 'compiler', 'compiler_name', 'command', 'flag', 'run_command')
    " call SingleCompile#ChooseCompiler('filetype', 'compiler')
    "call SingleCompile#SetCompilerTemplate('html', 'elinks', 'Elinks', 'elinks', '', '')
    "call SingleCompile#SetCompilerTemplate('html', 'chromium-browser', 'chromium', 'chromium-browser', '', '')
    "call SingleCompile#ChooseCompiler('html', 'chromium')
    call SingleCompile#SetCompilerTemplate('html', 'luakit', 'Luakit', 'luakit', '', '')
    call SingleCompile#ChooseCompiler('html', 'luakit')
    " }}}

" [ Revision History ]
Bundle 'Gundo'
    " [ Gundo ] {{{2
    " let g:gundo_width = 60
    let g:gundo_preview_height = 15
    let g:gundo_right = 1
    map <silent> <F8> :GundoToggle<CR>
    " }}}

" [ snippets ] 
Bundle 'msanders/snipmate.vim'
    " {{{ snipMate -> Tab, C-j / C-k to complete.  <c-r><tab> to pop available list.
    let g:snips_author = 'stardiviner'
        " { XXX change default <Tab> complete into <C-J> in /after/plugin/snipMate.vim
        "ino <c-j> <c-r>=TriggerSnippet()<cr>
        "snor <c-j> <esc>i<right><c-r>=TriggerSnippet()<cr>
        " }
    " }}}

    " FIXME try this one.
" Bundle 'UltiSnips'
    " {{{ Tab, Ctrl-h(remove forward one step), 
    " UltiSnips is an implementation that is developed with in the philosophy of TDD (Test driven development). 
    " g:UltiSnipsExpandTrigger               <tab>
    " g:UltiSnipsListSnippets                <c-tab>
    " g:UltiSnipsJumpForwardTrigger          <c-j>
    " g:UltiSnipsJumpBackwardTrigger         <c-k>
    " FIXME whether add this line under vundle.
    " set runtimepath+=~/.vim/UltiSnips/
    " }}}

" Bundle 'snippetsEmu'
" Bundle 'snippets.vim'
    " manage snippets

" [ template ]

" [ test ]
" Bundle 'runVimTests'

" [ doc ]
" An extensible help system ( K )
" Bundle 'Manuals'
    " let g:vxlib_manuals_directory="~/.vim/manual"

" [ Python ]
" TODO compare this python-mode with others,
" Bundle 'klen/python-mode.git'
    " {{{3 K: show pydoc, <C-space>: Rope autocomplete, <leader>r: run code, <leader>b: set/unset breakpoint.
    " pylint, rope, pydoc :help ropevim.txt
    let g:pymode_run = 1 " Load run code plugin.
    let g:pymode_run_key = 'R' " Set key 'R' for run python code.
    " pylint
    let g:pymode_lint = 0 " Disable pylint checking every save.
    let g:pymode_lint_write = 1 " Check code every save.
    let g:pymode_lint_cwindow = 1 " Auto open cwindow if errors be finded.
    let g:pymode_lint_signs = 1 " Place error signs.
    " pylint
    let g:PyLintCWindow = 1 " open QuickFix window when find bugs.
    let g:PyLintSigns = 1 " Place signs with errors.
    let g:PyLintOnWrite = 1 " Run pylint on buffer write.
    let g:PyLintDissabledMessages = 'C0103,C0111,C0301,W0141,W0142,W0212,W0221,W0223,W0232,W0401,W0613,W0631,E1101,E1120,R0903,R0904,R0913' " Disable PyLint messages
    " Rope refactoring library.
    let g:pymode_rope = 1 " Load rope plugin.
    " RopeVim settings
    let g:ropevim_codeassist_maxfixes=10
    let g:ropevim_guess_project=1
    let g:ropevim_vim_completion=1
    let g:ropevim_enable_autoimport=1
    let g:ropevim_autoimport_modules = ["os", "shutil"]
    " pydoc
    let g:pymode_doc = 1 " Load show documentation plugin.
    let g:pymode_doc_key = 'K' " Key for show python documentation.
    let g:pydoc = 'pydoc' " Exetable command for documentation search.
    " other stuff
    let g:pymode_breakpoint = 1 " Load breakpoints plugin
    let g:pymode_breakpoint_key = '<leader>b' " Key for set/unset breakpoint
    let g:pymode_utils = 1 " Load utils plugin
    let g:pymode_utils_whitespaces = 1 " Autoremove unused whitespaces
    " }}}

" Bundle 'indentpython.vim--nianyang'
    " best python indent from vim
" TODO choose the prefer in bellowing, see README or in vim.org
" Bundle 'pylint.vim'
Bundle 'pyflakes.vim'
    let g:pyflakes_use_quickfix = 1 " default=1.
" VimPdb.vim Python debug
" Bundle 'pyunit'
" Bundle 'Pydiction'

Bundle 'fs111/pydoc.vim'
    " press "K" to see python Doc.
Bundle 'xolox/vim-pyref.git'
    " {{{ python and lib refence, django document, "F1" only work in python buffer.
    " let g:pyref_mapping = 'K'
    let g:pyref_python = '/usr/share/doc/python2.7/html/'
    let g:pyref_django = '/usr/share/doc/python-django-doc/html/'
    " }}}
" Bundle 'jbking/vim-pep8.git'
    " {{{ XXX Alpha version.
    " inspired from pyflakes.vim
    " }}}

" Bundle 'pythonhelper'
    " display current class, method or function in the statusline. smarter than taglist
    " XXX this will disable original vimrc statusline= setting.
    " {{{
    " let g:pydiction_location='~/.vim/bundle/Pydiction/complete-dict'
    " }}}

    
" Bundle 'python.vim'
    " A set of menus/shortcuts to work with Python files 
Bundle 'python.vim--Vasiliev'
    " Enhanced version of the python syntax highlighting script 
Bundle 'tmhedberg/SimpylFold.git'
    " simple fold for python indent

" [ C ]
" Bundle 'c'

" [ Perl ]
" Bundle 'perl-support.vim'

" [ shell ]
" Bundle 'bash-support.vim'
    " TODO set bash-support for vimrc.

" [ Commenter ]
Bundle 'The-NERD-Commenter'
    " TODO learn this.
    " let loaded_nerd_comments=1 " turn off this script.

" Bundle 'SaveSigns'

" [ search & replace ]
" Bundle 'grep.vim'
Bundle 'EasyGrep'

" [ highlight ]
" Bundle 'Mark'

" [ text-object ]
" Bundle 'CountJump'
" Bundle 'camelcasemotion'
" Bundle 'surround.vim'

" [ wiki & note ]
Bundle 'vimwiki'
    " {{{3 \ww: open vimwiki, \w\w: open today diary, \wi: open diary index.
    " TODO use Txtfmt, and utl.vim to enhance vimwiki.
    let wiki = {}
    let wiki.path = '~/.vim/vimwiki/'
    let wiki.path_html = '~/.vim/vimwiki-wiki/output/'
    let wiki.html_header = '~/.vim/vimwiki-wiki/header.tpl'
    " TODO write an footer for convert for every page 
    " let wiki.html_footer = '~/.vim/vimwiki/template/footer.tpl'
    let wiki.nested_syntaxes = {'py': 'python', 'pl': 'perl', 'c': 'c',
                \ 'html': 'html', 'js': 'javascript', 'css': 'css', 'xml': 'xml',
                \ 'sh': 'sh', 'zsh': 'zsh',
                \ 'sed': 'sed', 'awk': 'awk', 'lex': 'lex',
                \ 'markdown': 'markdown', 'org': 'org',
                \ 'man': 'man', 'help': 'help', 'vim': 'vim', 'conf': 'config'}
    let wiki.auto_export = 0 " auto convert into HTML when saving.
    " FIXME author can let vimwiki auto display syntax color depend on (((word, not this wiki.nested_syntaxes
    " {{{ vimwiki-2
    " let wiki_2 = {} 
    " used for 2\ww
    " ln -s vimwiki_public/ /var/www/wiki/
    "let wiki_2.path = '~/.vim/vimwiki-blog/'
    "let wiki_2.path_html = '~/.vim/vimwiki_blog/output/'
    "let wiki_2.html_header = '~/.vim/vimwiki-blog/header.tpl'
    " let wiki_2.html_footer = '~/.vim/vimwiki-blog/footer.tpl'
    " let wiki_2.auto_export = 1
    " let wiki_2.ext = '.pub' " default is .wiki
    " }}}

    let g:vimwiki_list = [wiki] " use wiki2 ??? [wiki, wiki_2]
    " -----------------------------------------------------
    " let g:vimwiki_list = [{'path': '~/.vim/vimwiki/',
                " \ 'path_html': '~/.vim/vimwiki-wiki/output/',
                " \ 'auto_export': 1,
                " \ 'index': 'main',
                " \ 'css_name': 'css/style.css',
                " \ 'syntax': 'media',
                " \ 'ext': '.wiki',
                " \ 'template_path': '~/.vim/vimwiki-wiki/template/' " apply template with adding %template person
                " \ 'template_default': 'def_template',
                " \ 'template_ext': '.html'},
                " \ {'path': '~/.vim/vimwiki2/',
                " }]
    " TODO http://www.fanhe.org/blog/2011/01/push-vimwiki-to-github/ push vimwiki to github, bind a domain.
    " let g:vimwiki_dir_link = 'index' " to directory. OR = '' -> use netrw.
    let g:vimwiki_camel_case = 0 " if you do not want WikiWord to be a link. prefer use [[]].
    let g:vimwiki_use_mouse=0 " disable mouse.
    let g:vimwiki_hl_headers = 1 " use VimwikiHeader1-6
    let g:vimwiki_folding = 1 " disable folding. speed up file.
    let g:vimwiki_fold_lists = 1
    let g:vimwiki_fold_trailing_empty_lines = 0 " Fold only one empty line.
    let g:vimwiki_browsers = ['/usr/bin/luakit']
    let g:vimwiki_table_auto_fmt = 1 " auto format table.
    let g:vimwiki_html_header_numbering = 1
    let g:vimwiki_html_header_numbering_sym = '.'
    let g:vimwiki_hl_cb_checked = 1 " Checked list items can be highlighted with a color.
    let g:vimwiki_auto_checkbox = 1 " if no, creat checkbox when toggle list item.
    " let g:vimwiki_listsyms = '.oOX' " todo list: check/uncheck.
    let g:vimwiki_stripsym = '_' " filename can not use /*?<>:
    " let g:vimwiki_badsyms = ' ' " filename treat space as bad.
    let g:vimwiki_file_exts = 'pdf,txt,doc,xls,php,zip,rar,7z,html,gz,tar.gz,tar.bz2,jpg,png,py,sh'
    " let g:vimwiki_valid_html_tags = 'b,i,s,u,sub,sup,kbd,br,hr'
    " let g:vimwiki_user_htmls = 
    let g:vimwiki_list_ignore_newline = 1 " ignore newlines in list items.
    let g:vimwiki_use_calendar = 1
Bundle 'vim-scripts/calendar.vim--Matsumoto.git'
    " FIXME I hope calendar vim plugin can jump to next date/item with j/k/h/l , just like a another fix on 
    let g:calendar_focus_today = 1
    let g:calendar_mark = 'right'
    let g:calendar_navi = 'bottom' " top, bottom, both
    let g:calendar_datetime = 'statusline' " show current date and time. OR 'statusline' , ''
    " }}}

" Bundle 'xolox/vim-notes.git'
    " :help notes.txt

" Bundle 'VOoM'
    " {{{2 Two-pane outliner and related utility.
    " to test code snippet one one node. like "python".
    " let g:voom_tree_width = 30
    " let g:voom_log_height = 10
    " }}}

Bundle 'sjl/vim-orgmode.git'
    " TODO learn this.
    " {{{3 Text outlining and task management for Vim based on Emacs' Org-Mode. http://orgmode.org/
    let g:org_heading_highlight_colors = ['Title', 'Constant', 'Identifier',
                \ 'Statement', 'PreProc', 'Type', 'Special']
    let g:org_heading_highlight_levels = len(g:org_heading_highlight_colors)
    let g:org_heading_shade_leading_stars = 1
    " let g:org_todo_keywords = ['TODO', '|', 'DONE']
    " let g:org_todo_keyword_faces = []
    let g:org_todo_keywords = [['TODO', 'WAITING', '|', 'DONE'],
    \		['|', 'CANCELED']]
    let g:org_todo_keyword_faces = [['WAITING', 'cyan'], ['CANCELED',
    \		[':foreground red', ':background black', ':weight bold',
    \		':slant italic', ':decoration underline']]]
    " Required: (utl.vim), speeddating.vim
        " {{{ Univeral Text Linking 
    Bundle 'speeddating.vim'
        " <C-A> <C-X>
    Bundle 'utl.vim'
        " TODO learn this.
        " Univeral Text Linking - Execute URLs, footnotes, open emails, organize ideas
        let g:utl_opt_verbose=0 " does not verbose mode.
    Bundle 'repeat.vim'
    Bundle 'narrow_region'
        " }}}
    " }}}

" Bundle 'Txtfmt-The-Vim-Highlighter'
    " TODO learn ":help txtfmt"
    " TODO try to combine ":set ft=txtfmt" with vimwiki .
" Bundle 'Tabular'
    " FIXME learn this.
    " let g:taburl_loaded = 1 " avoid loaded.
" Bundle 'DrawIt'
    " FIXME learn this.
" TODO try Align.vim

Bundle 'vimspell'
    " {{{3 '\sc' to spellcheck, 'z=' to spellsuggest. 'zg' accept wrong words.
    " spell & dictionary FIXME FileType together with another place.
    au FileType vimwiki,mail,text,tex,markdown,org,tpp,cvs set spell " vim default spellcheck
    set spellfile=~/.vim/spell/en.utf-8.add " 'zg' add to this file.
    set spellsuggest=best " default and fast list.
    let spell_insert_mode = 1 " after <Space> will be checked.
    let spell_no_readonly = 1  "no spell check for read only files.
    let spell_auto_type = "vimwiki,mail,text,html,tex,markdown,org,tpp,cvs,none"
    let spell_auto_jump = 1
    let spell_markup_ft = "vimwiki,mail,text,html,tex,markdown,org,tpp,cvs,none" " used to highlight
    set mousemodel=popup 
    " let spell_guess_language_ft = "vimwiki,mail,text,html,tex,markdown,org,tpp,cvs,none"
    " let spell_accept_map="<Leader>su"
    nmap <silent> <leader>sc :set spell!<CR>
    " }}}

" Bundle 'Vim-Blog'
" Bundle 'VimRepress' 
    " {{{3 :BlogNew [post|page] :BlogSave [draft|publish] :BlogUpload <file> :BlogCode [python]
    " if you need Markdown support, run `$ sudo apt-get install python-markdown`
    let VIMPRESS = [{'username':'stardiviner',
                    \ 'password':'chrisM.sprite324',
                    \ 'blog_url':'http://stardiviner.wordpress.com/'
                    \},
                    \{'username':'numbchild',
                    \ 'password':'numbchild324',
                    \ 'blog_url':'http://numbchild.wordpress.com/'
                    \}] 
    " }}}

" [ Color ]
Bundle 'colorizer'
    " :ColorHighlight
    " display #rgb or #rrggbb color 
" Bundle 'trapd00r/x11colors.vim'
    " display X11 color name with color
" Bundle 'css_color.vim'
    " display css colors
" Bundle 'ColorV'
    " :ColorVlist | choose and display color
" Bundle 'colorsel.vim'
    " visual color selector
" Bundle 'godlygeek/csapprox.git'
    " This plugin makes GVim-only colorschemes Just Work in terminal Vim.
    " :help csapprox.vim
" Bundle 'gui2term.py'
    " $ python3 gui2term.py sourcefile newfile
    " convert GUI colorscheme to terminal colorscheme.
" Bundle 'ScrollColors'
    " :SCROLLCOLOR <nagtive with arrow>

" [ outline ]
" Bundle 'TVO--The-Vim-Outliner'
" Bundle 'VimOutliner'

" [ key ]
" TODO install this. Bundle is not available yet.
" Bundle 'mappingmanager'
" http://www.vim.org/scripts/script.php?script_id=3768#1.0

" Bundle 'avakarev/vim-watchdog.git'
    " show u as much good info in statusline .

" Bundle 'xolox/vim-session.git'
    " {{{ :SaveSession [name], :OpenSession [name], :CloseSession, :DeleteSession, :ViewSession.
    " in ~/.vim/sessions/
    " "$ vim --servername session-plugin"
    " let g:loaded_session = 1 " avoid loading session.vim plugin.
    " If you only want to save the current tab page:
    " set sessionoptions-=tabpages
    " If you don't want help windows to be restored:
    " set sessionoptions-=help
    let g:session_directory="~/.vim/sessions/"
    let g:session_autoload='prompt' " default='prompt', / 'yes' / 'no'.
    let g:session_autosave='prompt' " default='prompt', / 'yes' / 'no'.
    let g:session_default_to_last=0 " if =1, plugin will not use default session, instead of use last session.
    " }}}

" Bundle 'TwitVim'
    " {{{ vim twitter client.
    let twitvim_login = "numbchild:numbchild324"
    let twitvim_proxy = "127.0.0.1:4444"
    let twitvim_api_root = "https://api.twitter.com/1" " use ssl.
    " let g:twitvim_enable_python = 1 " used for windows to replace curl.
    " }}}

" Bundle 'vim-pandoc/vim-pandoc.git'
    " {{{ :!markdown2pdf % 
    " convert markdown to pdf, html, latex, epub, context, odt, rst, docbook, org-mode, 
    " If you use snipMate, support some snipmate, in snippets/pandoc.snippets
"     setlocal linebreak
"     setlocal breakat-=*
"     setlocal display=lastline
"     setlocal nojoinspaces " for Shift-J to join next line to current line.
"     setlocal commentstring=<!--%s-->
"     setlocal comments=s:<!--,m:\ \ \ \ ,e:-->
"     setlocal formatoptions=1
"     let g:pandoc_auto_format = 1
    " let g:pandoc_no_folding = 1 " disable section folding.
"     let g:pandoc_use_bibtool = 1 " for snipMate tab.
    " let g:pandoc_bibfiles = ['/the/path/to/your/bibtex/file.bib']
    " }}}

" Bundle 'vim_faq'
    " {{{ :help vim_faq.txt 
    " TODO checkout this.
    " }}}
" Bundle 'vim_faq.vim'

Bundle 'chrisbra/CheckAttach.git'
    " {{{3 Attach file: <Tab> to complete. :AttachFile ~/pictures/*.jpg.
    " check attactment for mutt in present mail content keyword.
    " let g:attach_check_keywords = ',attachment'
        " {{{ the simple version of mutt CheckAttach:
"         function! CheckAttach()
"             let check='attach,attachment'
"             let oldPos=getpos('.')
"             let ans=1
"             let val = join(split(escape(check,' \.+*'), ','),'\|')
"             1
"             if search('\%('.val.'\)','W')
"                 let ans=input("Attach file?: (leave empty to abbort): ", "", "file")
"                 while (ans != '')
"                     normal magg}-
"                     call append(line('.'), 'Attach: '.ans)
"                     redraw
"                     let ans=input("Attach another file?: (leave empty to abbort): ", "", "file")
"                 endwhile
"             endif
"             exe ":write ". expand("<amatch>")
"             call setpos('.', oldPos)
"         endfu
" 
"         augroup script
"             au!
"             au BufWriteCmd,FileWriteCmd mutt* :call CheckAttach()
"         augroup END
        " }}}
    " }}}

" Bundle 'Speech'
    " use Google API to record and speech.
" Bundle 'mikewest/vimroom.git'
    " {{{ <Leader>V :VimroomToggle 
    " http://projects.mikewest.org/vimroom/
    nnoremap <silent> <F7> :VimroomToggle<CR>
    " let g:vimroom_background="black"
    let g:vimroom_min_sidebar_width=5
    let g:vimroom_width=80 " width of your workspace.
    let g:vimroom_sidebar_height=2 " if you do not want vertical padding.
    " let g:vimroom_navigational_keys=1 " j,k to navigation, 1= on. 
    " let g:vimroom_scrolloff=999 " cursor in center of screen.
    "
    " }}}

" Bundle 'VimIM'
    " Vim chinese InputMehod

Bundle 'tpope/vim-pastie.git'
    " :Pastie to paste buffer,line,file,selection,registers etc.
    " ( the parser used is derived from the vim filetype )
    " :help pastie.txt

filetype plugin on
filetype plugin indent on            " required!
set wildignore+=doc     " should not break helptags.
set wildignore+=.git    " should not break clone.
" }}}

" [[ pathogen ]] {{{
" curl https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim > ~/.vim/autoload/pathogen.vim
    " default dir in ~/.vim/bundle/
    " you can change dir name.
    " call pathogen#infect('stuff')
" :Helptags
" call pathogen#infect()
" }}}

" [[ functions ]] {{{1
" Functions name must start with an upper case to diff that built-in funct.
" you can call function with ":source file.vim" then ":call"

    " [ complete dictionary words ] {{{2 <Tab> OR <c-j> to complete words.
    "function! Tab_Or_Complete()
      "if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
        "return "\<c-j>"
      "else
        "return "\<Tab>"
      "endif
    "endfunction
    "inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
    "autocmd FileType text,mail,vimwiki,markdown,none
      "\ inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
    " }}}

    " execute mode {{{2
    "function! ScriptExecute()
        ":!chmod u+x %
        ":w
    "endfunction
    "autocmd BufWritePost *.sh :call ScriptExecute()
    "autocmd BufWritePost *.pl :call ScriptExecute()
    " }}}

    " Execute file with <Shift> E: {{{
    " TODO remove this ?
    "map <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>
    "map <buffer> <S-e> :w<CR>:!/bin/bash % <CR>
    "map <buffer> <S-e> :w<CR>:!/usr/bin/perl % <CR>
    "map <buffer> <S-e> :w<CR>:!/usr/bin/elinks % <CR>
    " }}}

    " auto remove any extra whitespaces from the ends of lines, to do it when
    " autocmd BufWritePre *.py normal m`:%s/\s\+$//e``

        " {{{ Visual OR :10,50TOhtml :TOhtml
        " convert code to HTML used for website or paste
        " let g:html_no_progress = 1 " disable progress.
        let g:html_number_lines = 1 " 1: enable linenumber, 0: no linenumber. (default: unlet g:html_number_lines)
        let g:html_use_css = 1 " generate CSS file.
        let g:html_ignore_folding = 0 " does not ignore fold.
        let g:html_dynamic_folds = 1 " mouse over will expand fold on html
        let g:html_no_foldcolumn = 0 " show foldcolumn too for dynamic_folds.
        let g:html_hover_unfold = 1 " unfold when mouse hover.
        " let g:html_no_pre = 1 " do not use <pre>
        let g:html_expand_tabs = 1
        " let g:html_diff_one_file = 1 " disable diff when in diff mode.
        " let g:html_whole_filler = 1
        let g:html_use_encoding = "UTF-8"
        " let g:html_use_xhtml = 1 " use XHTML instead of HTML.
        " script:
        " for f in *.[ch]; do gvim -f +"syn on" +"run! syntax/2html.vim" +"wq" +"q" $f; done

        " command :MyToHtml
        " Now you can select a range of lines, type :MyToHtml and use the result to post your code
        " to an HTML-enabled web forum.
        function! MyToHtml(line1, line2)
          " make sure to generate in the correct format
          let old_css = 1
          if exists('g:html_use_css')
            let old_css = g:html_use_css
          endif
          let g:html_use_css = 0
          " generate and delete unneeded lines
          exec a:line1.','.a:line2.'TOhtml'
          %g/<body/normal k$dgg
          " convert body to a table
          %s/<body\s*\(bgcolor="[^"]*"\)\s*text=\("[^"]*"\)\s*>/<table \1 cellPadding=0><tr><td><font color=\2>/
          %s#</body>\(.\|\n\)*</html>#\='</font></td></tr></table>'#i
          " restore old setting
          let g:html_use_css = old_css
        endfunction
        command! -range=% MyToHtml :call MyToHtml(<line1>,<line2>)
        " }}}

        " Insert Time
        " strftime("%Y-%m-%d")
" }}}


" [ template ] {{{
    " autocmd BufNewFile *.html 0r ~/.vim/template/html.tpl
" }}}


" [ Misc ] {{{

    " [ abbreviations ] 
    source ~/.vim/misc/abbreviations.vim

    " for Awesome Mod4-d sdcv ( OR replace viw with "vaw" )
    nnoremap <leader>wd viw 

    " F1~12 {{{2
    " TODO write a function to display this list in a window or prompt. use FunctionKeyToggle.
    " F1  -- pyref
    " F2  -- vim internal help.
    " F3  -- QuickFix
    " F4  -- Location List
    " F7  -- VimRoom
    " F8  -- Gundo Toggle
    " F9  -- SingleCompile
    " F10 -- :make / SingleCompileRun
    " F11 -- NERDTree Toggle
    " F12 -- Taglist
    " }}}

" }}}
" vim:tw=0
