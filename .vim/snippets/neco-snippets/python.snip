# Author: stardiviner [gmail: numbchild]

snippet     #!
abbr        #!/usr/bin/env python
prev_word   '^'
    #!/usr/bin/env python

# header
snippet     env
abbr        #!/usr/bin/env python3
prev_word   '^'
    #!/usr/bin/env python3
    # encoding: utf-8

    ${0}

snippet     env3
abbr        #!/usr/bin/env python3
prev_word   '^'
    #!/usr/bin/env python3
    # encoding: utf-8

    ${0}

snippet     env2
abbr        #!/usr/bin/env python
prev_word   '^'
    #!/usr/bin/env python
    # encoding: utf-8
    ${0}

# for chinese encoding.
snippet     coding
abbr        # -*- coding: utf-8 -*-
prev_word   '^'
    # -*- coding: utf-8 -*-

# import
snippet     imp
abbr        import ...
prev_word   '^'
    import ${1:module/library/package}

snippet     impf
abbr        from importable import objects
prev_word   '^'
    from ${1:module/library/package} import ${2:objects}

# doc
snippet     docs4s
abbr        docs for script
prev_word   '^'
    '''
    Author: stardiviner${1}
    File: ${2:filename}
    Date: `strftime("%d %b %Y")`
    '''

snippet     docs4c
abbr        docs for class
prev_word   '^'
	'''${1:The short first line.}
	${2:rest}'''

snippet     docs4f
abbr        docs for function
prev_word   '^'
	'''${1:The short first line.}

	${2:the rest Docsting.}'''
	${0}

snippet     docs
abbr        docstring
prev_word   '^'
	'''${1:The short first line.}

	${2:the rest Docsting.}'''
	${0}

delete      def
snippet     def
abbr        def func(*args, **kwargs): ...
prev_word   '^'
    def ${1:funcName}(${2:*args, **kwargs}):
        ${3:pass}

delete      defm
snippet     defm
abbr        def method(self, ..): ...
prev_word   '^'
    def ${1:name}(self, ${2:*args, **kwargs}):
        """${3:method documentation}"""
        ${4:pass}

snippet     cl
abbr        class Class: ...
prev_word   '^'
    class ${1:Name (first letter uppercase)}():
        """${3:class documentation}"""
        def __init__(self, ${4}):
            """${5:__init__ documentation}"""
            ${6:pass}

delete      class
snippet     class
abbr        class Class(...): ...
prev_word   '^'
    class ${1:Name (first letter uppercase)}(${2:object (super class)}):
        """${3:class documentation}"""
        def __init__(self, ${4}):
            """${5:__init__ documentation}"""
            ${6:pass}

snippet     init
abbr        def __init__(self, ..): ...
prev_word   '^'
    def __init__(self, ${1}):
        ${2:compond commands}

# class property (setter, getter, deleter)
snippet     propertySetter
abbr        @property.setter
prev_word   '^'
    @property
    def ${1:attribute name}(self):
        """trun an attribute into property"""
        return self.__${2:private attribute}

    @${3:property name}.setter
    def ${4:property name}(self, ${5:parameter}):
        ${6:assert condition, "condition declaration"}
        self.__${7:private attribute} = ${8:parameter}


# new property
snippet     property
abbr        property
prev_word   '^'
	def ${1:foo}():
	    doc = "${2:The $1 property.}"
	    def fget(self):
	        ${3:return self._$1}
	    def fset(self, value):
	        ${4:self._$1 = value}
	${0}

# lambda
snippet     lambda
abbr        lambda
prev_word   '^'
	${1:var} = lambda ${2:vars} : ${3:action}
    ${0}

# FIXME self
#snippet     .
#abbr        self.
#prev_word   '^'
#   self.${1}

# __magic__
snippet     _
abbr        __magic__
prev_word   '^'
	__${1:init}__${2}
    ${0}

# [ statement ]
snippet     pr
abbr        print()
prev_word   '^'
    print(${1})
    ${0}

# [ conditions ]
snippet     ifargv1
abbr        if len(sys.argv) == 1 or .. "-h", "--help"
prev_word   '^'
    if len(sys.argv) == 1 or sys.argv[1] in {"-h", "--help"}:
        print("Usage: {0} ${1:file1 [file2 [... fileN]]}").format(sys.argv[0])
        sys.exit()

    args = sys.argv[1:]
    ${0}

# [ data types ]
snippet     namedtuple
abbr        namedtuple(typename, field_names)
prev_word   '^'
    from collections import namedtuple
    ${1:TypeName} = namedtuple('${2:TypeName}', ${4:'field_names: name, age'})
    ${5:instance} = ${3:TypeName}(${6:'NAME', AGE})


# [ Module ]
snippet     docs4m
abbr        docs for Module
prev_word   '^'
	'''
    Help on module ${1:module name}

    NAME
        ${2:module name - module description.}

    DESCRIPTION
        Public module variables:

        ${3:whitespace -- a string containing all ASCII whitespace}
    CLASSES
        ${4:builtins.object}

    class Formatter(builtins.object)
     |  Methods defined here:
     |
     |  ${5:check_unused_args(self, used_args, args, kwargs)}
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:

    FUNCTIONS
        ${6:capwords(s, sep=None)}

    DATA
        ${7}
    FILE
        ${8:file location}
	'''
    ${0}
