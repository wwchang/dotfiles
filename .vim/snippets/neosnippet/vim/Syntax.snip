# variables {{{
snippet unlet
abbr    unlet! {variable}
    unlet! ${1:variable}
# }}}

# data types {{{
snippet list
abbr    [1, 2, 3,]
    [${1}, ${2},]


snippet dictionary
abbr    {'key': value,}
alias   dict
    {'${1:key}': ${2:value}, '${3:key}': ${4:value},}


snippet key-value pair
abbr    'key': value,
    '${1:key}': ${2:value},


snippet function-reference
abbr    let Funcref = function(MyFunc)
alias   funcref
    let ${1:Funcref} = function("${2:MyFunc/s:myfunc}")
    ${3:echo $1 or call $1()}

snippet     dictionary-funcion
abbr        func! Dict.func() dict .. endfunc
alias       dictfunc
options     head
    func! ${1:Dict}.${2:func}(${3:args, ...}) dict
        return join(map(split(a:$3), 'get(self.${4:Dict's item}, v:val, "???")'))
    endf
# }}}

# control flow {{{
snippet     if
abbr        if {expr} .. endif
options     head
    if ${1:condition}
        ${2:statement}
    endif

snippet     if-else
abbr        if {expr} .. else .. endif
alias       ifelse
options     head
    if ${1:condition}
        ${2:statements}
    else
        ${3:statements}
    endif

snippet     if-elseif
abbr        if {expr} .. elseif {expr} .. endif
alias       ifelseif
options     head
    if ${1:condition}
        ${2:statements}
    elseif ${3:condition}
        ${4:statements}
    endif

snippet     else
abbr        else ..
options     head
    else
        ${1}

snippet     elseif
abbr        elseif {expr} ..
options     head
    elseif ${1:condtion}
        ${2}

snippet     while
abbr        while {expr} .. endwhile
options     head
    while ${1:condition}
        ${2:statements}
    endwhile

snippet     for
abbr        for [var] in {iterator} .. endfor
options     head
    for ${1:variable} in ${2:iterator}
        ${3:statements}
    endfor

snippet     continue
abbr        continue
options     head
    continue

snippet     break
abbr        break
options     head
    break
# }}}

# exception {{{
snippet     try
abbr        try > endtry
options     head
    try
        ${1:statements: continue/break/throw}
    endtry

# FIXME the {errmsg}, how to insert {} literally.
snippet     try-catch
abbr        try > catch {ERROR} > endtry
options     head
    try
        ${1:statements: continue/break/throw}
    catch ${2:/${3:pattern: empty, E484, Vim(cmdname):{errmsg\\} \}/}
        ${4:statements: continue/break/throw}
    endtry

snippet     try-finally
abbr        try > finally > endtry
options     head
    try
        ${1:statements -> continue/break/throw}
    finally
        ${2:statements -> continue/break/throw}
    endtry

snippet     catch
abbr        catch /Error pattern/
options     head
    catch /${1:pattern: empty, E484:, Vim(cmdname):{errmsg\\} optional}/
        ${2:statements -> continue/break/throw}

snippet     throw
abbr        throw {expr}
options     head
    throw ${1:expr}
# }}}

# function {{{
snippet     function
abbr        fun! s:funcname(args) abort .. endfun
alias       func
options     head
    fun! ${1:s:}${2:func_name}(${3:args, ...}) abort
        ${4:statements -> arguments: a:0, a:1, a:000[0]}
    endfun

snippet     function.range
abbr        fun! s:funcname(args) range .. endfun
alias       func.range
options     head
    fun! ${1:s:}${2:func_name}(${3:args, ...}) range
        ${4:statements -> arguments: a:firstline, a:lastline}
    endfun

snippet     function.dict
abbr        fun! Dict.func(args) dict .. endfun
alias       func.dict
options     head
    fun! ${1:Dict}.${2:func}(${3:args, ...}) dict
        ${4:statements -> arguments: a:0, a:1, a:000[0]}
    endfun
# }}}

# expressions {{{
# expr1
snippet     expr1
abbr        expr2 ? expr1 : expr1
alias       ternary_operator
    ${1:expr2} ? ${2:expr1} : ${3:expr1}

# expr1 recursive
snippet     expr1 recursive
abbr        expr2 > \ ? expr1 > \ : expr2 > \ ? expr1 > \ : expr1
alias       ternary_recursive
    ${1:expr2}
        \ ? ${2:expr1.1}
        \ : ${3:expr2}
            \ ? ${4:expr1.2}
            \ : ${5:expr1.2}
# }}}

# iterator: map(), filter() {{{
# map()
snippet     map
abbr        map(expr)
    map(${1:expr: list/dict}, ${2:eval string: v:val is item in expr})

# filter()
snippet     filter
abbr        filter(expr)
    filter(${1:expr: list/dict}, ${2:eval string: v:val is item in expr})
# }}}

# autocmd & augroup {{{
snippet     autocmd
abbr        autocmd {Event} {pattern} {commands}
alias       au
options     head
    autocmd ${1:Event} ${2:pattern} ${3:commands}

snippet     autocmd filetype
abbr        autocmd {Event} {pattern} {commands}
options     head
    autocmd FileType ${1:filetype} ${2:commands}

snippet     augroup
abbr        augroup {Group} .. augroup END
options     head
    augroup ${1:group name}
        autocmd!
        autocmd ${2:Event} ${3:pattern} ${4:commands}
        ${5:second autocmd}
    augroup END
# }}}

# vim:foldmethod=marker
