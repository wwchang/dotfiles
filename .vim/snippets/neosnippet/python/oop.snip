# Python Object-Oriented Programming (OOP)

snippet     class OOP
abbr        class Class(Class): """Docstring""" + def __init__(self, ):
options		head
	class ${1:Name}(${2:Classes}):
		"""${3:#:class Docstring}"""
		def __init__(self, ${4}):
			"""${5:#:__init__ Docstring}"""
			${6:#:pass}

		${0}

snippet     self
abbr        self.
	self.${1}

# __magic__
snippet     magic
abbr        __magic__
alias		_
	__${1:#:init}__${2}
	${0}

snippet     init
abbr        def __init__(self, ..): ...
options		head
	def __init__(self${1:#:, *args, **kwargs}):
		${2:#:statements}

snippet     def	define method
abbr        def method(self, ..): ...
alias		method
options		head
	def ${1:name}(self${2:#:, *args, **kwargs}):
		"""${3:#:method Docstring}"""
		${4:#:pass}

snippet     attribute internal
abbr        def __attribute(args): ...
options		head
	def __${1:attribute}(self${2:#:, *args, **kwargs}):
		"""${3:#:attribute Docstring}"""
		${4:#:statements}

snippet     property
abbr        @property > def Property(self, args): ...
options		head
	@property
	def ${1:Property}(self${2:#:, *args, **kwargs}):
		${3:#:statements}

# class property (setter, getter, deleter)
snippet		property Setter
abbr        @property + @propertyName.setter
options		head
	@property
	def ${1:attribute name}(self):
		"""trun an attribute into property"""
		return self.__${2:private attribute}

	@${3:property name}.setter
	def ${4:property name}(self, ${5:parameter}):
		${6:assert condition, "condition declaration"}
		self.__${7:private attribute} = ${8:parameter}

# new property
snippet     property define new property
abbr        def Property(): ...
options		head
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
	${0}

# vim:fdm=marker:fmr={{{,}}}:noexpandtab:sw=4:sts=4
