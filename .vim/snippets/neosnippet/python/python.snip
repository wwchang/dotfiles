# stardiviner, Email: [numbchild A/T G/mail dot com]

# [ Syntax ] {{{
# header {{{
snippet     #!
abbr        #!/usr/bin/env python
alias		env
options		head
	#!/usr/bin/env python
	# encoding: utf-8

	${0}
# }}}

# import {{{
snippet     import
abbr        import {library}
alias		i
options		head
	import ${1:module/library/package}

snippet     from
abbr        from {module} import {objects}
options		head
	from ${1:module/library/package} import ${2:objects}
# }}}

# Docstring {{{
snippet     docs
abbr        docstring
options		head
	'''${1:The short first line.}

	${2:the rest Docsting.}'''
	${0}

snippet     docs short
abbr        short Docstring
options		head
	'''${1:The short first line.}
	${2:rest}'''

snippet     docs long
abbr        long Docstring
options		head
	'''${1:The short first line.}

	${2:the rest Docsting.}'''
	${0}
# }}}

# control flow {{{
snippet     try except
abbr        try .. except ..
options		head
	try:
		${1:statements}
	except ${2:Exceptions}:
		${3:statements}

snippet     try except > finally
abbr        try: .. except: .. finally: ..
options		head
	try:
		${1:statements}
	except ${2:Exceptions}:
		${3:statements}
	finally:
		${4:statements}
# }}}

# function {{{
snippet     def
abbr        def func(*args, **kwargs): ...
alias		func,function
options		head
	def ${1:funcName}(${2:*args, **kwargs}):
		${3:pass}
# }}}

# class {{{
#snippet     class
#abbr        class Class(Class): """Docstring""" + def __init__(self, ):
#options	head
#	class ${1:Name}(${2:Classes}):
#		"""${3:class Docstring}"""
#		def __init__(self, ${4}):
#			"""${5:__init__ Docstring}"""
#			${6:pass}
#
#		${0}
# }}}

# statements {{{
# lambda
snippet     lambda
abbr        var = lambda vars : expr
	${1:var} = lambda ${2:vars} : ${3:action}
	${0}

# decorator
snippet     decorator
abbr        @decorator(args) > def func: ...
options		head
	@${1:decorator}${2:(${3:arguments\})}
	${4:@${5:second decorator\}${6:(arguments)\}}
	def ${7:function}(${8:arguments}):
		${9:statements}
# }}}

# }}}

# [ data types ] {{{
snippet     list
abbr        [1, 2, 3]
	[${1:item1}${2:, ${3:item2\}}]
snippet     tuple
abbr        (1, 2, 3)
	(${1:item1}${2:, ${3:item2\}})
snippet     dictionary
abbr        {'one': 1, 'two': 2}
alias       dict
	{${1:key}: ${2:value}, ${3:key\}: ${4:value}}
snippet     set
abbr        {1, 2, 3}
	{${1:item1}, ${2:item2}}


snippet     tuple namedtuple
abbr        namedtuple(typename, field_names)
alias		namedtuple
	${1:TypeName} = namedtuple('${2:TypeName}', ${4:'field_names: name, age'})
	${5:instance} = ${3:TypeName}(${6:'NAME', AGE})

# }}}

# [ Module ] {{{
snippet     docs for Module
abbr        Docstring for Module
options		head
	'''
	Help on module ${1:module name}

	NAME
		${2:module name - module description.}

	DESCRIPTION
		Public module variables:

		${3:whitespace -- a string containing all ASCII whitespace}
	CLASSES
		${4:builtins.object}

	class Formatter(builtins.object)
	 |  Methods defined here:
	 |
	 |  ${5:check_unused_args(self, used_args, args, kwargs)}
	 |  ----------------------------------------------------------------------
	 |  Data descriptors defined here:

	FUNCTIONS
		${6:capwords(s, sep=None)}

	DATA
		${7}
	FILE
		${8:file location}
	'''
	${0}
# }}}

# [ quick ] {{{
snippet     print
abbr        print()
alias		p
	print(${1})

snippet     return
abbr        return ...
alias       r
	return ${1}

snippet     Docstring File Docstring
abbr        File Docstring -> Author: File: Date:
options		head
	'''
	Author: stardiviner${1}
	File: ${2:filename}
	Date: `strftime("%d %b %Y")`
	'''

snippet     if main
abbr        if __name__ == "__main__": ...
options		head
	if __name__ == "__main__":
		${1:main()}

snippet     if --help
abbr        if len(sys.argv) == 1 or .. "-h", "--help"
options		head
	if len(sys.argv) == 1 or sys.argv[1] in {"-h", "--help"}:
		print("Usage: {0} ${1:file1 [file2 [... fileN]]}").format(sys.argv[0])
		sys.exit()

	args = sys.argv[1:]
	${0}
# }}}

# vim:noexpandtab:foldmethod=marker
