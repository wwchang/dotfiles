##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  <
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################

# get help
## Ctrl-b ? -- list key binds.

# set-option if -s is given, then -t target is session, if not given, then -t is window.
    ## target syntax: -t session:window.pane
    ##          example: -t program:1.2

## {{{2 [ tmux ]
    ## set-option(set) [-agsuw] [-t target-session | target-window] option value
    ## -w : window
    ## -s : server, otherwise a session option.

    ## UTF8
    setw -g utf8 on
    set -g mouse-utf8 on # request mouse input as UTF-8 on UTF-8 terminals.

    ## history
    set -g history-limit 1000 # lines


    ## {{{ [ title ]
    set -g set-titles on
    #set -g set-titles-string 'tmux: [#S:#I.#P] #T'
    set -g set-titles-string 'Tmux: #S:#I.#P'
    ## }}}

    ## {{{ [ server ]
    # set -s buffer-limit number
    set -s set-clipboard on
    set -s escape-time 250 # delay for Vim more responsive, default is 500
    # set -s quiet on  #  Enable or disable the display of various informational messages
    ## }}}

    ## {{{ [ session ]
    set -g base-index 1 # Start counting at 1, default is 0.
    set -g pane-base-index 1
    ## bell
    set -g bell-action any
    set -g bell-on-alert on
    ## default shell & command
    set -g default-shell $SHELL
    set -g default-command "$SHELL --login"
    ## default terminal
    #  $ infocmp screen-256color-bce-s
    set -g default-terminal "screen-256color" # can not display vim italic font.
    # set -g default-terminal "rxvt-256color" # can display vim italic font.
    # set -g default-terminal "screen-256color-bce-s" # can not display vim italic font.
    #set -g terminal-overrides "*88col*:colors=88,*256col*:colors=256,xterm*:colors=256"
    # use $HOME/.terminfo/ and screen_terminfo="screen-256color"
    ## default working path
    # set -g default-path ~/Git/projects # set default working path.
    ## detach
    set -g destroy-unattached off
    set -g detach-on-destroy on
    ## visual
    set -g visual-bell off
    set -g visual-content on
    set -g visual-activity on
    # set -g visual-silence on
    ## }}}

    # identifying Activity in other windows
    setw -g monitor-activity off

    ## {{{ [ window ]
    ## monitor & acitvity
    setw -g monitor-content off
    # setw -g monitor-silence 30
    ## size
    # setw -g aggressive-resize on ## NOTICE !!!
    setw -g alternate-screen on
    ## automatic rename window title.
    setw -g automatic-rename off
    ## clock
    setw -g clock-mode-colour blue
    setw -g clock-mode-style 12
    ## Prevent tmux from resizing a window to greater than width or height.
    setw -g force-height 0 # 0: unlimited
    setw -g force-width 0 # 0: unlimited
    # setw -g remain-on-exit on
    # setw -g xterm-keys on
    ## }}}

    ## {{{ [ buffer ]
    # set -s buffer-limit number
    ## }}}

    ## {{{ [ miscellaneous ]
    ## Cc,Cr # cursor color
    ## Cs,Csr # cursor style
    ## }}}

    # source <path>

## }}}

## {{{2 [ ENVIRONMENT ]
    ## set-environment(setenv) [-gru] [-t target-session] name [value]
    ## -g global, -u unset, -r remove before starting a new process.
## }}}

## {{{2 [ keybinds ] Ctrl-b (prefix)

    # reload tmux config file.
bind-key R source ~/.tmux.conf \; display "tmux config file reloaded !"

    ## bind, unbind-key [-cnr] key command [arguments]
    ## if [-n] is specified, it is not necessary to use prefix key.
    ## [-r] flag indicates the key may repeat. see the "repeat-time" option.

    ## prompt
    bind-key : command-prompt

    ## Prefix key
    #unbind-key C-b
    #set -g prefix C-a
    #bind-key C-a send-prefix
    ## allow multiple commands to be entered without pressing the prefix-key again.
    set -g repeat-time 500 # default is 500
    ## Whether a key repeats may be set when it is bound using the -r flag to bind-key.
    ## Repeat is enabled for the default keys bound to the resize-pane command.

    # set vi key binds
    set -g status-keys vi
    setw -g mode-keys vi
    ## TODO
    # vi-edit # when line editing at the command prompt.
    # vi-choice # used in like choose-window.
    # vi-copy # used in copy mode.

    # [ Copy mode ]
    # for Copy mode: copy/paste text buffer move cursor around screen.
    # "Prefix [" to start Copy mode.
    # "Prefix ]" to start paste buffer.
        # copy current buffer to system clipboard. `$ apt-get install xclip`
        # `Prefix C-c`
    bind-key C-c run "tmux save-buffer - | xclip -i -sel clipboard"
        # paste text from clipboard into tmux session.
    bind-key C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

    # Select Windows Ctrl-[1-0]
    ## XXX comment those F1~12 function key, avoid conflict with Vim.
    #bind-key -n F1 select-window -t 1
    #bind-key -n F2 select-window -t 2
    #bind-key -n F3 select-window -t 3
    #bind-key -n F4 select-window -t 4
    #bind-key -n F5 select-window -t 5
    #bind-key -n F6 select-window -t 6
    #bind-key -n F7 select-window -t 7
    #bind-key -n F8 select-window -t 8
    #bind-key -n F9 select-window -t 9
    #bind-key -n F10 select-window -t 10
    #bind-key -n F11 select-window -t 11
    #bind-key -n F12 select-window -t 12 # Ctrl-[F12]
    # select pane
    bind-key h select-pane -L
    bind-key j select-pane -D
    bind-key k select-pane -U
    bind-key l select-pane -R
    # bind-key F1 select-pane -t 1
    # resize pane
    # you can press "Prefix", then press C-h/j/k/l "sequentially".
    #set -g mouse-resize-pane on
    bind-key -r C-h resize-pane -L 5
    bind-key -r C-j resize-pane -D 5
    bind-key -r C-k resize-pane -U 5
    bind-key -r C-l resize-pane -R 5
    #bind-key x kill-pane
    bind-key x confirm-before -p "kill-pane #P? (y/n)" kill-pane
    # select window
    bind-key -r Right select-window -n
    bind-key -r Left select-window -p
    # split window: prefix s/i, |/-
    bind-key s split-window -h
    bind-key v split-window -v
    bind-key | split-window -h
    bind-key - split-window -v
    bind-key n new-window
    # cycle windows
    #bind-key -r C-h select-window -t :-
    #bind-key -r C-l select-window -t :+
    bind-key c confirm-before -p "kill-window #W? (y/n)" kill-window
    # moving and swapping:
    bind-key N swap-pane -D
    bind-key P swap-pane -U
    #bind-key J rotate-window
    #bind-key K swap-window
    # Sessions
    #bind-key t attach -d -t tmux
    # client
    bind-key -r ( switch-client -p
    bind-key -r ) switch-client -n

    ## bind-key to execute a command.
    bind-key '~' new-window "exec htop"
    bind-key / command-prompt "split-window -h 'exec man %%'"
    bind-key K command-prompt "exec killall %%" # kill process
    # bind-key S command-prompt "new-window -n %1 'ssh %1'

    ## external commands (media, volume, manpage):
    ## for ncmpcpp
    bind-key < run-shell 'ncmpcpp prev'
    bind-key > run-shell 'ncmpcpp next'
    bind-key -r 9 run-shell 'ncmpcpp volume -5'
    bind-key -r 0 run-shell 'ncmpcpp volume +5'
    # FIXME whether need &>/dev/null
    #bind-key -n F11 run-shell 'mpc volume -5 &>/dev/null'
    #unbind-key ,
    #unbind-key .
    #bind-key -r 9 run-shell 'ossvol --decrease 1 --quiet'
    #bind-key -r 0 run-shell 'ossvol --increase 1 --quiet'
    #bind-key ( command-prompt "run-shell 'ossvol --quiet --decrease %%'"
    #bind-key ) command-prompt "run-shell 'ossvol --quiet --increase %%'"
    #bind-key < command-prompt "run-shell 'mifo --prev %%'"
    #bind-key > command-prompt "run-shell 'mifo --next %%'"
    #bind-key m command-prompt "split-window -h 'exec man %%'"

    # move to next window in session with bell, activity or content alert.
    bind-key u next-window -a
## }}}

## {{{2 [ layout ] windows, pane, status line, names
    # set -g display-time 4000
    # set -g lock-after-time 1800

    ## {{{ [ pane ]
    # set -g display-panes-time 4000
    set -g display-panes-colour default
    set -g display-panes-active-colour red
    set -g pane-border-fg black
    set -g pane-border-bg default
    set -g pane-active-border-fg red
    set -g pane-active-border-bg default
    setw -g other-pane-height 40
    setw -g other-pane-width 50
    setw -g synchronize-panes off
    ## }}}

    ## {{{ [ layout mode ]
    #setw mode-attr bold
    # setw mode-fg blue
    # setw mode-bg black
        # in other method, when on, you can use "Shift-mouse" to select.
    # select-layout main-vertical # FIXME
    setw -g main-pane-height 50
    setw -g main-pane-width 81
    ## }}}

    ## {{{ [ mouse ]
    setw -g mode-mouse off # off to let mouse to select text instead of enter copy mode.
    set -g mouse-resize-pane on
    set -g mouse-select-pane off
    set -g mouse-select-window off
    ## }}}
## }}}

## {{{2 [ status line ]
    ## attr: bold, bright, underscore, dim, blink, reverse, hidden or italics.
    ## color: black, red, green, yellow, blue, magenta, cyan, white,
    ##          color0 to color255 from the 256-colour set.
    ##          default, or a hexadecimal RGB string such as ‘#ffffff’.

    ## {{{ [ status ]
    set -g status on
    set -g status-utf8 on
    set -g status-bg default # value can be "default"
    set -g status-fg default
    #set -g status-attr bold
    set -g status-justify left # right/left/centre, window list alignment.
    set -g status-interval 60
    set -g status-left-length 40
    set -g status-right-length 60

    # #H hostname of local host
    # #h hostname of local host without domain name.
    # #F current window flag
    # #I current window index
    # #P current pane index
    # #S current session name
    # #T current window title
    # #W current window name
    # ## literal #
    # #(shell-command) first line of the shell commands's output
    # #[attributes] color or attribute change
    #       #[fg=blue,bright] => multiple attributes.
    # here date,time: reference command "date"

    # #[fg=blue]#(echo "♂/♀") #[fg=cyan]fuck #[fg=red]♂
    # set -g status-right '{#P:#S} #[fg=white,dim]#(uptime|cut -d"," -f3,4,5|cut -d ":" -f2) #[fg=red][#[fg=green]%l:%M %p #[fg=magenta]%a %m-%d#[fg=red] ] #[fg=red]⌘ '

    #set -g status-left '#[fg=red] ⌘ #[fg=red]{#[fg=cyan]S:#S#[fg=red]} #[fg=cyan]#([ -n "`mpc status|grep playing`" ] && echo "♪") #[fg=green]» '
    #set -g status-right ' #[fg=green]%l:%M %p #[fg=red]%a #[fg=magenta]%j #[fg=red]⌘ '

    set -g status-left ' #[fg=black][#[fg=red]Hack#[fg=black]] #[fg=green]:: '
    set -g status-right ' #[fg=black]{#[fg=yellow]S:#S#[fg=black]} #[fg=green]%l:%M %p #[fg=red]%a #[fg=magenta]%j '
    ## }}}

    ## {{{ [ window status ]
    setw -g window-status-fg default
    setw -g window-status-bg default
    setw -g window-status-attr dim
    setw -g window-status-format "#[fg=green]#I.#[fg=white]#W#[fg=red]#F#[fg=black]|#[default]"
    setw -g window-status-current-fg cyan
    setw -g window-status-current-bg default
    setw -g window-status-current-attr bright
    setw -g window-status-current-format "#[fg=green]#I.#P #[fg=blue]#W #[fg=cyan]#F#[fg=black]|#[default]"
    setw -g window-status-bell-fg black
    setw -g window-status-bell-bg red
    setw -g window-status-bell-attr bright
    setw -g window-status-content-fg default
    setw -g window-status-content-bg default
    setw -g window-status-content-attr dim
    setw -g window-status-activity-fg default
    setw -g window-status-activity-bg default
    setw -g window-status-activity-attr bold
        # #F: flag symbol
           # Symbol    Meaning
           # *         Denotes the current window.
           # -         Marks the last window (previously selected).
           # #         Window is monitored and activity has been detected.
           # !         A bell has occurred in the window.
           # +         Window is monitored for content and it has appeared.
           # ~         The window has been silent for the monitor-silence interval.
    # setw -g word-separators ' -_@'
    ## }}}

    ## {{{ [ message ]
    set -g message-fg white
    set -g message-bg black
    set -g message-attr bright
    set -g message-limit 50 # default is 20
    set -g message-command-bg black
    set -g message-command-fg cyan
    ## }}}

    ## {{{ [ prompt & command ]
    ## command-prompt [-I inputs] [-p prompts] [-t target-client] [template]
    ## confirm-before [-p prompt] [-t target-client] command
    ## display-message [-p] [-c target-client] [-t target-pane] [message]
    ## }}}

## }}}

## {{{2 [ sessions ] initialization, detached & reattached
    ## new-session(new) [-d] [-n window-name] [-s session-name] [-t target-session] [-x width] [-y height] [shell-command]
    #new  -s SessionName -n WindowName Command

## }}}

## {{{2 [ Tips & Tricks ]
    ## browsing URL's
    ## To browse URL's inside tmux you must have urlview installed and configured:
    bind-key b capture-pane \; save-buffer /tmp/tmux-buffer \; run-shell "$TERMINAL -e 'cat /tmp/tmux-buffer | urlview'"

    ## CLIPBOARD selection integration
    ## Requires prefix key before the command key
    ## Copy tmux paste buffer to CLIPBOARD
    # bind-key C-c run "tmux show-buffer | xclip -i -selection clipboard"
    ## Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
    # bind-key C-v run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"
## }}}

## {{{2 [ FAQ ]
## http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ
    ## tmux freezes my terminal when I attach to a session
    ## Some consoles really really don't like attempts to set the window title.
    # set -g set-titles off

    ## Why is C-b the prefix key? How do I change it?
    ## The default key is C-b because the prototype of tmux was originally developed
    ## inside screen and C-b was chosen not to clash with the screen meta key.
    # set -g prefix C-a
    # unbind-key C-b
    # bind-key C-a send-prefix

    ## How do I use UTF-8?
    ## When running tmux in a UTF-8 capable terminal, UTF-8 must be turned on in tmux;
    ## as of release 0.9, tmux attempts to autodetect a UTF-8-capable terminal by
    ## checking the LC_ALL, LC_CTYPE and LANG environment variables.
    # $ tmux -u new
    ## Since the 1.0 release, tmux will turn on UTF-8 related options automatically
    ## (ie status-utf8, and utf8) if the above conditions are met.

    ## How do I use a 256 colour terminal?
    ## Provided the underlying terminal supports 256 colours, it is usually sufficient
    ## to add the following to ~/.tmux.conf:
    # set -g default-terminal "screen-256color"
    ## Note that some platforms do not support "screen-256color" ("infocmp
    ## screen-256color" will return an error) - in this case see the next entry in
    ## this FAQ.

    ## vim or $otherprogram doesn't display 256 colours. What's up?

    ## How do I make Ctrl-PgUp and Ctrl-PgDn work in vim?
    ## tmux supports passing through ctrl (and where supported by the client terminal,
    ## alt and shift) modifiers to function keys using xterm(1)-style key sequences.
    ## This may be enabled per window, or globally with the tmux command:
    # setw -g xterm-keys on
    ## Because the TERM variable inside tmux must be set to "screen", vim will not
    ## automatically detect these keys are available; however, the appropriate key
    ## sequences can be overridden in .vimrc using the following:
    # if &term == "screen"
    #     set t_kN=^[[6;*~
    #     set t_kP=^[[5;*~
	# endif
    ## And similarly for any other keys for which modifiers are desired.
    ## Please note that the "xterm-keys" setting may affect other programs, in the
    ## same way as running them in a standard xterm;
    ## vim users may also want to set the "ttyfast" option inside tmux.

    ##  What is the proper way to escape characters with #(command)?

    ## tmux uses too much CPU. What do I do?
    ## Automatic window renaming may use a lot of CPU, particularly on slow computers:
    ## if this is a problem, turn it off with "setw -g automatic-rename off".

    ## What is the best way to display the load average? Why no #L?
    # uptime|awk '{split(substr($0, index($0, "load")), a, ":"); print a[2]}'

    ## How do I attach the same session to multiple clients but with a different
    ## current window, like screen -x?
    ## One or more of the windows can be linked into multiple sessions manually with
    ## link-window, or a grouped session with all the windows can be created with
    ## new-session -t.

    ## How can I blank the tmux window?
    ## GNU screen has a feature whereby it will blank the screen after a period of
    ## inactivity. To do the same thing in tmux, use the lock-command setting, for
    ## example (with GNU bash):
    # set -g lock-command 'tput civis && read -s -n1'
    ## This will remove the cursor and tell the shell to quit once a key has been
    ## pressed. For zsh, use "read -s -k1".
    ## In addition, it's possible to have both blanking and locking (for instance via
    ## lock(1) or vlock(1)) by using the following:
    # bind x set lock-command '/usr/bin/vlock' \; lock-client \; set lock-command 'tput civis && read -s -n1'

    ## How can I open a new window in the same directory as the current window?

    ## tmux doesn't start with "daemon failed"

    ## vim displays reverse video instead of italics, while less displays italics
    ## (or just regular text) instead of reverse. What's wrong?
    # if [ -n "$TMUX" ]; then
    #   export TERM=screen-256color
## }}}

## {{{ [ options ]
    ## -t : target-client, target-session, target-window, target-pane.
    ## XXX if-shell(if) shell-command command
    ## XXX run-shell(run) shell-command
## }}}

# tmux-powerline {{{
# https://github.com/erikw/tmux-powerline

# set-option -g status on
# set-option -g status-interval 2
# set-option -g status-utf8 on
# set-option -g status-justify "centre"
# set-option -g status-left-length 60
# set-option -g status-right-length 90
# set-option -g status-left "#(~/.tmux-powerline/status-left.sh)"
# set-option -g status-right "#(~/.tmux-powerline/status-right.sh)"

# # tmux-colors-solarized
# # https://github.com/seebi/tmux-colors-solarized
# source ~/.tmux-colors-solarized/tmuxcolors.conf

# set in ~/.bashrc or source .bash_ps1
# PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#I_#P") "$PWD")'
# }}}

# Ruby {{{
    # rvm
# }}}

# vim:ft=tmux:fdm=marker
