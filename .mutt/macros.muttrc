# -*- muttrc -*-
#
# Macros {{{

# macro map key sequence [ description ]
#     This command binds the given sequence of keys to the  given  key
#     in  the given map or maps.  For valid maps, see bind. To specify
#     multiple maps, put only a comma between the maps.

# Macros, what is it all about?

    # This is a short introduction to writing macros. As you will see they are
    # very handy and easy to use. They are no programming language though. (even
    # if since version 1.5.12 mutt allows you to define your own variables)

    # Macros are a way to save keystrokes in mutt. Basically you can do
    # everything you would enter interactively in a macro, too. With one
    # exception: You can't prompt the user for input.

    # See http://www.mutt.org/doc/manual/manual-6.html#ss6.4 resp.
    # http://www.mutt.org/doc/devel/manual.html#functions for a list of
    # functions.

    # Commands can also be used. You have use the <enter-command> prefix
    # (default key ":") just like you would do interactively. See
    # http://www.mutt.org/doc/manual/manual-6.html#ss6.2 resp.
    # http://www.mutt.org/doc/devel/manual.html#commands for a list of commands.

# How to use

    # Usage: macro menu key sequence [ description ]

        # What are menus?

        # Every different "part" of mutt is called a menu.

        # see the functions link above for a complete list. See also /Actions.
        # Note that not all functions are available in every menu.

        # Key

        # The key(s) to hit to execute the macro.

        # Sequence - the actual macro

        # Sequence is just a concatenation of functions and commands. Just use
        # the function names in <> brackets.  You simply write down what you
        # would type in interactively.  Though you can use the bound keys too,
        # that is not recommended! Function names are way more portable and
        # readable.  For example:

        # macro index,pager <f1> "<shell-escape>less
        # /usr/local/doc/mutt/manual.txt<enter>" "Show Mutt documentation"

        # Nothing special yet. Note that you can define a macro for more than
        # one menu (comma no space). You need to quote sequence if it contains
        # spaces.

        # macro index,pager <f1> "<enter-command>unset
        # wait_key<enter><shell-escape>less
        # /usr/local/doc/mutt/manual.txt<enter><enter-command>set
        # wait_key<enter>" "Show Mutt documentation"

        # So here is an example of a more complex macro. It first unsets
        # $wait_key, then runs less and sets $wait_key again.  You can see how
        # to use commands.

        # macro index <tag-prefix-cond><save-message>=foo<enter> "Save tagged
        # messages (if any) to =foo"

        # No space in sequence, no quotes needed. This is an example where you
        # might want a [ask user for input here] function. Unfortunately that
        # does not exist.

    # Special usage: applying to several tagged entries

        # If you define a macro to work with a single entry, then it can not be
        # applied to tagged entries just by using <tag-prefix>macro-key!!!
        # That's because you must remember that macros are just a series of
        # key-strikes you'd do normally, not a real built-in <function>, but
        # tagging only works with real built-in <function>s.

        # If you want to use a macro with multiple entries, then you must define
        # your macro right from the start to do so. I.e. prepend all your
        # functions in your macro that should operate on tagged entries with
        # tag-prefix. For example

        #  macro index ,g '<pipe-entry>shell-cmd...<delete>...'

        # becomes

        #  macro index ,g
        #  '<tag-prefix><pipe-entry>shell-cmd...<tag-prefix><delete>...'

        # Now, such a macro operates on tagged entries by typing just ",g" and
        # not "<tag-prefix>,g", because <tag-prefix> is already present in the
        # macro definition.

        # Alternatively, if you don't like to clutter your macro with
        # <tag-prefix>, you could make a macro which sets and resets auto_tag
        # before executing your original macro:

        #  macro index ,A '<enter-command>set auto_tag=yes<enter>' macro index
        #  ,g '<pipe-entry>shell-cmd...<delete>...' macro index ,Q
        #  '<enter-command>set auto_tag=no<enter>'

        # Then you execute ",A,g,Q" to apply ",g" for all tagged entries.

        # Note: Both solutions do also operate on a single selected entry if
        # there are no tags!!! The auto_tag solution will not stop when there
        # are no tags, it will apply the macro on the current entry, since ",g"
        # remains a simple direct macro. If you want to avoid single operation
        # for macros intended only for tagged operation, then use
        # <tag-prefix-cond>...<end-cond> around every <function> called which
        # needs it. See also /Actions about tagging for further clues.

    # Advanced usage

        # See ConfigTricks and MacroSamples.

        # With the self-defined variables in mutt-1.5.12 and later you can save
        # variable states before you change them:

        # macro index,pager <f1> '<enter-command>set
        # my_wait_key=$wait_key<enter><enter-command>unset
        # wait_key<enter><shell-escape>less
        # /usr/local/doc/mutt/manual.txt<enter><enter-command>set
        # wait_key=$my_wait_key<enter>'

        # This way you can simply restore the previous state and don't have to
        # set an assumed value. This is even more useful with nonbool vars think
        # $index_format or $from.

        # Here's another example how to use self-defined variables:

        # ## spell checker set my_ispell="/usr/bin/aspell -c --mode=email
        # --lang=en_GB" set my_german_ispell="/usr/bin/aspell -c --mode=email
        # --lang=de_DE"

        # # default (english) ispell set ispell=$my_ispell

        # # german aspell macro compose I '<enter-command>set
        # ispell=$my_german_ispell<enter><ispell><enter-command>set
        # ispell=$my_ispell<enter>'

# }}}

# \e = Esc , \c = Ctrl

# others config {{{
# Macros for use in the index.
# macro index "\Cx\Cb" "<change-folder>?"                                   # Folder list.
# macro index "\Cx\Cs" "<pipe-message>cat > ~/"                             # Save message
# macro index "\'"     "<clear-flag>r"                                      # Mark as un-replied
# macro index "y"      "<sync-mailbox><change-folder>?<toggle-mailboxes>"   # "-y" screen
# macro index "\ea"    "<change-folder>=archives/<tab><tab>"                # List archives
# macro index "\eb"    "<pipe-message>lbdb-fetchaddr<enter>"                # Store address details in lbdb.
# macro index "\eh"    "<pipe-message>mailhops<enter>"                      # View the path of the mail.
# macro index "\ef"    "<pipe-message>view-x-face<enter>"                   # View the X-Face (if there is one).
# macro index "\ev"    "<pipe-message>less<enter>"                          # View the message in less.
# macro index "\Cs\Co" "<limit>~h \"X-SpamProbe: GOOD\"<enter><last-entry>" # View good emails.
# macro index "\Cs\Cs" "<limit>~h \"X-SpamProbe: SPAM\"<enter><last-entry>" # View bad emails.
#
# # Macros for use in the pager.
# macro pager "w"      "<enter-command>set invsmart_wrap invmarkers<enter>" # Toggle wrap stuff
# macro pager "y"      "<sync-mailbox><change-folder>?<toggle-mailboxes>"   # "-y" screen
# macro pager "\e1"    "<enter-command>set pager_index_lines=1<enter>"      # Change PIL size
# macro pager "\e2"    "<enter-command>set pager_index_lines=2<enter>"      # Change PIL size
# macro pager "\e3"    "<enter-command>set pager_index_lines=3<enter>"      # Change PIL size
# macro pager "\e4"    "<enter-command>set pager_index_lines=4<enter>"      # Change PIL size
# macro pager "\e5"    "<enter-command>set pager_index_lines=5<enter>"      # Change PIL size
# macro pager "\e6"    "<enter-command>set pager_index_lines=6<enter>"      # Change PIL size
# macro pager "\e7"    "<enter-command>set pager_index_lines=7<enter>"      # Change PIL size
# macro pager "\e8"    "<enter-command>set pager_index_lines=8<enter>"      # Change PIL size
# macro pager "\e9"    "<enter-command>set pager_index_lines=9<enter>"      # Change PIL size
# macro pager "\e0"    "<enter-command>set pager_index_lines=0<enter>"      # Change PIL size
# macro pager "\Cx\Cb" "<change-folder>?"                                   # Folder list.
# macro pager "\Cx\Cs" "<pipe-message>cat > ~/"                             # Save message
# macro pager "\eb"    "<pipe-message>lbdb-fetchaddr<enter>"                # Store address details in lbdb.
# macro pager "\eh"    "<pipe-message>mailhops<enter>"                      # View the path of the mail.
# macro pager "\ef"    "<pipe-message>view-x-face<enter>"                   # View the X-Face (if there is one).
# macro pager "\ev"    "<pipe-message>less<enter>"                          # View the message in less.
# macro pager "\el"    "<enter-command>set invpipe_decode<enter>\
# <pipe-message>linkify|w3m -T text/html<enter><enter-command>\
# set invpipe_decode<enter>"                                                # View the message in w3m.
# macro pager "\Cs\Cs" "<pipe-message>spamprobe -T score<enter>"            # What's the score for this message?
# macro pager "\Cs\Cj" "<pipe-message>spamprobe spam<enter>"                # This message is junk.
# macro pager "\Cs\Cg" "<pipe-message>spamprobe good<enter>"                # This message is good.
#
# # Provide some "on-line" help.
# macro generic "\e?" "<shell-escape>less /usr/local/doc/mutt/manual.txt<enter>"
# macro index   "\e?" "<shell-escape>less /usr/local/doc/mutt/manual.txt<enter>"
# macro pager   "\e?" "<shell-escape>less /usr/local/doc/mutt/manual.txt<enter>"
# }}}

# Show documentation when pressing F2
#macro generic,pager <F2> "<shell-escape> zcat /usr/share/doc/mutt/manual.txt.gz | sensible-pager<enter>" "show Mutt documentation"

# Add macros to make the folder browser usable by always using the mailboxes setup above:

# Negative Mailboxes, Index, etc
# toggle mailbox/folder list.
macro index,pager c "<change-folder>?<toggle-mailboxes>" "open a different mailbox/folder"

# quick jump to mailbox/folder
macro index gi "<change-folder>=INBOX<enter>" "Go to inbox"
macro index gs "<change-folder>=Sent<enter>" "Go to Sent Mail"
macro index gd "<change-folder>=Drafts<enter>" "Go to drafts"

# jump to next unread mailbox/folder
# macro index <esc><tab> <next-unread-mailbox>

# TODO jump to my thread's new reply. {{{
# macro index <Tab> ????<key sequence>
# "~x .*@stardiviner" # I'm in the References list.
# "~h \"^In-[Rr]eply-[Tt]o: .*@stardiviner\" " # only my mail is replied by others in thread
# <next-new-then-unread>
# <search> -- search for a regular expression.
# <jump> -- jump to index number.
# use "<change-mailbox>?" "?" to show up a list of mailboxes.
#
macro index <Tab> "<search>~N (~x .*@stardiviner)<enter>"
# macro index <Tab> "<search>~h 'In-[Rr]eply-[Tt]o: .*@stardiviner'<enter>"
# }}}

# manipulate emails: view, copy, move, attach, trash, spam, ham, {{{
# TODO
# sync/fetch/get new mails in background.
# macro generic $ "<shell-escape>'getmail -n -l &'<enter>"
# macro generic $ "<sync-mailbox><shell-escape>~/.mutt/scripts/syncMail.sh &<enter>"

# copy/move/attach emails
# To additionally get straight to the folder browser when copying, moving and attaching mail, add the following macros:
macro index C "<copy-message>?<toggle-mailboxes>" "copy a message to a mailbox"
macro index M "<save-message>?<toggle-mailboxes>" "move a message to a mailbox"
macro compose A "<attach-message>?<toggle-mailboxes>" "attach message(s) to this message"
macro index B "<bounce-message>?<toggle-mailboxes>" "bounce a message to another user"

# Trash
# move marked delete mails into Trash when you press "d"
# you only need to save save-message function into your Trash. like $HOME/Mails/Trash , mail will auto be marked with "D" , in order let "d"
# to save mails to Trash, you can bind a macro for "d".
# if you want to delete mails in Trash, this is a loop. so you need to recover delete-message function of "d" in Trash, and use "d" in other mailboxes.
folder-hook .      'macro index,pager d "<save-message>=Trash<enter>"'
folder-hook =Trash 'macro index,pager d <delete-message>'
# }}}

# mail address {{{
# mutt alias
# macro generic,index,pager a "<creat-alias>" "creat an alias from a message sender"

# [ abook ]
#address book related
#set query_command = "lbdbq '%s'"     #;$HOME/bin/mutt_ldap_query.py '%s'"
# If <complete-query> is called instead, it will use as the search string what you have typed back to the last space or comma as for the alias completion.
#set query_command =  "abook --datafile $HOME/.mutt/abook/addressbook --mutt-query '%s'"
macro generic,index,pager \ca "<shell-escape>abook --config $HOME/.mutt/abook/abookrc --datafile $HOME/.mutt/abook/addressbook<return>" "launch abook"
macro index,pager A "|abook --add-email --config $HOME/.mutt/abook/abookrc --datafile $HOME/.mutt/abook/addressbook<return>" "add sender to abook"
# macro pager A "|abook --add-email-quiet\n" "Add sender to abook"
# macro index,pager A "<pipe-message>abook --add-email<return>" "add the sender address to abook"
# }}}

# attachments: press "v" to view attachment list, press "Enter" to view them with mailcap.

# imitate the old search-body function
macro index \eb "<search>~b " "search in message bodies"

# Encrypt/Decrypt: GPG, PGP {{{

# Encrypt a message with GPG key on the fly.
# "p" to show PGP menu: encrypt/sign(as)/clear composing message.

# Verifying a message signature on the fly.
macro index \Cv \
          "<enter-command> set my_crypt_verify_sig=\$crypt_verify_sig<enter> \
          <enter-command> set crypt_verify_sig=yes<enter> \
          <display-message><enter-command> set crypt_verify_sig=\$my_crypt_verify_sig<enter>" \
          'Verify PGP signature and open the message'

macro pager \Cv \
          "<exit><enter-command> set my_crypt_verify_sig=\$crypt_verify_sig<enter> \
          <enter-command> set crypt_verify_sig=yes<enter> \
          <display-message><enter-command> set crypt_verify_sig=\$my_crypt_verify_sig<enter>" \
          'Verify PGP signature'
# }}}

# [ bogofilter ] {{{
# -s -> register as spam
# -n -> register as ham
# -S -> undo prior spam registration
# -N -> undo prior ham registration
#
# {maildir}
#   (initial)
#       $ bogofilter -s -B ~/Mails/spam/
#       $ bogofilter -n -B ~/Mails/NonSpam/
#   (corrective)
# change "<save-message>=spam/\n" into "<save-message>=spam/<enter><enter>" to do not
# ask when move to spam/
macro index S "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -Ns -B\n<save-message>=spam/\n"  "Learn as spam and undo ham, then save to junk"
macro pager S "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -Ns -B\n<save-message>=spam/\n"  "Learn as spam and undo ham, then save to junk"
macro index H "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -Sn -B\n<save-message>=INBOX/\n"          "Learn as ham and undo spam, then save to index"
macro pager H "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -Sn -B\n<save-message>=INBOX/\n"          "Learn as ham and undo spam, then save to index"
#macro index S "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -Ns"
#macro index H "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -Sn"
# To automatically mark for deletion everything in the spam folder when it is viewed, I placed this line at the bottom of the /etc/Muttrc file:
folder-hook spam push 'D.\n'
#
# {mbox}
#   (initial)
#       $ bogofilter -M -s -I ~/Mails/spam/
#       $ bogofilter -M -n -I ~/Mails/NonSpam/
#   (corrective)
# macro index S "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -M -Ns -I\n<save-message>=spam/\n"  "Learn as spam and undo ham, then save to junk"
# macro pager S "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -M -Ns -I\n<save-message>=spam/\n"  "Learn as spam and undo ham, then save to junk"
# macro index H "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -M -Sn -I\n<save-message>=INBOX/\n"          "Learn as ham and undo spam, then save to index"
# macro pager H "|bogofilter -c ~/.mutt/bogofilter/bogofilter.cf -M -Sn -I\n<save-message>=INBOX/\n"          "Learn as ham and undo spam, then save to index"
# }}}

# [ urlview ]
macro pager \cb   "|urlview\n" "browse URLs"
# macro pager \cb   <pipe-entry>'urlview'<enter> "browse URLs"

# [ fetch new emails ]
macro index ,f  <sync-mailbox><toggle-write><shell-escape>~/.mutt/scripts/getmail.sh<enter><sync-mailbox>


# [ mairix ] {{{
# macro generic ,f "<shell-escape>mairix " "search via mairix"

# Search Mails
# macro index <f8> "<sync-mailbox><toggle-write><shell-escape>mairix \
# \"$@\"<enter><change-folder>=Search<enter><sort>t<delete-pattern>~=<enter><sync-mailbox>"
# macro pager <f8> "<sync-mailbox><toggle-write><shell-escape>mairix \
# \"$@\"<enter><change-folder>=Search<enter><sort>t<delete-pattern>~=<enter><sync-mailbox>"
# macro index ,f "<sync-mailbox><toggle-write><shell-escape>~/.mutt/scripts/mymairix<enter><change-folder>=Search<enter><sort>t<delete-pattern>~=<enter><sync-mailbox>"
######################
# macro index ,f "<sync-mailbox><toggle-write><shell-escape>~/.mutt/scripts/mymairix<enter><change-folder>=Search<enter><sort>t<delete-pattern>~=<enter><sync-mailbox>"
#### macro index,pager,browser ,f "<toggle-write><shell-escape>~/.mutt/scripts/mymairix<enter><change-folder>=Search<enter><sort>t<delete-pattern>~=<enter>"
# macro generic ,f "<enter-command>set my_cmd = \`/home/chris/.mutt/scripts/msearch\`<return>\
#     <enter-command>push \$my_cmd<return>" "search messages"
macro generic ,f "<enter-command>set my_cmd=\`$HOME/.mutt/scripts/msearch\`<return>\
    <enter-command>push \$my_cmd<return>" "search messages"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Useful searches
#
#    t:word                             Match word in the To: header.
#
#    c:word                             Match word in the Cc: header.
#
#    f:word                             Match word in the From: header.
#
#    s:word                             Match word in the Subject: header.
#
#    m:word                             Match word in the Message-ID:
#
#                                       header.
#
#    b:word                             Match word in the message body
#                                       (text or html!)
#
#    d:[start-datespec]-[end-datespec]  Match messages with Date: headers
#                                       lying in the specific range.
#
# Multiple body parts may be grouped together, if a match in any of them
# is sought.
#
#    tc:word  Match word in either the To: or Cc: headers (or both).
#
#    bs:word  Match word in either the Subject: header or the message body
#             (or both).
#
#    The a: search pattern is an abbreviation for tcf:; i.e. match the
#    word in the To:, Cc: or From: headers.  ("a" stands for "address" in
#    this case.)
#
# The "word" argument to the search strings can take various forms.
#
#    ~word        Match messages not containing the word.
#
#    word1,word2  This matches if both the words are matched in the
#                 specified message part.
#
#    word1/word2  This matches if either of the words are matched in the
#                 specified message part.
#
#    substring=   Match any word containing substring as a substring
#
#    substring=N  Match any word containing substring, allowing up to N
#                 errors in the match.
#
#    ^substring=  Match any word containing substring as a substring, with
#                 the requirement that substring occurs at the beginning
#                 of the matched word.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

########################
# screen: prompt for mairix search parameters
#macro index,pager,browser ,f "\
#<enter-command> set my_wait_key=\$wait_key wait_key=no<enter>\
#<shell-escape>screen -X screen -t 'mutt search' sh -c 'mairixquery && mutt -f =search'<enter>\
#<enter-command>set wait_key=\$my_wait_key &my_wait_key<enter>" "mairix query"
######################
# Mairix
# macro generic ,f "<shell-escape>mairix " "search via mairix"
# Namazu/nmzmail
# macro generic ,F "<shell-escape>nmzmail -r ~/.maildir/.Search<enter>" "search via nmzmail"
# Load the results mailbox
# macro generic ,,f "<change-folder><kill-line>=.Search<enter>" "load the search results mailbox"
# }}}

# [ Mu ] {{{
# first macro does the search according to user query, second macro jumps to result list
macro index <F8> "<shell-escape>mu find --clearlinks --format=links --linksdir=~/Mails/Search " "mu find"
macro index <F7> "<change-folder-readonly>=Search" "mu find results"

# rebuild database:
# $ mu index --rebuild --maildir=~/Mails
# search recipes:
# $ man mu-find
# e.g. $ mu find subject:snow from:john

# ##  combind them into one.
# FIXME
# macro index,pager <F7> "<shell-escape>[[ -d ~/.mu/results ]] && rm -r ~/.mu/results; mkdir -p ~/.mu/results/{cur,new,tmp}<change-folder-readonly>~/.mu/results<shell-escape>mu find --format=links --linksdir ~/.mu/results --clearlinks  " "mu-find"
# }}}

# vim: ft=muttrc: foldmethod=marker
